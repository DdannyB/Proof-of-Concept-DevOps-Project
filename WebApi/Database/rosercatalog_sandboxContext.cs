using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace WebApi.Database
{
    public partial class rosercatalog_sandboxContext : DbContext
    {
        public virtual DbSet<ActivityLog> ActivityLog { get; set; }
        public virtual DbSet<ApiClaims> ApiClaims { get; set; }
        public virtual DbSet<ApiResources> ApiResources { get; set; }
        public virtual DbSet<ApiScopeClaims> ApiScopeClaims { get; set; }
        public virtual DbSet<ApiScopes> ApiScopes { get; set; }
        public virtual DbSet<ApiSecrets> ApiSecrets { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<ClientClaims> ClientClaims { get; set; }
        public virtual DbSet<ClientCorsOrigins> ClientCorsOrigins { get; set; }
        public virtual DbSet<ClientGrantTypes> ClientGrantTypes { get; set; }
        public virtual DbSet<ClientIdPrestrictions> ClientIdPrestrictions { get; set; }
        public virtual DbSet<ClientPostLogoutRedirectUris> ClientPostLogoutRedirectUris { get; set; }
        public virtual DbSet<ClientProperties> ClientProperties { get; set; }
        public virtual DbSet<ClientRedirectUris> ClientRedirectUris { get; set; }
        public virtual DbSet<Clients> Clients { get; set; }
        public virtual DbSet<ClientScopes> ClientScopes { get; set; }
        public virtual DbSet<ClientSecrets> ClientSecrets { get; set; }
        public virtual DbSet<Effect> Effect { get; set; }
        public virtual DbSet<IdentityClaims> IdentityClaims { get; set; }
        public virtual DbSet<IdentityResources> IdentityResources { get; set; }
        public virtual DbSet<Matrix> Matrix { get; set; }
        public virtual DbSet<MatrixAssessment> MatrixAssessment { get; set; }
        public virtual DbSet<MatrixEffect> MatrixEffect { get; set; }
        public virtual DbSet<MatrixProbability> MatrixProbability { get; set; }
        public virtual DbSet<MatrixResult> MatrixResult { get; set; }
        public virtual DbSet<MatrixValue> MatrixValue { get; set; }
        public virtual DbSet<MatrixValueEffect> MatrixValueEffect { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<NotificationMessage> NotificationMessage { get; set; }
        public virtual DbSet<PersistedGrants> PersistedGrants { get; set; }
        public virtual DbSet<Probability> Probability { get; set; }
        public virtual DbSet<Recipient> Recipient { get; set; }
        public virtual DbSet<TblAction> TblAction { get; set; }
        public virtual DbSet<TblActionCategory> TblActionCategory { get; set; }
        public virtual DbSet<TblActionTemplate> TblActionTemplate { get; set; }
        public virtual DbSet<TblActionTemplateList> TblActionTemplateList { get; set; }
        public virtual DbSet<TblActiveChangeRequest> TblActiveChangeRequest { get; set; }
        public virtual DbSet<TblActivity> TblActivity { get; set; }
        public virtual DbSet<TblActivityBlindtype> TblActivityBlindtype { get; set; }
        public virtual DbSet<TblApplication> TblApplication { get; set; }
        public virtual DbSet<TblApplicationRiskMatrix> TblApplicationRiskMatrix { get; set; }
        public virtual DbSet<TblArchiveCode> TblArchiveCode { get; set; }
        public virtual DbSet<TblAreaCode> TblAreaCode { get; set; }
        public virtual DbSet<TblAttachment> TblAttachment { get; set; }
        public virtual DbSet<TblAudit> TblAudit { get; set; }
        public virtual DbSet<TblBaseMaterial> TblBaseMaterial { get; set; }
        public virtual DbSet<TblBaseMaterialGroup> TblBaseMaterialGroup { get; set; }
        public virtual DbSet<TblBasePermit> TblBasePermit { get; set; }
        public virtual DbSet<TblBasePermitAuthorization> TblBasePermitAuthorization { get; set; }
        public virtual DbSet<TblBasePermitGroup> TblBasePermitGroup { get; set; }
        public virtual DbSet<TblBasePermitItem> TblBasePermitItem { get; set; }
        public virtual DbSet<TblBasePermitItemAuthorization> TblBasePermitItemAuthorization { get; set; }
        public virtual DbSet<TblBasePermitItemPart> TblBasePermitItemPart { get; set; }
        public virtual DbSet<TblBasePermitItemPartDocumentLabel> TblBasePermitItemPartDocumentLabel { get; set; }
        public virtual DbSet<TblBasePermitItemPartPermitQuickFilter> TblBasePermitItemPartPermitQuickFilter { get; set; }
        public virtual DbSet<TblBasePermitMaintenanceStrategy> TblBasePermitMaintenanceStrategy { get; set; }
        public virtual DbSet<TblBasePermitMaintenanceStrategyBasePermitItemPart> TblBasePermitMaintenanceStrategyBasePermitItemPart { get; set; }
        public virtual DbSet<TblBasePermitMaintenanceStrategyDetails> TblBasePermitMaintenanceStrategyDetails { get; set; }
        public virtual DbSet<TblBasePermitMaintenanceStrategyKeyword> TblBasePermitMaintenanceStrategyKeyword { get; set; }
        public virtual DbSet<TblBasePermitTrigger> TblBasePermitTrigger { get; set; }
        public virtual DbSet<TblBasePermitTriggerBasePermitItemPart> TblBasePermitTriggerBasePermitItemPart { get; set; }
        public virtual DbSet<TblBasePermitTriggered> TblBasePermitTriggered { get; set; }
        public virtual DbSet<TblBaseReport> TblBaseReport { get; set; }
        public virtual DbSet<TblBaseReportGroup> TblBaseReportGroup { get; set; }
        public virtual DbSet<TblBaseReportItem> TblBaseReportItem { get; set; }
        public virtual DbSet<TblBaseReportItemPart> TblBaseReportItemPart { get; set; }
        public virtual DbSet<TblBasicListSignbox> TblBasicListSignbox { get; set; }
        public virtual DbSet<TblBlindList> TblBlindList { get; set; }
        public virtual DbSet<TblBlindListChecklist> TblBlindListChecklist { get; set; }
        public virtual DbSet<TblBlindListDocumentLabel> TblBlindListDocumentLabel { get; set; }
        public virtual DbSet<TblBlindListGraph> TblBlindListGraph { get; set; }
        public virtual DbSet<TblBlindListLog> TblBlindListLog { get; set; }
        public virtual DbSet<TblBlindlistPidRevision> TblBlindlistPidRevision { get; set; }
        public virtual DbSet<TblBlindListPidRevisionPageView> TblBlindListPidRevisionPageView { get; set; }
        public virtual DbSet<TblBlindListReport> TblBlindListReport { get; set; }
        public virtual DbSet<TblBlindListReportColumn> TblBlindListReportColumn { get; set; }
        public virtual DbSet<TblBlindListReportColumnField> TblBlindListReportColumnField { get; set; }
        public virtual DbSet<TblBlindlistReportHeaderColumn> TblBlindlistReportHeaderColumn { get; set; }
        public virtual DbSet<TblBlindListRevision> TblBlindListRevision { get; set; }
        public virtual DbSet<TblBlindListScope> TblBlindListScope { get; set; }
        public virtual DbSet<TblBlindListType> TblBlindListType { get; set; }
        public virtual DbSet<TblBlindListTypeBlindTypeQcType> TblBlindListTypeBlindTypeQcType { get; set; }
        public virtual DbSet<TblBlindPoint> TblBlindPoint { get; set; }
        public virtual DbSet<TblBlindPointActivity> TblBlindPointActivity { get; set; }
        public virtual DbSet<TblBlindPointActivityChecklist> TblBlindPointActivityChecklist { get; set; }
        public virtual DbSet<TblBlindPointActivityCircumstance> TblBlindPointActivityCircumstance { get; set; }
        public virtual DbSet<TblBlindPointActivityLabel> TblBlindPointActivityLabel { get; set; }
        public virtual DbSet<TblBlindPointActivityLabelLog> TblBlindPointActivityLabelLog { get; set; }
        public virtual DbSet<TblBlindPointActivityMaterial> TblBlindPointActivityMaterial { get; set; }
        public virtual DbSet<TblBlindPointActivityPdaLog> TblBlindPointActivityPdaLog { get; set; }
        public virtual DbSet<TblBlindPointChecklist> TblBlindPointChecklist { get; set; }
        public virtual DbSet<TblBlindPointDisciplineConfirmation> TblBlindPointDisciplineConfirmation { get; set; }
        public virtual DbSet<TblBlindPointDocumentLabel> TblBlindPointDocumentLabel { get; set; }
        public virtual DbSet<TblBlindPointHazard> TblBlindPointHazard { get; set; }
        public virtual DbSet<TblBlindPointLog> TblBlindPointLog { get; set; }
        public virtual DbSet<TblBlindProjectMainPhaseSubPhaseReleaseFinish> TblBlindProjectMainPhaseSubPhaseReleaseFinish { get; set; }
        public virtual DbSet<TblBlindType> TblBlindType { get; set; }
        public virtual DbSet<TblBlindTypeNormPos> TblBlindTypeNormPos { get; set; }
        public virtual DbSet<TblBlindTypeNormPosActivity> TblBlindTypeNormPosActivity { get; set; }
        public virtual DbSet<TblBlindTypeNormPosActivityLabel> TblBlindTypeNormPosActivityLabel { get; set; }
        public virtual DbSet<TblBlindTypeNormPosActivityNormbase> TblBlindTypeNormPosActivityNormbase { get; set; }
        public virtual DbSet<TblBlindTypeNormPosActivityNormbaseReference> TblBlindTypeNormPosActivityNormbaseReference { get; set; }
        public virtual DbSet<TblBlindTypeNormPosActivityTemplate> TblBlindTypeNormPosActivityTemplate { get; set; }
        public virtual DbSet<TblBlindTypeNormPosActivityTemplateMaterial> TblBlindTypeNormPosActivityTemplateMaterial { get; set; }
        public virtual DbSet<TblBlindTypeSymbol> TblBlindTypeSymbol { get; set; }
        public virtual DbSet<TblBolting> TblBolting { get; set; }
        public virtual DbSet<TblBoltType> TblBoltType { get; set; }
        public virtual DbSet<TblBranch> TblBranch { get; set; }
        public virtual DbSet<TblBudgetCenterAllocation> TblBudgetCenterAllocation { get; set; }
        public virtual DbSet<TblBudgetCode> TblBudgetCode { get; set; }
        public virtual DbSet<TblBudgetTemplate> TblBudgetTemplate { get; set; }
        public virtual DbSet<TblBudgetTemplateSubDiscipline> TblBudgetTemplateSubDiscipline { get; set; }
        public virtual DbSet<TblBudgetType> TblBudgetType { get; set; }
        public virtual DbSet<TblBuilding> TblBuilding { get; set; }
        public virtual DbSet<TblBusinessRule> TblBusinessRule { get; set; }
        public virtual DbSet<TblBusinessRuleGroup> TblBusinessRuleGroup { get; set; }
        public virtual DbSet<TblCalcCorfactor> TblCalcCorfactor { get; set; }
        public virtual DbSet<TblCalcCorfactorGroup> TblCalcCorfactorGroup { get; set; }
        public virtual DbSet<TblCalcGroupCorfactor> TblCalcGroupCorfactor { get; set; }
        public virtual DbSet<TblCalcGroupMain> TblCalcGroupMain { get; set; }
        public virtual DbSet<TblCalcGroupNormbaseMemo> TblCalcGroupNormbaseMemo { get; set; }
        public virtual DbSet<TblCalcGroupSub> TblCalcGroupSub { get; set; }
        public virtual DbSet<TblCalcGroupXref> TblCalcGroupXref { get; set; }
        public virtual DbSet<TblCalendar> TblCalendar { get; set; }
        public virtual DbSet<TblCategory> TblCategory { get; set; }
        public virtual DbSet<TblCause> TblCause { get; set; }
        public virtual DbSet<TblCbs> TblCbs { get; set; }
        public virtual DbSet<TblCertificate> TblCertificate { get; set; }
        public virtual DbSet<TblCertificateCertificateNorm> TblCertificateCertificateNorm { get; set; }
        public virtual DbSet<TblCertificateColumnVisibility> TblCertificateColumnVisibility { get; set; }
        public virtual DbSet<TblCertificateCustomName> TblCertificateCustomName { get; set; }
        public virtual DbSet<TblCertificateCustomValue> TblCertificateCustomValue { get; set; }
        public virtual DbSet<TblCertificateDocumentLabel> TblCertificateDocumentLabel { get; set; }
        public virtual DbSet<TblCertificateGroup> TblCertificateGroup { get; set; }
        public virtual DbSet<TblCertificateInspection> TblCertificateInspection { get; set; }
        public virtual DbSet<TblCertificateMaterialLibrary> TblCertificateMaterialLibrary { get; set; }
        public virtual DbSet<TblCertificateNorm> TblCertificateNorm { get; set; }
        public virtual DbSet<TblCertificateType> TblCertificateType { get; set; }
        public virtual DbSet<TblChangeRequest> TblChangeRequest { get; set; }
        public virtual DbSet<TblChangeRequestAction> TblChangeRequestAction { get; set; }
        public virtual DbSet<TblChangeRequestAdditionalPlantData> TblChangeRequestAdditionalPlantData { get; set; }
        public virtual DbSet<TblChangeRequestChecklistItemUser> TblChangeRequestChecklistItemUser { get; set; }
        public virtual DbSet<TblChangeRequestChecklistUser> TblChangeRequestChecklistUser { get; set; }
        public virtual DbSet<TblChangeRequestComplexityItem> TblChangeRequestComplexityItem { get; set; }
        public virtual DbSet<TblChangeRequestDocumentItem> TblChangeRequestDocumentItem { get; set; }
        public virtual DbSet<TblChangeRequestDocumentLabel> TblChangeRequestDocumentLabel { get; set; }
        public virtual DbSet<TblChangeRequestFormulaParameter> TblChangeRequestFormulaParameter { get; set; }
        public virtual DbSet<TblChangeRequestLabel> TblChangeRequestLabel { get; set; }
        public virtual DbSet<TblChangeRequestLog> TblChangeRequestLog { get; set; }
        public virtual DbSet<TblChangeRequestWorkflowState> TblChangeRequestWorkflowState { get; set; }
        public virtual DbSet<TblChecklist> TblChecklist { get; set; }
        public virtual DbSet<TblChecklistItem> TblChecklistItem { get; set; }
        public virtual DbSet<TblChecklistItemGroup> TblChecklistItemGroup { get; set; }
        public virtual DbSet<TblChecklistItemGroupReviewSubGroup> TblChecklistItemGroupReviewSubGroup { get; set; }
        public virtual DbSet<TblChecklistShortcode> TblChecklistShortcode { get; set; }
        public virtual DbSet<TblCircumstance> TblCircumstance { get; set; }
        public virtual DbSet<TblCleanCode> TblCleanCode { get; set; }
        public virtual DbSet<TblCleanEquipmentPart> TblCleanEquipmentPart { get; set; }
        public virtual DbSet<TblCleanIndex> TblCleanIndex { get; set; }
        public virtual DbSet<TblCleaningMethod> TblCleaningMethod { get; set; }
        public virtual DbSet<TblColumnDisplayFormat> TblColumnDisplayFormat { get; set; }
        public virtual DbSet<TblColumnDisplayFormatData> TblColumnDisplayFormatData { get; set; }
        public virtual DbSet<TblComplexityItem> TblComplexityItem { get; set; }
        public virtual DbSet<TblComplexityItemDocumentLabel> TblComplexityItemDocumentLabel { get; set; }
        public virtual DbSet<TblComplexityItemMainGroup> TblComplexityItemMainGroup { get; set; }
        public virtual DbSet<TblComplexityItemReviewSubGroup> TblComplexityItemReviewSubGroup { get; set; }
        public virtual DbSet<TblComplexityItemSubGroup> TblComplexityItemSubGroup { get; set; }
        public virtual DbSet<TblConnection> TblConnection { get; set; }
        public virtual DbSet<TblConnectionType> TblConnectionType { get; set; }
        public virtual DbSet<TblContractor> TblContractor { get; set; }
        public virtual DbSet<TblContractorField> TblContractorField { get; set; }
        public virtual DbSet<TblCostCenter> TblCostCenter { get; set; }
        public virtual DbSet<TblCostIndicationRange> TblCostIndicationRange { get; set; }
        public virtual DbSet<TblCriticality> TblCriticality { get; set; }
        public virtual DbSet<TblCurveStyle> TblCurveStyle { get; set; }
        public virtual DbSet<TblCustomColumn> TblCustomColumn { get; set; }
        public virtual DbSet<TblDataExchangeImportMessage> TblDataExchangeImportMessage { get; set; }
        public virtual DbSet<TblDataExchangeLoadStatus> TblDataExchangeLoadStatus { get; set; }
        public virtual DbSet<TblDataExchangeObjectType> TblDataExchangeObjectType { get; set; }
        public virtual DbSet<TblDataExchangeObjectTypeUser> TblDataExchangeObjectTypeUser { get; set; }
        public virtual DbSet<TblDataExchangeSetting> TblDataExchangeSetting { get; set; }
        public virtual DbSet<TblDataExchangeStagingTable> TblDataExchangeStagingTable { get; set; }
        public virtual DbSet<TblDataExchangeStagingTableUser> TblDataExchangeStagingTableUser { get; set; }
        public virtual DbSet<TblDataExchangeUpdateStatus> TblDataExchangeUpdateStatus { get; set; }
        public virtual DbSet<TblDeadline> TblDeadline { get; set; }
        public virtual DbSet<TblDecision> TblDecision { get; set; }
        public virtual DbSet<TblDecisionItem> TblDecisionItem { get; set; }
        public virtual DbSet<TblDefaultAttachment> TblDefaultAttachment { get; set; }
        public virtual DbSet<TblDeliverable> TblDeliverable { get; set; }
        public virtual DbSet<TblDepartment> TblDepartment { get; set; }
        public virtual DbSet<TblDepartmentSection> TblDepartmentSection { get; set; }
        public virtual DbSet<TblDia> TblDia { get; set; }
        public virtual DbSet<TblDiaAlternative> TblDiaAlternative { get; set; }
        public virtual DbSet<TblDiaDnCoupling> TblDiaDnCoupling { get; set; }
        public virtual DbSet<TblDiaWthSchedCoupling> TblDiaWthSchedCoupling { get; set; }
        public virtual DbSet<TblDigitalSignature> TblDigitalSignature { get; set; }
        public virtual DbSet<TblDisciplineCode> TblDisciplineCode { get; set; }
        public virtual DbSet<TblDisciplineType> TblDisciplineType { get; set; }
        public virtual DbSet<TblDn> TblDn { get; set; }
        public virtual DbSet<TblDnAlternative> TblDnAlternative { get; set; }
        public virtual DbSet<TblDocumentColumnMainGroup> TblDocumentColumnMainGroup { get; set; }
        public virtual DbSet<TblDocumentColumnSubGroup> TblDocumentColumnSubGroup { get; set; }
        public virtual DbSet<TblDocumentItem> TblDocumentItem { get; set; }
        public virtual DbSet<TblDocumentItemDocumentColumnSubGroup> TblDocumentItemDocumentColumnSubGroup { get; set; }
        public virtual DbSet<TblDocumentItemMainGroup> TblDocumentItemMainGroup { get; set; }
        public virtual DbSet<TblDocumentItemSubGroup> TblDocumentItemSubGroup { get; set; }
        public virtual DbSet<TblDocumentLabel> TblDocumentLabel { get; set; }
        public virtual DbSet<TblDocumentLabelDefault> TblDocumentLabelDefault { get; set; }
        public virtual DbSet<TblDocumentLabelGroup> TblDocumentLabelGroup { get; set; }
        public virtual DbSet<TblDocumentLabelShortcodeSubDiscipline> TblDocumentLabelShortcodeSubDiscipline { get; set; }
        public virtual DbSet<TblDrawing> TblDrawing { get; set; }
        public virtual DbSet<TblDrawingLayout> TblDrawingLayout { get; set; }
        public virtual DbSet<TblDrawingObject> TblDrawingObject { get; set; }
        public virtual DbSet<TblDrawingObjectPosition> TblDrawingObjectPosition { get; set; }
        public virtual DbSet<TblEdge> TblEdge { get; set; }
        public virtual DbSet<TblEffect> TblEffect { get; set; }
        public virtual DbSet<TblElevation> TblElevation { get; set; }
        public virtual DbSet<TblEquipmentCode> TblEquipmentCode { get; set; }
        public virtual DbSet<TblException> TblException { get; set; }
        public virtual DbSet<TblExceptionCalendar> TblExceptionCalendar { get; set; }
        public virtual DbSet<TblExceptionContractor> TblExceptionContractor { get; set; }
        public virtual DbSet<TblExceptionProject> TblExceptionProject { get; set; }
        public virtual DbSet<TblExceptionResource> TblExceptionResource { get; set; }
        public virtual DbSet<TblExecution> TblExecution { get; set; }
        public virtual DbSet<TblFeatureScripts> TblFeatureScripts { get; set; }
        public virtual DbSet<TblFillerMaterial> TblFillerMaterial { get; set; }
        public virtual DbSet<TblFillerMaterialGroup> TblFillerMaterialGroup { get; set; }
        public virtual DbSet<TblFlangePicture> TblFlangePicture { get; set; }
        public virtual DbSet<TblFlangeSubType> TblFlangeSubType { get; set; }
        public virtual DbSet<TblFlangeType> TblFlangeType { get; set; }
        public virtual DbSet<TblForecastUsersHrsWeek> TblForecastUsersHrsWeek { get; set; }
        public virtual DbSet<TblForecastUsersQtyWeek> TblForecastUsersQtyWeek { get; set; }
        public virtual DbSet<TblForecastWpphases> TblForecastWpphases { get; set; }
        public virtual DbSet<TblFormula> TblFormula { get; set; }
        public virtual DbSet<TblFormulaParameter> TblFormulaParameter { get; set; }
        public virtual DbSet<TblFriction> TblFriction { get; set; }
        public virtual DbSet<TblGasketType> TblGasketType { get; set; }
        public virtual DbSet<TblGrid> TblGrid { get; set; }
        public virtual DbSet<TblGridAdvViewinfo> TblGridAdvViewinfo { get; set; }
        public virtual DbSet<TblGridFilterinfo> TblGridFilterinfo { get; set; }
        public virtual DbSet<TblGridSummary> TblGridSummary { get; set; }
        public virtual DbSet<TblGridViewinfo> TblGridViewinfo { get; set; }
        public virtual DbSet<TblGridViewInfoActiveGridFilterInfo> TblGridViewInfoActiveGridFilterInfo { get; set; }
        public virtual DbSet<TblHandoverGroupMain> TblHandoverGroupMain { get; set; }
        public virtual DbSet<TblHandoverGroupSub> TblHandoverGroupSub { get; set; }
        public virtual DbSet<TblHazard> TblHazard { get; set; }
        public virtual DbSet<TblHazardSymbol> TblHazardSymbol { get; set; }
        //public virtual DbSet<TblImportlog> TblImportlog { get; set; }
        public virtual DbSet<TblImportLog> TblImportLog { get; set; }
        public virtual DbSet<TblIsolationActivityRevertReason> TblIsolationActivityRevertReason { get; set; }
        public virtual DbSet<TblJfactorEffect> TblJfactorEffect { get; set; }
        public virtual DbSet<TblJfactorExposure> TblJfactorExposure { get; set; }
        public virtual DbSet<TblJfactorProbability> TblJfactorProbability { get; set; }
        public virtual DbSet<TblJob> TblJob { get; set; }
        public virtual DbSet<TblJobCustom> TblJobCustom { get; set; }
        public virtual DbSet<TblJobData> TblJobData { get; set; }
        public virtual DbSet<TblJobDetail> TblJobDetail { get; set; }
        public virtual DbSet<TblJobDetailData> TblJobDetailData { get; set; }
        public virtual DbSet<TblJobDetailResource> TblJobDetailResource { get; set; }
        public virtual DbSet<TblJobDetailResourceData> TblJobDetailResourceData { get; set; }
        public virtual DbSet<TblJobDetailResourceSmartCalculation> TblJobDetailResourceSmartCalculation { get; set; }
        public virtual DbSet<TblJustificationCaption> TblJustificationCaption { get; set; }
        public virtual DbSet<TblJustificationCombo> TblJustificationCombo { get; set; }
        public virtual DbSet<TblKpisetting> TblKpisetting { get; set; }
        public virtual DbSet<TblLabel> TblLabel { get; set; }
        public virtual DbSet<TblLabels> TblLabels { get; set; }
        public virtual DbSet<TblLanguage> TblLanguage { get; set; }
        public virtual DbSet<TblLbs> TblLbs { get; set; }
        public virtual DbSet<TblLbsAlternative> TblLbsAlternative { get; set; }
        public virtual DbSet<TblLibraryActiveJob> TblLibraryActiveJob { get; set; }
        public virtual DbSet<TblLibraryActiveProcurementContract> TblLibraryActiveProcurementContract { get; set; }
        public virtual DbSet<TblLibraryActiveScopeTemplate> TblLibraryActiveScopeTemplate { get; set; }
        public virtual DbSet<TblLibraryActiveScopeTemplateActive> TblLibraryActiveScopeTemplateActive { get; set; }
        public virtual DbSet<TblLibraryActiveScopeTemplateTasklist> TblLibraryActiveScopeTemplateTasklist { get; set; }
        public virtual DbSet<TblLibraryJob> TblLibraryJob { get; set; }
        public virtual DbSet<TblLibraryJobRevisionInfo> TblLibraryJobRevisionInfo { get; set; }
        public virtual DbSet<TblLibraryJobXref> TblLibraryJobXref { get; set; }
        public virtual DbSet<TblLibraryProcurementContract> TblLibraryProcurementContract { get; set; }
        public virtual DbSet<TblLibraryProcurementContractPricelist> TblLibraryProcurementContractPricelist { get; set; }
        public virtual DbSet<TblLibraryProcurementContractProject> TblLibraryProcurementContractProject { get; set; }
        public virtual DbSet<TblLibraryProcurementContractRevisionInfo> TblLibraryProcurementContractRevisionInfo { get; set; }
        public virtual DbSet<TblLibraryScopeTemplate> TblLibraryScopeTemplate { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateJob> TblLibraryScopeTemplateJob { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateJobBasePermit> TblLibraryScopeTemplateJobBasePermit { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateMilestoneTemplate> TblLibraryScopeTemplateMilestoneTemplate { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateProject> TblLibraryScopeTemplateProject { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateRelation> TblLibraryScopeTemplateRelation { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateRelationPosition> TblLibraryScopeTemplateRelationPosition { get; set; }
        public virtual DbSet<TblLibraryScopeTemplateRevisionInfo> TblLibraryScopeTemplateRevisionInfo { get; set; }
        public virtual DbSet<TblLicense> TblLicense { get; set; }
        public virtual DbSet<TblLisl> TblLisl { get; set; }
        public virtual DbSet<TblLislDocumentLabel> TblLislDocumentLabel { get; set; }
        public virtual DbSet<TblLislLislRemark> TblLislLislRemark { get; set; }
        public virtual DbSet<TblLislNdeInspectionPlan> TblLislNdeInspectionPlan { get; set; }
        public virtual DbSet<TblLislProgress> TblLislProgress { get; set; }
        public virtual DbSet<TblLislProgressPhase> TblLislProgressPhase { get; set; }
        public virtual DbSet<TblLislRemark> TblLislRemark { get; set; }
        public virtual DbSet<TblLog> TblLog { get; set; }
        public virtual DbSet<TblLogging> TblLogging { get; set; }
        public virtual DbSet<TblLogo> TblLogo { get; set; }
        public virtual DbSet<TblLubricant> TblLubricant { get; set; }
        public virtual DbSet<TblMail> TblMail { get; set; }
        public virtual DbSet<TblMainDiscipline> TblMainDiscipline { get; set; }
        public virtual DbSet<TblMainMaterialGroup> TblMainMaterialGroup { get; set; }
        public virtual DbSet<TblMainPhase> TblMainPhase { get; set; }
        public virtual DbSet<TblMainSbs> TblMainSbs { get; set; }
        public virtual DbSet<TblMainToolsAndConsumablesGroup> TblMainToolsAndConsumablesGroup { get; set; }
        public virtual DbSet<TblMaterial> TblMaterial { get; set; }
        public virtual DbSet<TblMaterialBom> TblMaterialBom { get; set; }
        public virtual DbSet<TblMaterialCustom> TblMaterialCustom { get; set; }
        public virtual DbSet<TblMaterialDistribution> TblMaterialDistribution { get; set; }
        public virtual DbSet<TblMaterialGroupBi> TblMaterialGroupBi { get; set; }
        public virtual DbSet<TblMaterialLibrary> TblMaterialLibrary { get; set; }
        public virtual DbSet<TblMaterialPipeSpec> TblMaterialPipeSpec { get; set; }
        public virtual DbSet<TblMaterialPipeSpecLibrary> TblMaterialPipeSpecLibrary { get; set; }
        public virtual DbSet<TblMaterialReceived> TblMaterialReceived { get; set; }
        public virtual DbSet<TblMaterialSource> TblMaterialSource { get; set; }
        public virtual DbSet<TblMaxOffsetFlangeFaces> TblMaxOffsetFlangeFaces { get; set; }
        public virtual DbSet<TblMeeting> TblMeeting { get; set; }
        public virtual DbSet<TblMilestone> TblMilestone { get; set; }
        public virtual DbSet<TblMilestoneTarget> TblMilestoneTarget { get; set; }
        public virtual DbSet<TblMyIsolationlist> TblMyIsolationlist { get; set; }
        public virtual DbSet<TblNdeBatch> TblNdeBatch { get; set; }
        public virtual DbSet<TblNdeClass> TblNdeClass { get; set; }
        public virtual DbSet<TblNdeDeadline> TblNdeDeadline { get; set; }
        public virtual DbSet<TblNdeMain> TblNdeMain { get; set; }
        public virtual DbSet<TblNdePipeLocationLink> TblNdePipeLocationLink { get; set; }
        public virtual DbSet<TblNdeRequest> TblNdeRequest { get; set; }
        public virtual DbSet<TblNdeRequestDocumentLabel> TblNdeRequestDocumentLabel { get; set; }
        public virtual DbSet<TblNdeResults> TblNdeResults { get; set; }
        public virtual DbSet<TblNdeSub> TblNdeSub { get; set; }
        public virtual DbSet<TblNode> TblNode { get; set; }
        public virtual DbSet<TblNormbase> TblNormbase { get; set; }
        public virtual DbSet<TblNormbaseMemo> TblNormbaseMemo { get; set; }
        public virtual DbSet<TblNormset> TblNormset { get; set; }
        public virtual DbSet<TblNormsetCircumstanceCalcCorfactor> TblNormsetCircumstanceCalcCorfactor { get; set; }
        public virtual DbSet<TblNormsetElevationCalcCorfactor> TblNormsetElevationCalcCorfactor { get; set; }
        public virtual DbSet<TblObs> TblObs { get; set; }
        public virtual DbSet<TblOrganisation> TblOrganisation { get; set; }
        public virtual DbSet<TblOrganisationStructure> TblOrganisationStructure { get; set; }
        public virtual DbSet<TblP6customField> TblP6customField { get; set; }
        public virtual DbSet<TblP6profile> TblP6profile { get; set; }
        public virtual DbSet<TblP6profileCustomField> TblP6profileCustomField { get; set; }
        public virtual DbSet<TblP6session> TblP6session { get; set; }
        public virtual DbSet<TblP6sessionHeartbeat> TblP6sessionHeartbeat { get; set; }
        public virtual DbSet<TblP6sessionLog> TblP6sessionLog { get; set; }
        public virtual DbSet<TblP6sessionMilestone> TblP6sessionMilestone { get; set; }
        public virtual DbSet<TblP6sessionPlancard> TblP6sessionPlancard { get; set; }
        public virtual DbSet<TblP6sessionRelation> TblP6sessionRelation { get; set; }
        public virtual DbSet<TblPart> TblPart { get; set; }
        public virtual DbSet<TblPasswordHistory> TblPasswordHistory { get; set; }
        public virtual DbSet<TblPermit> TblPermit { get; set; }
        public virtual DbSet<TblPermitData> TblPermitData { get; set; }
        public virtual DbSet<TblPermitDocumentLabel> TblPermitDocumentLabel { get; set; }
        public virtual DbSet<TblPermitFunctionGroup> TblPermitFunctionGroup { get; set; }
        public virtual DbSet<TblPermitHorizontalClusterStrategy> TblPermitHorizontalClusterStrategy { get; set; }
        public virtual DbSet<TblPermitHorizontalClusterStrategyFilter> TblPermitHorizontalClusterStrategyFilter { get; set; }
        public virtual DbSet<TblPermitItemPart> TblPermitItemPart { get; set; }
        public virtual DbSet<TblPermitLog> TblPermitLog { get; set; }
        public virtual DbSet<TblPermitMessage> TblPermitMessage { get; set; }
        public virtual DbSet<TblPermitQuickFilter> TblPermitQuickFilter { get; set; }
        public virtual DbSet<TblPermitWorkflowState> TblPermitWorkflowState { get; set; }
        public virtual DbSet<TblPid> TblPid { get; set; }
        public virtual DbSet<TblPidRevision> TblPidRevision { get; set; }
        public virtual DbSet<TblPidRevisionIgnoreUpdate> TblPidRevisionIgnoreUpdate { get; set; }
        public virtual DbSet<TblPidRevisionLine> TblPidRevisionLine { get; set; }
        public virtual DbSet<TblPidRevisionMemo> TblPidRevisionMemo { get; set; }
        public virtual DbSet<TblPidRevisionPipeLine> TblPidRevisionPipeLine { get; set; }
        public virtual DbSet<TblPidRevisionTemplateBlindPoint> TblPidRevisionTemplateBlindPoint { get; set; }
        public virtual DbSet<TblPipeline> TblPipeline { get; set; }
        public virtual DbSet<TblPipelineConnection> TblPipelineConnection { get; set; }
        public virtual DbSet<TblPipeLineProduct> TblPipeLineProduct { get; set; }
        public virtual DbSet<TblPipeType> TblPipeType { get; set; }
        public virtual DbSet<TblPlantCustom> TblPlantCustom { get; set; }
        public virtual DbSet<TblPlantCustomShortcode> TblPlantCustomShortcode { get; set; }
        public virtual DbSet<TblPlantData> TblPlantData { get; set; }
        public virtual DbSet<TblPlantDataCustom> TblPlantDataCustom { get; set; }
        public virtual DbSet<TblPlantDataDocumentLabel> TblPlantDataDocumentLabel { get; set; }
        public virtual DbSet<TblPlantDataPid> TblPlantDataPid { get; set; }
        public virtual DbSet<TblPlantDataTestSystem> TblPlantDataTestSystem { get; set; }
        public virtual DbSet<TblPlaylist> TblPlaylist { get; set; }
        public virtual DbSet<TblPlaylistItem> TblPlaylistItem { get; set; }
        public virtual DbSet<TblPn> TblPn { get; set; }
        public virtual DbSet<TblPnAlternative> TblPnAlternative { get; set; }
        public virtual DbSet<TblPolDegree> TblPolDegree { get; set; }
        public virtual DbSet<TblPolGrade> TblPolGrade { get; set; }
        public virtual DbSet<TblPolType> TblPolType { get; set; }
        public virtual DbSet<TblPosition> TblPosition { get; set; }
        public virtual DbSet<TblPrimaveraAnalysis> TblPrimaveraAnalysis { get; set; }
        public virtual DbSet<TblPrintTemplate> TblPrintTemplate { get; set; }
        public virtual DbSet<TblPrintTemplateDetail> TblPrintTemplateDetail { get; set; }
        public virtual DbSet<TblPriority> TblPriority { get; set; }
        public virtual DbSet<TblProbability> TblProbability { get; set; }
        public virtual DbSet<TblProcessarea> TblProcessarea { get; set; }
        public virtual DbSet<TblProcessAreaRestrictedRight> TblProcessAreaRestrictedRight { get; set; }
        public virtual DbSet<TblProcessAreaRestrictedRightUserProcessArea> TblProcessAreaRestrictedRightUserProcessArea { get; set; }
        public virtual DbSet<TblProcessAreaUser> TblProcessAreaUser { get; set; }
        public virtual DbSet<TblProcessAreaUserReviewSubGroup> TblProcessAreaUserReviewSubGroup { get; set; }
        public virtual DbSet<TblProcurementAccountcode> TblProcurementAccountcode { get; set; }
        public virtual DbSet<TblProcurementCode> TblProcurementCode { get; set; }
        public virtual DbSet<TblProdType> TblProdType { get; set; }
        public virtual DbSet<TblProduct> TblProduct { get; set; }
        public virtual DbSet<TblProductSymbol> TblProductSymbol { get; set; }
        public virtual DbSet<TblProductType> TblProductType { get; set; }
        public virtual DbSet<TblProgressBatch> TblProgressBatch { get; set; }
        public virtual DbSet<TblProgressBatchReport> TblProgressBatchReport { get; set; }
        public virtual DbSet<TblProgressColor> TblProgressColor { get; set; }
        public virtual DbSet<TblProgressResponsible> TblProgressResponsible { get; set; }
        public virtual DbSet<TblProject> TblProject { get; set; }
        public virtual DbSet<TblProjectOrganisation> TblProjectOrganisation { get; set; }
        public virtual DbSet<TblProjectWorkflow> TblProjectWorkflow { get; set; }
        public virtual DbSet<TblProjectXref> TblProjectXref { get; set; }
        public virtual DbSet<TblPropack> TblPropack { get; set; }
        public virtual DbSet<TblPropackExport> TblPropackExport { get; set; }
        public virtual DbSet<TblPropackExportDeliverable> TblPropackExportDeliverable { get; set; }
        public virtual DbSet<TblPropackExportLog> TblPropackExportLog { get; set; }
        public virtual DbSet<TblPropackExportResource> TblPropackExportResource { get; set; }
        public virtual DbSet<TblPropackExportSent> TblPropackExportSent { get; set; }
        public virtual DbSet<TblPropackExportSentImportDeliverableRaw> TblPropackExportSentImportDeliverableRaw { get; set; }
        public virtual DbSet<TblPropackExportSentImportRaw> TblPropackExportSentImportRaw { get; set; }
        public virtual DbSet<TblPropackFilter> TblPropackFilter { get; set; }
        public virtual DbSet<TblPropackTemplate> TblPropackTemplate { get; set; }
        public virtual DbSet<TblPunchCategory> TblPunchCategory { get; set; }
        public virtual DbSet<TblPunchGroup> TblPunchGroup { get; set; }
        public virtual DbSet<TblPushJob> TblPushJob { get; set; }
        public virtual DbSet<TblPushUser> TblPushUser { get; set; }
        public virtual DbSet<TblQaqcBasicListSignBox> TblQaqcBasicListSignBox { get; set; }
        public virtual DbSet<TblQaqcQuicklist> TblQaqcQuicklist { get; set; }
        public virtual DbSet<TblQaqcReport> TblQaqcReport { get; set; }
        public virtual DbSet<TblQualityCheckType> TblQualityCheckType { get; set; }
        public virtual DbSet<TblQuotationRequest> TblQuotationRequest { get; set; }
        public virtual DbSet<TblQuotationRequestVendor> TblQuotationRequestVendor { get; set; }
        public virtual DbSet<TblRate> TblRate { get; set; }
        public virtual DbSet<TblReference> TblReference { get; set; }
        public virtual DbSet<TblReleaseForPermit> TblReleaseForPermit { get; set; }
        public virtual DbSet<TblReport> TblReport { get; set; }
        public virtual DbSet<TblReportItemPart> TblReportItemPart { get; set; }
        public virtual DbSet<TblReportPrinter> TblReportPrinter { get; set; }
        public virtual DbSet<TblReportToolBoxItem> TblReportToolBoxItem { get; set; }
        public virtual DbSet<TblReportToolBoxItemPart> TblReportToolBoxItemPart { get; set; }
        public virtual DbSet<TblReportView> TblReportView { get; set; }
        public virtual DbSet<TblReportViewParameter> TblReportViewParameter { get; set; }
        public virtual DbSet<TblResource> TblResource { get; set; }
        public virtual DbSet<TblResourceConstraint> TblResourceConstraint { get; set; }
        public virtual DbSet<TblReview> TblReview { get; set; }
        public virtual DbSet<TblReviewComplexityItem> TblReviewComplexityItem { get; set; }
        public virtual DbSet<TblReviewGroup> TblReviewGroup { get; set; }
        public virtual DbSet<TblReviewMainGroup> TblReviewMainGroup { get; set; }
        public virtual DbSet<TblReviewSubGroup> TblReviewSubGroup { get; set; }
        public virtual DbSet<TblRevision> TblRevision { get; set; }
        public virtual DbSet<TblRevisionChange> TblRevisionChange { get; set; }
        public virtual DbSet<TblRevisionFeedback> TblRevisionFeedback { get; set; }
        public virtual DbSet<TblRevisionInfo> TblRevisionInfo { get; set; }
        public virtual DbSet<TblRight> TblRight { get; set; }
        public virtual DbSet<TblRightFunction> TblRightFunction { get; set; }
        public virtual DbSet<TblRightGroup> TblRightGroup { get; set; }
        public virtual DbSet<TblRightPermission> TblRightPermission { get; set; }
        public virtual DbSet<TblRingJoint> TblRingJoint { get; set; }
        public virtual DbSet<TblRiskMatrix> TblRiskMatrix { get; set; }
        public virtual DbSet<TblRole> TblRole { get; set; }
        public virtual DbSet<TblRoleRight> TblRoleRight { get; set; }
        public virtual DbSet<TblSceIcon> TblSceIcon { get; set; }
        public virtual DbSet<TblSchedule> TblSchedule { get; set; }
        public virtual DbSet<TblScheduleAlternative> TblScheduleAlternative { get; set; }
        public virtual DbSet<TblScheduleChange> TblScheduleChange { get; set; }
        public virtual DbSet<TblScheduleChangeProject> TblScheduleChangeProject { get; set; }
        public virtual DbSet<TblScope> TblScope { get; set; }
        public virtual DbSet<TblScopeCategory> TblScopeCategory { get; set; }
        public virtual DbSet<TblScopeChangeEffect> TblScopeChangeEffect { get; set; }
        public virtual DbSet<TblScopeChangeReason> TblScopeChangeReason { get; set; }
        public virtual DbSet<TblScopeChecklist> TblScopeChecklist { get; set; }
        public virtual DbSet<TblScopeCode> TblScopeCode { get; set; }
        public virtual DbSet<TblScopeCustom> TblScopeCustom { get; set; }
        public virtual DbSet<TblScopeDecisionMaker> TblScopeDecisionMaker { get; set; }
        public virtual DbSet<TblScopeDepartment> TblScopeDepartment { get; set; }
        public virtual DbSet<TblScopeDocumentLabel> TblScopeDocumentLabel { get; set; }
        public virtual DbSet<TblScopeHazard> TblScopeHazard { get; set; }
        public virtual DbSet<TblScopeHoGroupSub> TblScopeHoGroupSub { get; set; }
        public virtual DbSet<TblScopeInput> TblScopeInput { get; set; }
        public virtual DbSet<TblScopeJob> TblScopeJob { get; set; }
        public virtual DbSet<TblScopeJobCustomColumn> TblScopeJobCustomColumn { get; set; }
        public virtual DbSet<TblScopeJobDetail> TblScopeJobDetail { get; set; }
        public virtual DbSet<TblScopeJobDetailResource> TblScopeJobDetailResource { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceCircumstance> TblScopeJobDetailResourceCircumstance { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceEstimate> TblScopeJobDetailResourceEstimate { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceEstimateCorrectionfactor> TblScopeJobDetailResourceEstimateCorrectionfactor { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceMaterial> TblScopeJobDetailResourceMaterial { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceProgressLog> TblScopeJobDetailResourceProgressLog { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceTarget> TblScopeJobDetailResourceTarget { get; set; }
        public virtual DbSet<TblScopeJobDetailResourceToolsAndConsumables> TblScopeJobDetailResourceToolsAndConsumables { get; set; }
        public virtual DbSet<TblScopeJobDetailTarget> TblScopeJobDetailTarget { get; set; }
        public virtual DbSet<TblScopeJobPermit> TblScopeJobPermit { get; set; }
        public virtual DbSet<TblScopeJobTarget> TblScopeJobTarget { get; set; }
        public virtual DbSet<TblScopeLabel> TblScopeLabel { get; set; }
        public virtual DbSet<TblScopeLog> TblScopeLog { get; set; }
        public virtual DbSet<TblScopeMaterial> TblScopeMaterial { get; set; }
        public virtual DbSet<TblScopeMemo> TblScopeMemo { get; set; }
        public virtual DbSet<TblScopeMilestone> TblScopeMilestone { get; set; }
        public virtual DbSet<TblScopeMilestone1> TblScopeMilestone1 { get; set; }
        public virtual DbSet<TblScopePidRevision> TblScopePidRevision { get; set; }
        public virtual DbSet<TblScopePolution> TblScopePolution { get; set; }
        public virtual DbSet<TblScopePrio> TblScopePrio { get; set; }
        public virtual DbSet<TblScopePunchlist> TblScopePunchlist { get; set; }
        public virtual DbSet<TblScopePunchlistDocumentLabel> TblScopePunchlistDocumentLabel { get; set; }
        public virtual DbSet<TblScopeQaqcQuicklist> TblScopeQaqcQuicklist { get; set; }
        public virtual DbSet<TblScopeQuality> TblScopeQuality { get; set; }
        public virtual DbSet<TblScopeQualityCheck> TblScopeQualityCheck { get; set; }
        public virtual DbSet<TblScopeRelation> TblScopeRelation { get; set; }
        public virtual DbSet<TblScopeRelationPosition> TblScopeRelationPosition { get; set; }
        public virtual DbSet<TblScopeRequestReview> TblScopeRequestReview { get; set; }
        public virtual DbSet<TblScopeRequestRevision> TblScopeRequestRevision { get; set; }
        public virtual DbSet<TblScopeResponsible> TblScopeResponsible { get; set; }
        public virtual DbSet<TblScopeReview> TblScopeReview { get; set; }
        public virtual DbSet<TblScopeScopeCategory> TblScopeScopeCategory { get; set; }
        public virtual DbSet<TblScopeScopeCustom> TblScopeScopeCustom { get; set; }
        public virtual DbSet<TblScopeScopeQuality> TblScopeScopeQuality { get; set; }
        public virtual DbSet<TblScopeStatus> TblScopeStatus { get; set; }
        public virtual DbSet<TblScopeSubDiscipline> TblScopeSubDiscipline { get; set; }
        public virtual DbSet<TblScopeTagsMisc> TblScopeTagsMisc { get; set; }
        public virtual DbSet<TblScopeTestSystem> TblScopeTestSystem { get; set; }
        public virtual DbSet<TblScopeType> TblScopeType { get; set; }
        public virtual DbSet<TblScopeWpcode> TblScopeWpcode { get; set; }
        public virtual DbSet<TblScopeWpphaseProgress> TblScopeWpphaseProgress { get; set; }
        public virtual DbSet<TblSetting> TblSetting { get; set; }
        public virtual DbSet<TblSetting1> TblSetting1 { get; set; }
        public virtual DbSet<TblShortcode> TblShortcode { get; set; }
        public virtual DbSet<TblShortcodeHoGroupSub> TblShortcodeHoGroupSub { get; set; }
        public virtual DbSet<TblShortcodeQaqcQuicklist> TblShortcodeQaqcQuicklist { get; set; }
        public virtual DbSet<TblShortcodeTemplate> TblShortcodeTemplate { get; set; }
        public virtual DbSet<TblShortcodeTemplateWpcode> TblShortcodeTemplateWpcode { get; set; }
        public virtual DbSet<TblSignboxes> TblSignboxes { get; set; }
        public virtual DbSet<TblSnapshot> TblSnapshot { get; set; }
        public virtual DbSet<TblSnapshotMilestone> TblSnapshotMilestone { get; set; }
        public virtual DbSet<TblSnapshotScopeJob> TblSnapshotScopeJob { get; set; }
        public virtual DbSet<TblSubDiscipline> TblSubDiscipline { get; set; }
        public virtual DbSet<TblSubMaterialGroup> TblSubMaterialGroup { get; set; }
        public virtual DbSet<TblSubPhase> TblSubPhase { get; set; }
        public virtual DbSet<TblSubProject> TblSubProject { get; set; }
        public virtual DbSet<TblSubSbs> TblSubSbs { get; set; }
        public virtual DbSet<TblSubToolsAndConsumablesGroup> TblSubToolsAndConsumablesGroup { get; set; }
        public virtual DbSet<TblSymbol> TblSymbol { get; set; }
        public virtual DbSet<TblSymbolCategory> TblSymbolCategory { get; set; }
        public virtual DbSet<TblSyncChanged> TblSyncChanged { get; set; }
        public virtual DbSet<TblSystemLog> TblSystemLog { get; set; }
        public virtual DbSet<TblTarget> TblTarget { get; set; }
        public virtual DbSet<TblTemplateBlindPoint> TblTemplateBlindPoint { get; set; }
        public virtual DbSet<TblTemplateBlindPointActivity> TblTemplateBlindPointActivity { get; set; }
        public virtual DbSet<TblTemplateBlindPointActivityChecklist> TblTemplateBlindPointActivityChecklist { get; set; }
        public virtual DbSet<TblTemplateBlindPointActivityCircumstance> TblTemplateBlindPointActivityCircumstance { get; set; }
        public virtual DbSet<TblTemplateBlindpointActivityMaterial> TblTemplateBlindpointActivityMaterial { get; set; }
        public virtual DbSet<TblTemplateBlindPointChecklist> TblTemplateBlindPointChecklist { get; set; }
        public virtual DbSet<TblTemplateBlindPointDiscipline> TblTemplateBlindPointDiscipline { get; set; }
        public virtual DbSet<TblTemplateBlindPointDocumentLabel> TblTemplateBlindPointDocumentLabel { get; set; }
        public virtual DbSet<TblTemplateBlindPointGraph> TblTemplateBlindPointGraph { get; set; }
        public virtual DbSet<TblTemplateBlindPointHazard> TblTemplateBlindPointHazard { get; set; }
        public virtual DbSet<TblTemplateBlindpointPlantdata> TblTemplateBlindpointPlantdata { get; set; }
        public virtual DbSet<TblTemplateBlindPointProduct> TblTemplateBlindPointProduct { get; set; }
        public virtual DbSet<TblTemplateMilestone> TblTemplateMilestone { get; set; }
        public virtual DbSet<TblTestSystem> TblTestSystem { get; set; }
        public virtual DbSet<TblTestSystemMedium> TblTestSystemMedium { get; set; }
        public virtual DbSet<TblTestSystemPressure> TblTestSystemPressure { get; set; }
        public virtual DbSet<TblThickness> TblThickness { get; set; }
        public virtual DbSet<TblThicknessAlternative> TblThicknessAlternative { get; set; }
        public virtual DbSet<TblThreadForm> TblThreadForm { get; set; }
        public virtual DbSet<TblTimekeeping> TblTimekeeping { get; set; }
        public virtual DbSet<TblTimekeepingCutoff> TblTimekeepingCutoff { get; set; }
        public virtual DbSet<TblTimekeepingEntry> TblTimekeepingEntry { get; set; }
        public virtual DbSet<TblTimekeepingEntryCircum> TblTimekeepingEntryCircum { get; set; }
        public virtual DbSet<TblTimekeepingEntryInefficiency> TblTimekeepingEntryInefficiency { get; set; }
        public virtual DbSet<TblTimekeepingEntryLog> TblTimekeepingEntryLog { get; set; }
        public virtual DbSet<TblTimekeepingEntryType> TblTimekeepingEntryType { get; set; }
        public virtual DbSet<TblTimekeepingInEfficientieType> TblTimekeepingInEfficientieType { get; set; }
        public virtual DbSet<TblTimekeepingMainCode> TblTimekeepingMainCode { get; set; }
        public virtual DbSet<TblTimekeepingMileage> TblTimekeepingMileage { get; set; }
        public virtual DbSet<TblTimeKeepingMileageType> TblTimeKeepingMileageType { get; set; }
        public virtual DbSet<TblTimekeepingPeriod> TblTimekeepingPeriod { get; set; }
        public virtual DbSet<TblTimekeepingSheet> TblTimekeepingSheet { get; set; }
        public virtual DbSet<TblTimekeepingSubCode> TblTimekeepingSubCode { get; set; }
        public virtual DbSet<TblTimekeepingTraffic> TblTimekeepingTraffic { get; set; }
        public virtual DbSet<TblTimekeepingTrafficData> TblTimekeepingTrafficData { get; set; }
        public virtual DbSet<TblToken> TblToken { get; set; }
        public virtual DbSet<TblToolBoxItem> TblToolBoxItem { get; set; }
        public virtual DbSet<TblToolBoxItemPart> TblToolBoxItemPart { get; set; }
        public virtual DbSet<TblToolsAndConsumables> TblToolsAndConsumables { get; set; }
        public virtual DbSet<TblTorqType> TblTorqType { get; set; }
        public virtual DbSet<TblUnit> TblUnit { get; set; }
        public virtual DbSet<TblUnitOfMeasurement> TblUnitOfMeasurement { get; set; }
        public virtual DbSet<TblUser> TblUser { get; set; }
        public virtual DbSet<TblUserApplicationProject> TblUserApplicationProject { get; set; }
        public virtual DbSet<TblUserApplicationProjectRight> TblUserApplicationProjectRight { get; set; }
        public virtual DbSet<TblUserApplicationProjectRole> TblUserApplicationProjectRole { get; set; }
        public virtual DbSet<TblUserContractorField> TblUserContractorField { get; set; }
        public virtual DbSet<TblUserDashboard> TblUserDashboard { get; set; }
        public virtual DbSet<TblUserDepartment> TblUserDepartment { get; set; }
        public virtual DbSet<TblUserDepartmentSection> TblUserDepartmentSection { get; set; }
        public virtual DbSet<TblUserDocumentLabelGroup> TblUserDocumentLabelGroup { get; set; }
        public virtual DbSet<TblUserLislProgressPhase> TblUserLislProgressPhase { get; set; }
        public virtual DbSet<TblUserLogin> TblUserLogin { get; set; }
        public virtual DbSet<TblUserMemberContractor> TblUserMemberContractor { get; set; }
        public virtual DbSet<TblUserMemberDiscipline> TblUserMemberDiscipline { get; set; }
        public virtual DbSet<TblUserMemberQcResource> TblUserMemberQcResource { get; set; }
        public virtual DbSet<TblUserMemberShortcode> TblUserMemberShortcode { get; set; }
        public virtual DbSet<TblUserMemberWpcode> TblUserMemberWpcode { get; set; }
        public virtual DbSet<TblUserPermitFunctionGroup> TblUserPermitFunctionGroup { get; set; }
        public virtual DbSet<TblUserProjectOrganisationStructure> TblUserProjectOrganisationStructure { get; set; }
        public virtual DbSet<TblUserReport> TblUserReport { get; set; }
        public virtual DbSet<TblUserReportFiltersToHide> TblUserReportFiltersToHide { get; set; }
        public virtual DbSet<TblUserReviewSubGroup> TblUserReviewSubGroup { get; set; }
        public virtual DbSet<TblUserSecurity> TblUserSecurity { get; set; }
        public virtual DbSet<TblUserSetting> TblUserSetting { get; set; }
        public virtual DbSet<TblUserTimekeepingPeriod> TblUserTimekeepingPeriod { get; set; }
        public virtual DbSet<TblViewLayout> TblViewLayout { get; set; }
        public virtual DbSet<TblWallpaper> TblWallpaper { get; set; }
        public virtual DbSet<TblWallpaperBand> TblWallpaperBand { get; set; }
        public virtual DbSet<TblWallpaperDynamicCol> TblWallpaperDynamicCol { get; set; }
        public virtual DbSet<TblWallpaperDynamicColDetail> TblWallpaperDynamicColDetail { get; set; }
        public virtual DbSet<TblWallpaperFilter> TblWallpaperFilter { get; set; }
        public virtual DbSet<TblWallpaperIsolationCol> TblWallpaperIsolationCol { get; set; }
        public virtual DbSet<TblWallpaperMainPhase> TblWallpaperMainPhase { get; set; }
        public virtual DbSet<TblWallpaperStaticCol> TblWallpaperStaticCol { get; set; }
        public virtual DbSet<TblWbs> TblWbs { get; set; }
        public virtual DbSet<TblWebToken> TblWebToken { get; set; }
        public virtual DbSet<TblWeldConnection> TblWeldConnection { get; set; }
        public virtual DbSet<TblWeldConnectionPart> TblWeldConnectionPart { get; set; }
        public virtual DbSet<TblWeldConnectionWelder> TblWeldConnectionWelder { get; set; }
        public virtual DbSet<TblWeldConsumables> TblWeldConsumables { get; set; }
        public virtual DbSet<TblWeldElectrode> TblWeldElectrode { get; set; }
        public virtual DbSet<TblWelder> TblWelder { get; set; }
        public virtual DbSet<TblWelderBranch> TblWelderBranch { get; set; }
        public virtual DbSet<TblWelderProject> TblWelderProject { get; set; }
        public virtual DbSet<TblWelderQualification> TblWelderQualification { get; set; }
        public virtual DbSet<TblWelderQualificationDocumentLabel> TblWelderQualificationDocumentLabel { get; set; }
        public virtual DbSet<TblWelderQualificationRecord> TblWelderQualificationRecord { get; set; }
        public virtual DbSet<TblWeldNorm> TblWeldNorm { get; set; }
        public virtual DbSet<TblWeldPosition> TblWeldPosition { get; set; }
        public virtual DbSet<TblWeldProcedure> TblWeldProcedure { get; set; }
        public virtual DbSet<TblWeldProcedureDocumentLabel> TblWeldProcedureDocumentLabel { get; set; }
        public virtual DbSet<TblWeldProcedureQualificationRecord> TblWeldProcedureQualificationRecord { get; set; }
        public virtual DbSet<TblWeldProcedureQualificationRecordDocumentLabel> TblWeldProcedureQualificationRecordDocumentLabel { get; set; }
        public virtual DbSet<TblWeldProcedureSpecification> TblWeldProcedureSpecification { get; set; }
        public virtual DbSet<TblWeldProcedureSpecificationDocumentLabel> TblWeldProcedureSpecificationDocumentLabel { get; set; }
        public virtual DbSet<TblWeldProcess> TblWeldProcess { get; set; }
        public virtual DbSet<TblWeldType> TblWeldType { get; set; }
        public virtual DbSet<TblWorkflow> TblWorkflow { get; set; }
        public virtual DbSet<TblWorkflowState> TblWorkflowState { get; set; }
        public virtual DbSet<TblWorkflowStateRightRestriction> TblWorkflowStateRightRestriction { get; set; }
        public virtual DbSet<TblWorkflowStateTransition> TblWorkflowStateTransition { get; set; }
        public virtual DbSet<TblWorkflowStateTransitionMail> TblWorkflowStateTransitionMail { get; set; }
        public virtual DbSet<TblWorkflowStateTransitionMailRecipient> TblWorkflowStateTransitionMailRecipient { get; set; }
        public virtual DbSet<TblWorkflowStateTransitionOrganisationStructure> TblWorkflowStateTransitionOrganisationStructure { get; set; }
        public virtual DbSet<TblWorkflowStateTransitionRole> TblWorkflowStateTransitionRole { get; set; }
        public virtual DbSet<TblWorkpermit> TblWorkpermit { get; set; }
        public virtual DbSet<TblWorkPreparationCode> TblWorkPreparationCode { get; set; }
        public virtual DbSet<TblWorkpreparationFreezeHistory> TblWorkpreparationFreezeHistory { get; set; }
        public virtual DbSet<TblWorkPreparationPhase> TblWorkPreparationPhase { get; set; }
        public virtual DbSet<Touchscreen> Touchscreen { get; set; }
        public virtual DbSet<XpobjectType> XpobjectType { get; set; }

        // Unable to generate entity type for table 'dbo.tblBlindPointActivityDigitalSignature'. Please see the warning messages.
        // Unable to generate entity type for table 'dbo.tblMobileUserLogin'. Please see the warning messages.

        public rosercatalog_sandboxContext()
        {
            //rosercatalog_sandboxContext("Server = 192.168.1.108; Database = rosercatalog_sandbox; User Id = RoserConSysUsers; Password = tpdrt");
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer(@"Server=192.168.1.108;Database=rosercatalog_sandbox;User ID=RoserConSysUsers;Password=tpdrt;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ActivityLog>(entity =>
            {
                entity.HasKey(e => e.PkActivitylogid);

                entity.ToTable("ActivityLog", "isolation");

                entity.Property(e => e.PkActivitylogid).HasColumnName("pk_activitylogid");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasColumnName("action")
                    .HasMaxLength(250);

                entity.Property(e => e.Carduser)
                    .HasColumnName("carduser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkIsolationpointactivityid).HasColumnName("dk_isolationpointactivityid");

                entity.Property(e => e.DkUserid).HasColumnName("dk_userid");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(500);

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime");

                entity.Property(e => e.User)
                    .IsRequired()
                    .HasColumnName("user")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ApiClaims>(entity =>
            {
                entity.ToTable("ApiClaims", "identity");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.ApiResource)
                    .WithMany(p => p.ApiClaims)
                    .HasForeignKey(d => d.ApiResourceId);
            });

            modelBuilder.Entity<ApiResources>(entity =>
            {
                entity.ToTable("ApiResources", "identity");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DisplayName).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ApiScopeClaims>(entity =>
            {
                entity.ToTable("ApiScopeClaims", "identity");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.ApiScope)
                    .WithMany(p => p.ApiScopeClaims)
                    .HasForeignKey(d => d.ApiScopeId);
            });

            modelBuilder.Entity<ApiScopes>(entity =>
            {
                entity.ToTable("ApiScopes", "identity");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DisplayName).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.ApiResource)
                    .WithMany(p => p.ApiScopes)
                    .HasForeignKey(d => d.ApiResourceId);
            });

            modelBuilder.Entity<ApiSecrets>(entity =>
            {
                entity.ToTable("ApiSecrets", "identity");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.Type).HasMaxLength(250);

                entity.Property(e => e.Value).HasMaxLength(2000);

                entity.HasOne(d => d.ApiResource)
                    .WithMany(p => p.ApiSecrets)
                    .HasForeignKey(d => d.ApiResourceId);
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.PkCategoryid);

                entity.ToTable("Category", "risk");

                entity.Property(e => e.PkCategoryid).HasColumnName("pk_categoryid");

                entity.Property(e => e.Categoryname)
                    .IsRequired()
                    .HasColumnName("categoryname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ClientClaims>(entity =>
            {
                entity.ToTable("ClientClaims", "identity");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientClaims)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientCorsOrigins>(entity =>
            {
                entity.ToTable("ClientCorsOrigins", "identity");

                entity.Property(e => e.Origin)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientCorsOrigins)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientGrantTypes>(entity =>
            {
                entity.ToTable("ClientGrantTypes", "identity");

                entity.Property(e => e.GrantType)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientGrantTypes)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientIdPrestrictions>(entity =>
            {
                entity.ToTable("ClientIdPRestrictions", "identity");

                entity.Property(e => e.Provider)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientIdPrestrictions)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientPostLogoutRedirectUris>(entity =>
            {
                entity.ToTable("ClientPostLogoutRedirectUris", "identity");

                entity.Property(e => e.PostLogoutRedirectUri)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientPostLogoutRedirectUris)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientProperties>(entity =>
            {
                entity.ToTable("ClientProperties", "identity");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientProperties)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientRedirectUris>(entity =>
            {
                entity.ToTable("ClientRedirectUris", "identity");

                entity.Property(e => e.RedirectUri)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientRedirectUris)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<Clients>(entity =>
            {
                entity.ToTable("Clients", "identity");

                entity.Property(e => e.BackChannelLogoutUri).HasMaxLength(2000);

                entity.Property(e => e.ClientClaimsPrefix).HasMaxLength(200);

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientName).HasMaxLength(200);

                entity.Property(e => e.ClientUri).HasMaxLength(2000);

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.FrontChannelLogoutUri).HasMaxLength(2000);

                entity.Property(e => e.LogoUri).HasMaxLength(2000);

                entity.Property(e => e.PairWiseSubjectSalt).HasMaxLength(200);

                entity.Property(e => e.ProtocolType)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ClientScopes>(entity =>
            {
                entity.ToTable("ClientScopes", "identity");

                entity.Property(e => e.Scope)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientScopes)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<ClientSecrets>(entity =>
            {
                entity.ToTable("ClientSecrets", "identity");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Type).HasMaxLength(250);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientSecrets)
                    .HasForeignKey(d => d.ClientId);
            });

            modelBuilder.Entity<Effect>(entity =>
            {
                entity.HasKey(e => e.PkEffectid);

                entity.ToTable("Effect", "risk");

                entity.Property(e => e.PkEffectid).HasColumnName("pk_effectid");

                entity.Property(e => e.Effectdescription)
                    .IsRequired()
                    .HasColumnName("effectdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.FkCategoryid).HasColumnName("fk_categoryid");

                entity.HasOne(d => d.FkCategory)
                    .WithMany(p => p.Effect)
                    .HasForeignKey(d => d.FkCategoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Effect_Category");
            });

            modelBuilder.Entity<IdentityClaims>(entity =>
            {
                entity.ToTable("IdentityClaims", "identity");

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.IdentityResource)
                    .WithMany(p => p.IdentityClaims)
                    .HasForeignKey(d => d.IdentityResourceId);
            });

            modelBuilder.Entity<IdentityResources>(entity =>
            {
                entity.ToTable("IdentityResources", "identity");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.DisplayName).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Matrix>(entity =>
            {
                entity.HasKey(e => e.PkMatrixid);

                entity.ToTable("Matrix", "risk");

                entity.Property(e => e.PkMatrixid).HasColumnName("pk_matrixid");

                entity.Property(e => e.FkMaxriskvalue).HasColumnName("fk_maxriskvalue");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Isinverted).HasColumnName("isinverted");

                entity.Property(e => e.Matrixname)
                    .IsRequired()
                    .HasColumnName("matrixname")
                    .HasMaxLength(50);

                entity.Property(e => e.Usevalues).HasColumnName("usevalues");

                entity.Property(e => e.Width).HasColumnName("width");

                entity.HasOne(d => d.FkMaxriskvalueNavigation)
                    .WithMany(p => p.Matrix)
                    .HasForeignKey(d => d.FkMaxriskvalue)
                    .HasConstraintName("FK_Risk_Matrix_fk_maxriskvalue_Risk_MatrixValue");
            });

            modelBuilder.Entity<MatrixAssessment>(entity =>
            {
                entity.HasKey(e => e.PkMatrixassessmentid);

                entity.ToTable("MatrixAssessment", "risk");

                entity.Property(e => e.PkMatrixassessmentid).HasColumnName("pk_matrixassessmentid");

                entity.Property(e => e.Approveusername)
                    .HasColumnName("approveusername")
                    .HasMaxLength(50);

                entity.Property(e => e.Approveusertimestamp)
                    .HasColumnName("approveusertimestamp")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkMatrixId).HasColumnName("fk_matrixId");

                entity.Property(e => e.Managementnotes).HasColumnName("managementnotes");

                entity.Property(e => e.Remarksrequestor).HasColumnName("remarksrequestor");

                entity.Property(e => e.Usemaxriskvalue).HasColumnName("usemaxriskvalue");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnName("username")
                    .HasMaxLength(50);

                entity.Property(e => e.Usertimestamp)
                    .HasColumnName("usertimestamp")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkMatrix)
                    .WithMany(p => p.MatrixAssessment)
                    .HasForeignKey(d => d.FkMatrixId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixAssessment_Matrix");
            });

            modelBuilder.Entity<MatrixEffect>(entity =>
            {
                entity.HasKey(e => e.PkMatrixeffectid);

                entity.ToTable("MatrixEffect", "risk");

                entity.Property(e => e.PkMatrixeffectid).HasColumnName("pk_matrixeffectid");

                entity.Property(e => e.FkEffectid).HasColumnName("fk_effectid");

                entity.Property(e => e.FkMatrixid).HasColumnName("fk_matrixid");

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkEffect)
                    .WithMany(p => p.MatrixEffect)
                    .HasForeignKey(d => d.FkEffectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixEffect_Effect");

                entity.HasOne(d => d.FkMatrix)
                    .WithMany(p => p.MatrixEffect)
                    .HasForeignKey(d => d.FkMatrixid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixEffect_Matrix");
            });

            modelBuilder.Entity<MatrixProbability>(entity =>
            {
                entity.HasKey(e => e.PkMatrixprobabilityid);

                entity.ToTable("MatrixProbability", "risk");

                entity.Property(e => e.PkMatrixprobabilityid).HasColumnName("pk_matrixprobabilityid");

                entity.Property(e => e.FkMatrixid).HasColumnName("fk_matrixid");

                entity.Property(e => e.FkProbabilityid).HasColumnName("fk_probabilityid");

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkMatrix)
                    .WithMany(p => p.MatrixProbability)
                    .HasForeignKey(d => d.FkMatrixid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixProbability_Matrix");

                entity.HasOne(d => d.FkProbability)
                    .WithMany(p => p.MatrixProbability)
                    .HasForeignKey(d => d.FkProbabilityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixProbability_Probability");
            });

            modelBuilder.Entity<MatrixResult>(entity =>
            {
                entity.HasKey(e => e.PkMatrixresultid);

                entity.ToTable("MatrixResult", "risk");

                entity.Property(e => e.PkMatrixresultid).HasColumnName("pk_matrixresultid");

                entity.Property(e => e.FkCategoryid).HasColumnName("fk_categoryid");

                entity.Property(e => e.FkMatrixassessmentid).HasColumnName("fk_matrixassessmentid");

                entity.Property(e => e.FkMatrixvalueid).HasColumnName("fk_matrixvalueid");

                entity.Property(e => e.Matrixresulttype).HasColumnName("matrixresulttype");

                entity.HasOne(d => d.FkCategory)
                    .WithMany(p => p.MatrixResult)
                    .HasForeignKey(d => d.FkCategoryid)
                    .HasConstraintName("FK_MatrixResult_Category");

                entity.HasOne(d => d.FkMatrixassessment)
                    .WithMany(p => p.MatrixResult)
                    .HasForeignKey(d => d.FkMatrixassessmentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixResult_MatrixAssessment");

                entity.HasOne(d => d.FkMatrixvalue)
                    .WithMany(p => p.MatrixResult)
                    .HasForeignKey(d => d.FkMatrixvalueid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixResult_MatrixValue");
            });

            modelBuilder.Entity<MatrixValue>(entity =>
            {
                entity.HasKey(e => e.PkMatrixvalueid);

                entity.ToTable("MatrixValue", "risk");

                entity.Property(e => e.PkMatrixvalueid).HasColumnName("pk_matrixvalueid");

                entity.Property(e => e.Backcolor).HasColumnName("backcolor");

                entity.Property(e => e.FkMatrixid).HasColumnName("fk_matrixid");

                entity.Property(e => e.FkProbabilityid).HasColumnName("fk_probabilityid");

                entity.Property(e => e.Resultvalue)
                    .IsRequired()
                    .HasColumnName("resultvalue")
                    .HasMaxLength(10);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkMatrix)
                    .WithMany(p => p.MatrixValue)
                    .HasForeignKey(d => d.FkMatrixid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixValue_Matrix");

                entity.HasOne(d => d.FkProbability)
                    .WithMany(p => p.MatrixValue)
                    .HasForeignKey(d => d.FkProbabilityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixValue_Probability");
            });

            modelBuilder.Entity<MatrixValueEffect>(entity =>
            {
                entity.HasKey(e => e.PkMatrixvalueeffectid);

                entity.ToTable("MatrixValueEffect", "risk");

                entity.Property(e => e.PkMatrixvalueeffectid).HasColumnName("pk_matrixvalueeffectid");

                entity.Property(e => e.FkEffectid).HasColumnName("fk_effectid");

                entity.Property(e => e.FkMatrixvalueid).HasColumnName("fk_matrixvalueid");

                entity.HasOne(d => d.FkEffect)
                    .WithMany(p => p.MatrixValueEffect)
                    .HasForeignKey(d => d.FkEffectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixValueEffect_Effect");

                entity.HasOne(d => d.FkMatrixvalue)
                    .WithMany(p => p.MatrixValueEffect)
                    .HasForeignKey(d => d.FkMatrixvalueid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MatrixValueEffect_MatrixValue");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasKey(e => e.PkMessageid);

                entity.ToTable("Message", "notification");

                entity.Property(e => e.PkMessageid).HasColumnName("pk_messageid");

                entity.Property(e => e.Body)
                    .IsRequired()
                    .HasColumnName("body")
                    .HasMaxLength(250);

                entity.Property(e => e.Header)
                    .IsRequired()
                    .HasColumnName("header")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<NotificationMessage>(entity =>
            {
                entity.HasKey(e => e.PkNotificationmessageid);

                entity.ToTable("NotificationMessage", "notification");

                entity.Property(e => e.PkNotificationmessageid).HasColumnName("pk_notificationmessageid");

                entity.Property(e => e.FkMessageid).HasColumnName("fk_messageid");

                entity.Property(e => e.Retrycount).HasColumnName("retrycount");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.FkMessage)
                    .WithMany(p => p.NotificationMessage)
                    .HasForeignKey(d => d.FkMessageid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NotificationMessage_Message");
            });

            modelBuilder.Entity<PersistedGrants>(entity =>
            {
                entity.HasKey(e => e.Key);

                entity.ToTable("PersistedGrants", "identity");

                entity.Property(e => e.Key)
                    .HasMaxLength(200)
                    .ValueGeneratedNever();

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Data).IsRequired();

                entity.Property(e => e.SubjectId).HasMaxLength(200);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Probability>(entity =>
            {
                entity.HasKey(e => e.PkProbabilityid);

                entity.ToTable("Probability", "risk");

                entity.Property(e => e.PkProbabilityid).HasColumnName("pk_probabilityid");

                entity.Property(e => e.Probabilitydescription)
                    .IsRequired()
                    .HasColumnName("probabilitydescription")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<Recipient>(entity =>
            {
                entity.HasKey(e => e.PkRecipientid);

                entity.ToTable("Recipient", "notification");

                entity.Property(e => e.PkRecipientid).HasColumnName("pk_recipientid");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasColumnName("address")
                    .HasMaxLength(250);

                entity.Property(e => e.FkNotificationmessageid).HasColumnName("fk_notificationmessageid");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(250);

                entity.Property(e => e.Recipienttype).HasColumnName("recipienttype");

                entity.HasOne(d => d.FkNotificationmessage)
                    .WithMany(p => p.Recipient)
                    .HasForeignKey(d => d.FkNotificationmessageid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recipient_NotificationMessage");
            });

            modelBuilder.Entity<TblAction>(entity =>
            {
                entity.HasKey(e => e.PkActionid);

                entity.ToTable("tblAction");

                entity.HasIndex(e => e.FkActionbyuserid);

                entity.HasIndex(e => e.FkActionholderuserid);

                entity.HasIndex(e => e.FkMeetingid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkActionid).HasColumnName("pk_actionid");

                entity.Property(e => e.Actiondescription)
                    .IsRequired()
                    .HasColumnName("actiondescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Actionduedate)
                    .HasColumnName("actionduedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Actionreadydate)
                    .HasColumnName("actionreadydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActionbyuserid).HasColumnName("fk_actionbyuserid");

                entity.Property(e => e.FkActionholderuserid).HasColumnName("fk_actionholderuserid");

                entity.Property(e => e.FkMeetingid).HasColumnName("fk_meetingid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Meetingdate)
                    .HasColumnName("meetingdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActionbyuser)
                    .WithMany(p => p.TblActionFkActionbyuser)
                    .HasForeignKey(d => d.FkActionbyuserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAction_tblUser");

                entity.HasOne(d => d.FkActionholderuser)
                    .WithMany(p => p.TblActionFkActionholderuser)
                    .HasForeignKey(d => d.FkActionholderuserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAction_tblUser1");

                entity.HasOne(d => d.FkMeeting)
                    .WithMany(p => p.TblAction)
                    .HasForeignKey(d => d.FkMeetingid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAction_tblMeeting");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblAction)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAction_tblScope");
            });

            modelBuilder.Entity<TblActionCategory>(entity =>
            {
                entity.HasKey(e => e.PkActioncategoryid);

                entity.ToTable("tblActionCategory");

                entity.HasIndex(e => e.Actioncategorycode)
                    .HasName("UK_tblChangeRequestActionCategory")
                    .IsUnique();

                entity.Property(e => e.PkActioncategoryid).HasColumnName("pk_actioncategoryid");

                entity.Property(e => e.Actioncategorycode)
                    .IsRequired()
                    .HasColumnName("actioncategorycode")
                    .HasMaxLength(10);

                entity.Property(e => e.Actioncategorydescription)
                    .IsRequired()
                    .HasColumnName("actioncategorydescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblActionTemplate>(entity =>
            {
                entity.HasKey(e => e.PkActiontemplateid);

                entity.ToTable("tblActionTemplate");

                entity.HasIndex(e => e.FkActioncategoryid);

                entity.HasIndex(e => e.FkActiontemplatelistid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkActiontemplateid).HasColumnName("pk_actiontemplateid");

                entity.Property(e => e.Actiontemplatedescription)
                    .IsRequired()
                    .HasColumnName("actiontemplatedescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Actiontemplatememo).HasColumnName("actiontemplatememo");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActioncategoryid).HasColumnName("fk_actioncategoryid");

                entity.Property(e => e.FkActiontemplatelistid).HasColumnName("fk_actiontemplatelistid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActioncategory)
                    .WithMany(p => p.TblActionTemplate)
                    .HasForeignKey(d => d.FkActioncategoryid)
                    .HasConstraintName("FK_tblActionTemplate_tblActionCategory");

                entity.HasOne(d => d.FkActiontemplatelist)
                    .WithMany(p => p.TblActionTemplate)
                    .HasForeignKey(d => d.FkActiontemplatelistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblActionTemplate_tblActionTemplateList");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblActionTemplate)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .HasConstraintName("FK_tblActionTemplate_tblWorkflowState");
            });

            modelBuilder.Entity<TblActionTemplateList>(entity =>
            {
                entity.HasKey(e => e.PkActiontemplatelistid);

                entity.ToTable("tblActionTemplateList");

                entity.HasIndex(e => e.Actiontemplatelistname)
                    .HasName("UK_tblChangeRequestActionTemplateList")
                    .IsUnique();

                entity.Property(e => e.PkActiontemplatelistid).HasColumnName("pk_actiontemplatelistid");

                entity.Property(e => e.Actiontemplatelistname)
                    .IsRequired()
                    .HasColumnName("actiontemplatelistname")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblActiveChangeRequest>(entity =>
            {
                entity.HasKey(e => e.PkActivechangerequestid);

                entity.ToTable("tblActiveChangeRequest");

                entity.HasIndex(e => e.FkChangerequestid);

                entity.Property(e => e.PkActivechangerequestid).HasColumnName("pk_activechangerequestid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblActiveChangeRequest)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .HasConstraintName("FK_tblActiveChangeRequest_tblChangeRequest");
            });

            modelBuilder.Entity<TblActivity>(entity =>
            {
                entity.HasKey(e => e.PkActivityid);

                entity.ToTable("tblActivity");

                entity.HasIndex(e => e.Description)
                    .HasName("IX_tblActivity")
                    .IsUnique();

                entity.Property(e => e.PkActivityid).HasColumnName("pk_activityid");

                entity.Property(e => e.Activitycode)
                    .IsRequired()
                    .HasColumnName("activitycode")
                    .HasMaxLength(5);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normpostype).HasColumnName("normpostype");
            });

            modelBuilder.Entity<TblActivityBlindtype>(entity =>
            {
                entity.HasKey(e => e.PkActivityblindtype);

                entity.ToTable("tblActivityBlindtype");

                entity.HasIndex(e => e.FkActivityid);

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.Property(e => e.PkActivityblindtype).HasColumnName("pk_activityblindtype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivityid).HasColumnName("fk_activityid");

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivity)
                    .WithMany(p => p.TblActivityBlindtype)
                    .HasForeignKey(d => d.FkActivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblActivityBlindtype_tblActivity");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblActivityBlindtype)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblActivityBlindtype_tblBlindType");
            });

            modelBuilder.Entity<TblApplication>(entity =>
            {
                entity.HasKey(e => e.PkApplicationid);

                entity.ToTable("tblApplication");

                entity.HasIndex(e => e.Enumvalue)
                    .HasName("UQ_tblApplication_enumvalue")
                    .IsUnique();

                entity.HasIndex(e => e.Name)
                    .HasName("UQ_tblApplication_name")
                    .IsUnique();

                entity.Property(e => e.PkApplicationid).HasColumnName("pk_applicationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Enumvalue).HasColumnName("enumvalue");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            });

            modelBuilder.Entity<TblApplicationRiskMatrix>(entity =>
            {
                entity.HasKey(e => e.PkApplicationriskmatrixid);

                entity.ToTable("tblApplicationRiskMatrix");

                entity.HasIndex(e => new { e.FkApplicationid, e.DkRiskmatrixid })
                    .HasName("UK_tblApplicationRiskMatrix")
                    .IsUnique();

                entity.Property(e => e.PkApplicationriskmatrixid).HasColumnName("pk_applicationriskmatrixid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkRiskmatrixid).HasColumnName("dk_riskmatrixid");

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblApplicationRiskMatrix)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblApplicationRiskMatrix_tblApplication");
            });

            modelBuilder.Entity<TblArchiveCode>(entity =>
            {
                entity.HasKey(e => e.PkArchivecodeid);

                entity.ToTable("tblArchiveCode");

                entity.HasIndex(e => e.Archivecodecode)
                    .HasName("UK_tblArchiveCode")
                    .IsUnique();

                entity.Property(e => e.PkArchivecodeid).HasColumnName("pk_archivecodeid");

                entity.Property(e => e.Archivecodecode)
                    .IsRequired()
                    .HasColumnName("archivecodecode")
                    .HasMaxLength(10);

                entity.Property(e => e.Archivecodedescription)
                    .IsRequired()
                    .HasColumnName("archivecodedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Archivecodeenum).HasColumnName("archivecodeenum");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblAreaCode>(entity =>
            {
                entity.HasKey(e => e.PkAreacodeid);

                entity.ToTable("tblAreaCode");

                entity.HasIndex(e => e.Areacodecode)
                    .HasName("UK_tblAreaCode")
                    .IsUnique();

                entity.Property(e => e.PkAreacodeid).HasColumnName("pk_areacodeid");

                entity.Property(e => e.Areacodecode)
                    .IsRequired()
                    .HasColumnName("areacodecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Areacodedescription)
                    .IsRequired()
                    .HasColumnName("areacodedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblAttachment>(entity =>
            {
                entity.HasKey(e => e.PkAttachmentid);

                entity.ToTable("tblAttachment");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkBasepermititempartid);

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkBlindpointid);

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkDocumentitemid);

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkLislid);

                entity.HasIndex(e => e.FkNderequestid);

                entity.HasIndex(e => e.FkPermitid);

                entity.HasIndex(e => e.FkPidrevisionid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkScopepunchlistid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => e.FkWelderqualificationid)
                    .HasName("IX_tblAttachment_fk_welderqualificationrecordid");

                entity.HasIndex(e => e.FkWeldprocedureid);

                entity.HasIndex(e => e.FkWeldprocedurequalificationrecordid);

                entity.HasIndex(e => e.FkWeldprocedurespecificationid);

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblAttachment_Scope_Modifydate");

                entity.Property(e => e.PkAttachmentid).HasColumnName("pk_attachmentid");

                entity.Property(e => e.Attachmenttype).HasColumnName("attachmenttype");

                entity.Property(e => e.Attachmenttypeid).HasColumnName("attachmenttypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500);

                entity.Property(e => e.Filepath)
                    .IsRequired()
                    .HasColumnName("filepath")
                    .HasMaxLength(750);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkBasepermititempartid).HasColumnName("fk_basepermititempartid");

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkDocumentitemid).HasColumnName("fk_documentitemid");

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkLislid).HasColumnName("fk_lislid");

                entity.Property(e => e.FkNderequestid).HasColumnName("fk_nderequestid");

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkScopepunchlistid).HasColumnName("fk_scopepunchlistid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.FkWelderqualificationid).HasColumnName("fk_welderqualificationid");

                entity.Property(e => e.FkWeldprocedureid).HasColumnName("fk_weldprocedureid");

                entity.Property(e => e.FkWeldprocedurequalificationrecordid).HasColumnName("fk_weldprocedurequalificationrecordid");

                entity.Property(e => e.FkWeldprocedurespecificationid).HasColumnName("fk_weldprocedurespecificationid");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Isweblink).HasColumnName("isweblink");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Thumbnail).HasColumnName("thumbnail");

                entity.Property(e => e.Thumbnaillastmodified)
                    .HasColumnName("thumbnaillastmodified")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .HasConstraintName("FK_tblAttachment_tblActiveChangeRequest");

                entity.HasOne(d => d.FkBasepermititempart)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkBasepermititempartid)
                    .HasConstraintName("FK_tblAttachment_tblBasePermitItemPart");

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .HasConstraintName("FK_tblAttachment_tblBlindList");

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .HasConstraintName("FK_tblAttachment_tblBlindPoint1");

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkCertificateid)
                    .HasConstraintName("FK_tblAttachment_tblCertificate");

                entity.HasOne(d => d.FkDocumentitem)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkDocumentitemid)
                    .HasConstraintName("FK_tblAttachment_tblDocumentItem");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAttachment_tblDocumentLabel");

                entity.HasOne(d => d.FkLisl)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkLislid)
                    .HasConstraintName("FK_tblAttachment_tblLISL");

                entity.HasOne(d => d.FkNderequest)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkNderequestid)
                    .HasConstraintName("FK_tblAttachment_tblNdeRequest");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkPermitid)
                    .HasConstraintName("FK_tblAttachment_tblPermit");

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .HasConstraintName("FK_tblAttachment_tblPidRevision");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .HasConstraintName("FK_tblAttachment_tblPlantData");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblAttachment_tblScope");

                entity.HasOne(d => d.FkScopepunchlist)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkScopepunchlistid)
                    .HasConstraintName("FK_tblAttachment_tblScopepunchlist");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .HasConstraintName("FK_tblAttachment_tblTemplateBlindPoint");

                entity.HasOne(d => d.FkWelderqualification)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkWelderqualificationid)
                    .HasConstraintName("FK_tblAttachment_tblWelderQualification");

                entity.HasOne(d => d.FkWeldprocedure)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkWeldprocedureid)
                    .HasConstraintName("FK_tblAttachment_tblWeldProcedure");

                entity.HasOne(d => d.FkWeldprocedurequalificationrecord)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkWeldprocedurequalificationrecordid)
                    .HasConstraintName("FK_tblAttachment_tblWeldProcedureQualificationRecord");

                entity.HasOne(d => d.FkWeldprocedurespecification)
                    .WithMany(p => p.TblAttachment)
                    .HasForeignKey(d => d.FkWeldprocedurespecificationid)
                    .HasConstraintName("FK_tblAttachment_tblWeldProcedureSpecification");
            });

            modelBuilder.Entity<TblAudit>(entity =>
            {
                entity.HasKey(e => e.PkAuditid);

                entity.ToTable("tblAudit");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.Property(e => e.PkAuditid).HasColumnName("pk_auditid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Versiondate)
                    .HasColumnName("versiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Versiondescription)
                    .HasColumnName("versiondescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Versionnumber).HasColumnName("versionnumber");

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblAudit)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblAudit_tblActiveChangeRequest");
            });

            modelBuilder.Entity<TblBaseMaterial>(entity =>
            {
                entity.HasKey(e => e.PkBasematerialid);

                entity.ToTable("tblBaseMaterial");

                entity.HasIndex(e => e.FkBasematerialgroupid);

                entity.Property(e => e.PkBasematerialid).HasColumnName("pk_basematerialid");

                entity.Property(e => e.Basematerialdescription)
                    .IsRequired()
                    .HasColumnName("basematerialdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasematerialgroupid).HasColumnName("fk_basematerialgroupid");

                entity.Property(e => e.Groupnumber)
                    .HasColumnName("groupnumber")
                    .HasMaxLength(25);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasematerialgroup)
                    .WithMany(p => p.TblBaseMaterial)
                    .HasForeignKey(d => d.FkBasematerialgroupid)
                    .HasConstraintName("FK_tblBaseMaterial_tblBaseMaterialGroup");
            });

            modelBuilder.Entity<TblBaseMaterialGroup>(entity =>
            {
                entity.HasKey(e => e.PkBasematerialgroupid);

                entity.ToTable("tblBaseMaterialGroup");

                entity.HasIndex(e => new { e.Basematerialgroupasmecode, e.Basematerialgroupenisocode, e.Basematerialgroupdescription })
                    .HasName("UK_tblBaseMaterialGroupCodesDescription")
                    .IsUnique();

                entity.Property(e => e.PkBasematerialgroupid).HasColumnName("pk_basematerialgroupid");

                entity.Property(e => e.Basematerialgroupasmecode)
                    .HasColumnName("basematerialgroupasmecode")
                    .HasMaxLength(25);

                entity.Property(e => e.Basematerialgroupdescription)
                    .IsRequired()
                    .HasColumnName("basematerialgroupdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Basematerialgroupenisocode)
                    .HasColumnName("basematerialgroupenisocode")
                    .HasMaxLength(25);

                entity.Property(e => e.Basematerialgrouptype).HasColumnName("basematerialgrouptype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBasePermit>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitid);

                entity.ToTable("tblBasePermit");

                entity.HasIndex(e => e.Basepermitname)
                    .HasName("UK_tblBasePermit_basepermitname")
                    .IsUnique();

                entity.HasIndex(e => e.FkWorkflowid);

                entity.HasIndex(e => new { e.Basepermitname, e.Inactivedate })
                    .HasName("UK_tblBasPermit_basepermitname_deletedate")
                    .IsUnique();

                entity.Property(e => e.PkBasepermitid).HasColumnName("pk_basepermitid");

                entity.Property(e => e.Attachmentprintername)
                    .HasColumnName("attachmentprintername")
                    .HasMaxLength(250);

                entity.Property(e => e.Basedocumentprintername)
                    .HasColumnName("basedocumentprintername")
                    .HasMaxLength(250);

                entity.Property(e => e.Basepermitfooterheight).HasColumnName("basepermitfooterheight");

                entity.Property(e => e.Basepermitheaderheight).HasColumnName("basepermitheaderheight");

                entity.Property(e => e.Basepermitname)
                    .IsRequired()
                    .HasColumnName("basepermitname")
                    .HasMaxLength(50);

                entity.Property(e => e.Basepermitprintername)
                    .HasColumnName("basepermitprintername")
                    .HasMaxLength(250);

                entity.Property(e => e.Basepermittype).HasColumnName("basepermittype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documenticon).HasColumnName("documenticon");

                entity.Property(e => e.FkWorkflowid).HasColumnName("fk_workflowid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Freezeuser)
                    .HasColumnName("freezeuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Inactivedate)
                    .HasColumnName("inactivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Indexlistpaperkind).HasColumnName("indexlistpaperkind");

                entity.Property(e => e.Indexlistprintername)
                    .HasColumnName("indexlistprintername")
                    .HasMaxLength(250);

                entity.Property(e => e.Issuecount).HasColumnName("issuecount");

                entity.Property(e => e.Landscape).HasColumnName("landscape");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Paperkind).HasColumnName("paperkind");

                entity.Property(e => e.Selectattachmentprinteronthefly).HasColumnName("selectattachmentprinteronthefly");

                entity.Property(e => e.Selectbasedocumentprinteronthefly).HasColumnName("selectbasedocumentprinteronthefly");

                entity.Property(e => e.Selectbasepermitprinteronthefly).HasColumnName("selectbasepermitprinteronthefly");

                entity.Property(e => e.Selectindexlistprinteronthefly).HasColumnName("selectindexlistprinteronthefly");

                entity.HasOne(d => d.FkWorkflow)
                    .WithMany(p => p.TblBasePermit)
                    .HasForeignKey(d => d.FkWorkflowid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermit_tblWorkflow");
            });

            modelBuilder.Entity<TblBasePermitAuthorization>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitauthorizationid);

                entity.ToTable("tblBasePermitAuthorization");

                entity.HasIndex(e => e.FkBasepermitid);

                entity.HasIndex(e => e.FkPermitfunctiongroupid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.HasIndex(e => new { e.FkWorkflowstateid, e.FkPermitfunctiongroupid, e.FkBasepermitid })
                    .HasName("UK_tblBasePermitAuthorization_fk_workflowstateid_fk_permitfunctiongroupid_fk_basepermitid")
                    .IsUnique();

                entity.Property(e => e.PkBasepermitauthorizationid).HasColumnName("pk_basepermitauthorizationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.FkPermitfunctiongroupid).HasColumnName("fk_permitfunctiongroupid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblBasePermitAuthorization)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitAuthorization_tblBasePermit");

                entity.HasOne(d => d.FkPermitfunctiongroup)
                    .WithMany(p => p.TblBasePermitAuthorization)
                    .HasForeignKey(d => d.FkPermitfunctiongroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitAuthorization_tblPermitFunctionGroup");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblBasePermitAuthorization)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitAuthorization_tblWorkflowState");
            });

            modelBuilder.Entity<TblBasePermitGroup>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitgroupid);

                entity.ToTable("tblBasePermitGroup");

                entity.HasIndex(e => e.FkBasepermitid);

                entity.Property(e => e.PkBasepermitgroupid).HasColumnName("pk_basepermitgroupid");

                entity.Property(e => e.Backcolor).HasColumnName("backcolor");

                entity.Property(e => e.Band).HasColumnName("band");

                entity.Property(e => e.Basepermitgroupname)
                    .IsRequired()
                    .HasColumnName("basepermitgroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Captionvisible).HasColumnName("captionvisible");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Groupbordervisible).HasColumnName("groupbordervisible");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblBasePermitGroup)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitGroup_tblBasePermit");
            });

            modelBuilder.Entity<TblBasePermitItem>(entity =>
            {
                entity.HasKey(e => e.PkBasepermititemid);

                entity.ToTable("tblBasePermitItem");

                entity.HasIndex(e => e.FkBasepermitgroupid);

                entity.Property(e => e.PkBasepermititemid).HasColumnName("pk_basepermititemid");

                entity.Property(e => e.Basepermititemname)
                    .IsRequired()
                    .HasColumnName("basepermititemname")
                    .HasMaxLength(250);

                entity.Property(e => e.Basepermititemtype).HasColumnName("basepermititemtype");

                entity.Property(e => e.Bordercolor).HasColumnName("bordercolor");

                entity.Property(e => e.Bordervisible).HasColumnName("bordervisible");

                entity.Property(e => e.Borderwidth).HasColumnName("borderwidth");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitgroupid).HasColumnName("fk_basepermitgroupid");

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkBasepermitgroup)
                    .WithMany(p => p.TblBasePermitItem)
                    .HasForeignKey(d => d.FkBasepermitgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItem_tblBasePermitGroup");
            });

            modelBuilder.Entity<TblBasePermitItemAuthorization>(entity =>
            {
                entity.HasKey(e => e.PkBasepermititemauthorizationid);

                entity.ToTable("tblBasePermitItemAuthorization");

                entity.HasIndex(e => e.FkBasepermitauthorizationid);

                entity.HasIndex(e => e.FkBasepermititemid);

                entity.HasIndex(e => new { e.FkBasepermitauthorizationid, e.FkBasepermititemid })
                    .HasName("UK_tblBasePermitItemAuthorization_fk_basepermitauthorizationid_fk_basepermititemid")
                    .IsUnique();

                entity.Property(e => e.PkBasepermititemauthorizationid).HasColumnName("pk_basepermititemauthorizationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitauthorizationid).HasColumnName("fk_basepermitauthorizationid");

                entity.Property(e => e.FkBasepermititemid).HasColumnName("fk_basepermititemid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermitauthorization)
                    .WithMany(p => p.TblBasePermitItemAuthorization)
                    .HasForeignKey(d => d.FkBasepermitauthorizationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemAuthorization_tblBasePermitAuthorization");

                entity.HasOne(d => d.FkBasepermititem)
                    .WithMany(p => p.TblBasePermitItemAuthorization)
                    .HasForeignKey(d => d.FkBasepermititemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemAuthorization_tblBasePermitItem");
            });

            modelBuilder.Entity<TblBasePermitItemPart>(entity =>
            {
                entity.HasKey(e => e.PkBasepermititempartid);

                entity.ToTable("tblBasePermitItemPart");

                entity.HasIndex(e => e.FkBasepermititemid);

                entity.Property(e => e.PkBasepermititempartid).HasColumnName("pk_basepermititempartid");

                entity.Property(e => e.Basepermititempartsubtype).HasColumnName("basepermititempartsubtype");

                entity.Property(e => e.Basepermititemparttype).HasColumnName("basepermititemparttype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkDatadrivenforeignkey).HasColumnName("dk_datadrivenforeignkey");

                entity.Property(e => e.FkBasepermititemid).HasColumnName("fk_basepermititemid");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Islinked).HasColumnName("islinked");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Signaturestamptype).HasColumnName("signaturestamptype");

                entity.Property(e => e.Stampandsignatureposition).HasColumnName("stampandsignatureposition");

                entity.Property(e => e.Textvalue)
                    .HasColumnName("textvalue")
                    .HasMaxLength(2000);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkBasepermititem)
                    .WithMany(p => p.TblBasePermitItemPart)
                    .HasForeignKey(d => d.FkBasepermititemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemPart_tblBasePermitItem");
            });

            modelBuilder.Entity<TblBasePermitItemPartDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkBasepermititempartdocumentlabelid);

                entity.ToTable("tblBasePermitItemPartDocumentLabel");

                entity.HasIndex(e => e.FkBasepermititempartid);

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => new { e.FkBasepermititempartid, e.FkDocumentlabelid })
                    .HasName("UK_tblBasePermitItemPartDocumentLabel_fk_basepermititempartid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkBasepermititempartdocumentlabelid).HasColumnName("pk_basepermititempartdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermititempartid).HasColumnName("fk_basepermititempartid");

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermititempart)
                    .WithMany(p => p.TblBasePermitItemPartDocumentLabel)
                    .HasForeignKey(d => d.FkBasepermititempartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemPartDocumentLabel_tblBasePermitItemPart");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblBasePermitItemPartDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemPartDocumentLabel_tblDocumentLabel");
            });

            modelBuilder.Entity<TblBasePermitItemPartPermitQuickFilter>(entity =>
            {
                entity.HasKey(e => e.PkBasepermititempartpermitquickfilter);

                entity.ToTable("tblBasePermitItemPartPermitQuickFilter");

                entity.HasIndex(e => e.FkBasepermititempartid);

                entity.HasIndex(e => e.FkPermitquickfilterid);

                entity.Property(e => e.PkBasepermititempartpermitquickfilter).HasColumnName("pk_basepermititempartpermitquickfilter");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermititempartid).HasColumnName("fk_basepermititempartid");

                entity.Property(e => e.FkPermitquickfilterid).HasColumnName("fk_permitquickfilterid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermititempart)
                    .WithMany(p => p.TblBasePermitItemPartPermitQuickFilter)
                    .HasForeignKey(d => d.FkBasepermititempartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemPartPermitQuickFilter_tblBasePermitItemPart");

                entity.HasOne(d => d.FkPermitquickfilter)
                    .WithMany(p => p.TblBasePermitItemPartPermitQuickFilter)
                    .HasForeignKey(d => d.FkPermitquickfilterid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitItemPartPermitQuickFilter_tblPermitQuickFilter");
            });

            modelBuilder.Entity<TblBasePermitMaintenanceStrategy>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitmaintenancestrategyid);

                entity.ToTable("tblBasePermitMaintenanceStrategy");

                entity.HasIndex(e => e.FkBasepermitid);

                entity.Property(e => e.PkBasepermitmaintenancestrategyid).HasColumnName("pk_basepermitmaintenancestrategyid");

                entity.Property(e => e.Basepermitmaintenancestrategyname)
                    .IsRequired()
                    .HasColumnName("basepermitmaintenancestrategyname")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Freezeuser)
                    .HasColumnName("freezeuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategy)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategy_tblBasePermit");
            });

            modelBuilder.Entity<TblBasePermitMaintenanceStrategyBasePermitItemPart>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitmaintenancestrategybasepermititempartid);

                entity.ToTable("tblBasePermitMaintenanceStrategyBasePermitItemPart");

                entity.HasIndex(e => e.FkBasepermititempartid);

                entity.HasIndex(e => e.FkBasepermitmaintenancestrategyid);

                entity.Property(e => e.PkBasepermitmaintenancestrategybasepermititempartid).HasColumnName("pk_basepermitmaintenancestrategybasepermititempartid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermititempartid).HasColumnName("fk_basepermititempartid");

                entity.Property(e => e.FkBasepermitmaintenancestrategyid).HasColumnName("fk_basepermitmaintenancestrategyid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.State).HasColumnName("state");

                entity.Property(e => e.Value).HasColumnName("value");

                entity.HasOne(d => d.FkBasepermititempart)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyBasePermitItemPart)
                    .HasForeignKey(d => d.FkBasepermititempartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyBasePermitItemPart_tblBasePermitItemPart");

                entity.HasOne(d => d.FkBasepermitmaintenancestrategy)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyBasePermitItemPart)
                    .HasForeignKey(d => d.FkBasepermitmaintenancestrategyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyBasePermitItemPart_tblBasePermitMaintenanceStrategy");
            });

            modelBuilder.Entity<TblBasePermitMaintenanceStrategyDetails>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitmaintenancestrategydetailsid);

                entity.ToTable("tblBasePermitMaintenanceStrategyDetails");

                entity.HasIndex(e => e.FkBasepermitmaintenancestrategyid);

                entity.HasIndex(e => e.FkCircumstanceid);

                entity.HasIndex(e => e.FkHazardid);

                entity.HasIndex(e => e.FkLibraryactivejobid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => e.FkUnitid);

                entity.HasIndex(e => new { e.FkBasepermitmaintenancestrategyid, e.FkLibraryactivejobid, e.FkResourceid, e.FkCircumstanceid, e.FkShortcodeid, e.FkMainphaseid, e.FkSubphaseid, e.FkHazardid, e.FkUnitid })
                    .HasName("UK_tblBasePermitMaintenanceStrategyDetails")
                    .IsUnique();

                entity.Property(e => e.PkBasepermitmaintenancestrategydetailsid).HasColumnName("pk_basepermitmaintenancestrategydetailsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitmaintenancestrategyid).HasColumnName("fk_basepermitmaintenancestrategyid");

                entity.Property(e => e.FkCircumstanceid).HasColumnName("fk_circumstanceid");

                entity.Property(e => e.FkHazardid).HasColumnName("fk_hazardid");

                entity.Property(e => e.FkLibraryactivejobid).HasColumnName("fk_libraryactivejobid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkUnitid).HasColumnName("fk_unitid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermitmaintenancestrategy)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkBasepermitmaintenancestrategyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblBasePermitMaintenanceStrategy");

                entity.HasOne(d => d.FkCircumstance)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkCircumstanceid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblCircumstance");

                entity.HasOne(d => d.FkHazard)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkHazardid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblHazard");

                entity.HasOne(d => d.FkLibraryactivejob)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkLibraryactivejobid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblLibraryActiveJob");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblMainPhase");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkResourceid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblResource");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblShortcode");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblSubPhase");

                entity.HasOne(d => d.FkUnit)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyDetails)
                    .HasForeignKey(d => d.FkUnitid)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyDetails_tblUnit");
            });

            modelBuilder.Entity<TblBasePermitMaintenanceStrategyKeyword>(entity =>
            {
                entity.HasKey(e => e.PkBasepermitmaintenancestrategykeywordid);

                entity.ToTable("tblBasePermitMaintenanceStrategyKeyword");

                entity.HasIndex(e => e.FkBasepermitmaintenancestrategyid);

                entity.Property(e => e.PkBasepermitmaintenancestrategykeywordid).HasColumnName("pk_basepermitmaintenancestrategykeywordid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitmaintenancestrategyid).HasColumnName("fk_basepermitmaintenancestrategyid");

                entity.Property(e => e.Keyword)
                    .IsRequired()
                    .HasColumnName("keyword")
                    .HasMaxLength(250);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermitmaintenancestrategy)
                    .WithMany(p => p.TblBasePermitMaintenanceStrategyKeyword)
                    .HasForeignKey(d => d.FkBasepermitmaintenancestrategyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitMaintenanceStrategyKeyword_tblBasePermitMaintenanceStrategy");
            });

            modelBuilder.Entity<TblBasePermitTrigger>(entity =>
            {
                entity.HasKey(e => e.PkBasepermittriggerid);

                entity.ToTable("tblBasePermitTrigger");

                entity.HasIndex(e => e.FkBasepermitid);

                entity.Property(e => e.PkBasepermittriggerid).HasColumnName("pk_basepermittriggerid");

                entity.Property(e => e.Basepermittriggername)
                    .IsRequired()
                    .HasColumnName("basepermittriggername")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblBasePermitTrigger)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitTrigger_tblBasePermit");
            });

            modelBuilder.Entity<TblBasePermitTriggerBasePermitItemPart>(entity =>
            {
                entity.HasKey(e => e.PkBasepermittriggerbasepermititempartid);

                entity.ToTable("tblBasePermitTriggerBasePermitItemPart");

                entity.HasIndex(e => e.FkBasepermititempartid);

                entity.HasIndex(e => e.FkBasepermittriggerid);

                entity.Property(e => e.PkBasepermittriggerbasepermititempartid).HasColumnName("pk_basepermittriggerbasepermititempartid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermititempartid).HasColumnName("fk_basepermititempartid");

                entity.Property(e => e.FkBasepermittriggerid).HasColumnName("fk_basepermittriggerid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermititempart)
                    .WithMany(p => p.TblBasePermitTriggerBasePermitItemPart)
                    .HasForeignKey(d => d.FkBasepermititempartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitTriggerBasePermitItemPart_tblBasePermitItemPart");

                entity.HasOne(d => d.FkBasepermittrigger)
                    .WithMany(p => p.TblBasePermitTriggerBasePermitItemPart)
                    .HasForeignKey(d => d.FkBasepermittriggerid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitTriggerBasePermitItemPart_tblBasePermitTrigger");
            });

            modelBuilder.Entity<TblBasePermitTriggered>(entity =>
            {
                entity.HasKey(e => e.PkBasepermittriggeredid);

                entity.ToTable("tblBasePermitTriggered");

                entity.HasIndex(e => e.FkBasepermitid);

                entity.HasIndex(e => e.FkBasepermittriggerid);

                entity.Property(e => e.PkBasepermittriggeredid).HasColumnName("pk_basepermittriggeredid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.FkBasepermittriggerid).HasColumnName("fk_basepermittriggerid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblBasePermitTriggered)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitTriggered_tblBasePermit");

                entity.HasOne(d => d.FkBasepermittrigger)
                    .WithMany(p => p.TblBasePermitTriggered)
                    .HasForeignKey(d => d.FkBasepermittriggerid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasePermitTriggered_tblBasePermitTrigger");
            });

            modelBuilder.Entity<TblBaseReport>(entity =>
            {
                entity.HasKey(e => e.PkBasereportid);

                entity.ToTable("tblBaseReport");

                entity.HasIndex(e => e.Basereportname)
                    .HasName("UK_tblBaseReport_basereportname")
                    .IsUnique();

                entity.HasIndex(e => new { e.Basereportname, e.Deleteddate })
                    .HasName("UK_tblBaseReport_basereportname_deletedate")
                    .IsUnique();

                entity.Property(e => e.PkBasereportid).HasColumnName("pk_basereportid");

                entity.Property(e => e.Basereportname)
                    .IsRequired()
                    .HasColumnName("basereportname")
                    .HasMaxLength(50);

                entity.Property(e => e.Bottommargin).HasColumnName("bottommargin");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Deleteddate)
                    .HasColumnName("deleteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reporttypename).HasColumnName("reporttypename");

                entity.Property(e => e.Topmargin).HasColumnName("topmargin");
            });

            modelBuilder.Entity<TblBaseReportGroup>(entity =>
            {
                entity.HasKey(e => e.PkBasereportgroupid);

                entity.ToTable("tblBaseReportGroup");

                entity.HasIndex(e => e.FkBasereportid);

                entity.Property(e => e.PkBasereportgroupid).HasColumnName("pk_basereportgroupid");

                entity.Property(e => e.Backcolor).HasColumnName("backcolor");

                entity.Property(e => e.Basereportgroupname)
                    .IsRequired()
                    .HasColumnName("basereportgroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportid).HasColumnName("fk_basereportid");

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkBasereport)
                    .WithMany(p => p.TblBaseReportGroup)
                    .HasForeignKey(d => d.FkBasereportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBaseReportGroup_tblBaseReport");
            });

            modelBuilder.Entity<TblBaseReportItem>(entity =>
            {
                entity.HasKey(e => e.PkBasereportitemid);

                entity.ToTable("tblBaseReportItem");

                entity.HasIndex(e => e.FkBasereportgroupid);

                entity.Property(e => e.PkBasereportitemid).HasColumnName("pk_basereportitemid");

                entity.Property(e => e.Basereportgroupitemtype).HasColumnName("basereportgroupitemtype");

                entity.Property(e => e.Basereportitemname)
                    .IsRequired()
                    .HasColumnName("basereportitemname")
                    .HasMaxLength(50);

                entity.Property(e => e.Basereportitemtype).HasColumnName("basereportitemtype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportgroupid).HasColumnName("fk_basereportgroupid");

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkBasereportgroup)
                    .WithMany(p => p.TblBaseReportItem)
                    .HasForeignKey(d => d.FkBasereportgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBaseReportItem_tblBaseReportGroup");
            });

            modelBuilder.Entity<TblBaseReportItemPart>(entity =>
            {
                entity.HasKey(e => e.PkBasereportitempartid);

                entity.ToTable("tblBaseReportItemPart");

                entity.HasIndex(e => e.FkBasereportitemid);

                entity.Property(e => e.PkBasereportitempartid).HasColumnName("pk_basereportitempartid");

                entity.Property(e => e.Basereportitemparttype).HasColumnName("basereportitemparttype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Datafield)
                    .HasColumnName("datafield")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportitemid).HasColumnName("fk_basereportitemid");

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Orientation).HasColumnName("orientation");

                entity.Property(e => e.Textvalue)
                    .HasColumnName("textvalue")
                    .HasMaxLength(150);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkBasereportitem)
                    .WithMany(p => p.TblBaseReportItemPart)
                    .HasForeignKey(d => d.FkBasereportitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBaseReportItemPart_tblBaseReportItem");
            });

            modelBuilder.Entity<TblBasicListSignbox>(entity =>
            {
                entity.HasKey(e => e.PkBasiclistsignboxid);

                entity.ToTable("tblBasicListSignbox");

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkBasiclistsignboxid).HasColumnName("pk_basiclistsignboxid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(100);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblBasicListSignbox)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBasicListSignbox_tblProject");
            });

            modelBuilder.Entity<TblBlindList>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistid);

                entity.ToTable("tblBlindList");

                entity.HasIndex(e => e.FkBlindlisttypeid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkLabelsid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.Name, e.FkProjectid })
                    .HasName("UQ_UniqueNamePerProject")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistid).HasColumnName("pk_blindlistid");

                entity.Property(e => e.Approvedby)
                    .HasColumnName("approvedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Approveddate)
                    .HasColumnName("approveddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(500);

                entity.Property(e => e.FkBlindlisttypeid).HasColumnName("fk_blindlisttypeid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkLabelsid).HasColumnName("fk_labelsid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Memo).HasColumnName("memo");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(250);

                entity.Property(e => e.Ordernumber)
                    .HasColumnName("ordernumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Reference)
                    .HasColumnName("reference")
                    .HasMaxLength(50);

                entity.Property(e => e.Releasedby)
                    .HasColumnName("releasedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Releaseddate)
                    .HasColumnName("releaseddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reviewedby)
                    .HasColumnName("reviewedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Revieweddate)
                    .HasColumnName("revieweddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Site)
                    .HasColumnName("site")
                    .HasMaxLength(100);

                entity.Property(e => e.Type)
                    .HasColumnName("type")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkBlindlisttype)
                    .WithMany(p => p.TblBlindList)
                    .HasForeignKey(d => d.FkBlindlisttypeid)
                    .HasConstraintName("FK_tblBlindList_tblBlindListType");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblBlindList)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblBlindList_tblContractor");

                entity.HasOne(d => d.FkLabels)
                    .WithMany(p => p.TblBlindList)
                    .HasForeignKey(d => d.FkLabelsid)
                    .HasConstraintName("FK_tblBlindList_tblLabels");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblBlindList)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .HasConstraintName("FK_tblBlindList_tblPlantData");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblBlindList)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblBlindList_tblProject");
            });

            modelBuilder.Entity<TblBlindListChecklist>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistchecklistid);

                entity.ToTable("tblBlindListChecklist");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkBlindlistid, e.FkChecklistid })
                    .HasName("UK_tblBlindListChecklist")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistchecklistid).HasColumnName("pk_blindlistchecklistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Neededdate)
                    .HasColumnName("neededdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindListChecklist)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListChecklist_tblBlindList");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblBlindListChecklist)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListChecklist_tblChecklist");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblBlindListChecklist)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblBlindListChecklist_tblUser");
            });

            modelBuilder.Entity<TblBlindListDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistdocumentlabelid);

                entity.ToTable("tblBlindListDocumentLabel");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => new { e.FkBlindlistid, e.FkDocumentlabelid })
                    .HasName("UK_tblBlindListDocumentLabel")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistdocumentlabelid).HasColumnName("pk_blindlistdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindListDocumentLabel)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListDocumentLabel_tblBlindList");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblBlindListDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListDocumentLabel_tblDocumentLabel");
            });

            modelBuilder.Entity<TblBlindListGraph>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistgraphid);

                entity.ToTable("tblBlindListGraph", "isolation");

                entity.Property(e => e.PkBlindlistgraphid).HasColumnName("pk_blindlistgraphid");

                entity.Property(e => e.DkBlindlistid).HasColumnName("dk_blindlistid");

                entity.Property(e => e.FkTemplateblindpointgraphid).HasColumnName("fk_templateblindpointgraphid");

                entity.HasOne(d => d.FkTemplateblindpointgraph)
                    .WithMany(p => p.TblBlindListGraph)
                    .HasForeignKey(d => d.FkTemplateblindpointgraphid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BlindListGraph_TemplateBlindPointGraph");
            });

            modelBuilder.Entity<TblBlindListLog>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistlogid);

                entity.ToTable("tblBlindListLog");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.Property(e => e.PkBlindlistlogid).HasColumnName("pk_blindlistlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction")
                    .HasMaxLength(1000);

                entity.Property(e => e.Logdate)
                    .HasColumnName("logdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Logtype).HasColumnName("logtype");

                entity.Property(e => e.Loguser)
                    .IsRequired()
                    .HasColumnName("loguser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindListLog)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .HasConstraintName("FK_tblBlindListLog_tblBlindList");
            });

            modelBuilder.Entity<TblBlindlistPidRevision>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistpidrevisionid);

                entity.ToTable("tblBlindlistPidRevision");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkPidrevisionid);

                entity.Property(e => e.PkBlindlistpidrevisionid).HasColumnName("pk_blindlistpidrevisionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindlistPidRevision)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindlistPid_tblBlindlist");

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblBlindlistPidRevision)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindlistPid_tblPidRevision");
            });

            modelBuilder.Entity<TblBlindListPidRevisionPageView>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistpidrevisionpageviewid);

                entity.ToTable("tblBlindListPidRevisionPageView");

                entity.HasIndex(e => e.FkBlindlistpidrevisionid);

                entity.HasIndex(e => new { e.FkBlindlistpidrevisionid, e.Pagenumber, e.Viewname })
                    .HasName("UC_tblBlindListPidRevisionPageView_fk_blindlistpidrevisionid_pagenumber_name")
                    .IsUnique();

                entity.HasIndex(e => new { e.Zoom, e.Xpos, e.Ypos, e.Width, e.Height, e.Resolutionwidth, e.Resolutionheight, e.FkBlindlistpidrevisionid, e.Pagenumber })
                    .HasName("IX_tblBlindListPidRevisionPageView_fk_blindlistpidrevisionid_pagenumber");

                entity.Property(e => e.PkBlindlistpidrevisionpageviewid).HasColumnName("pk_blindlistpidrevisionpageviewid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Currentviewheight).HasColumnName("currentviewheight");

                entity.Property(e => e.Currentviewwidth).HasColumnName("currentviewwidth");

                entity.Property(e => e.FkBlindlistpidrevisionid).HasColumnName("fk_blindlistpidrevisionid");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pagenumber).HasColumnName("pagenumber");

                entity.Property(e => e.Printview).HasColumnName("printview");

                entity.Property(e => e.Resolutionheight).HasColumnName("resolutionheight");

                entity.Property(e => e.Resolutionwidth).HasColumnName("resolutionwidth");

                entity.Property(e => e.Viewname)
                    .IsRequired()
                    .HasColumnName("viewname")
                    .HasMaxLength(100);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.Property(e => e.Zoom).HasColumnName("zoom");

                entity.HasOne(d => d.FkBlindlistpidrevision)
                    .WithMany(p => p.TblBlindListPidRevisionPageView)
                    .HasForeignKey(d => d.FkBlindlistpidrevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<TblBlindListReport>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistreportid);

                entity.ToTable("tblBlindListReport");

                entity.HasIndex(e => e.Blindlistreportdescription)
                    .HasName("UK_tblBlindListReportDescription")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistreportid).HasColumnName("pk_blindlistreportid");

                entity.Property(e => e.Automaticrowheight).HasColumnName("automaticrowheight");

                entity.Property(e => e.Blindlistreportdescription)
                    .IsRequired()
                    .HasColumnName("blindlistreportdescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Detailfontsize).HasColumnName("detailfontsize");

                entity.Property(e => e.Detailrowheight).HasColumnName("detailrowheight");

                entity.Property(e => e.Infocolorleadingscope).HasColumnName("infocolorleadingscope");

                entity.Property(e => e.Infocolornonleadingscope).HasColumnName("infocolornonleadingscope");

                entity.Property(e => e.Infotextleadingscope)
                    .HasColumnName("infotextleadingscope")
                    .HasMaxLength(100);

                entity.Property(e => e.Infotextnonleadingscope)
                    .HasColumnName("infotextnonleadingscope")
                    .HasMaxLength(100);

                entity.Property(e => e.Landscape).HasColumnName("landscape");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Paperkind).HasColumnName("paperkind");

                entity.Property(e => e.Showgroupingcolor).HasColumnName("showgroupingcolor");

                entity.Property(e => e.Showsignature).HasColumnName("showsignature");

                entity.Property(e => e.Signaturetext)
                    .HasColumnName("signaturetext")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<TblBlindListReportColumn>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistreportcolumnid);

                entity.ToTable("tblBlindListReportColumn");

                entity.HasIndex(e => e.FkBlindlistreportid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.Property(e => e.PkBlindlistreportcolumnid).HasColumnName("pk_blindlistreportcolumnid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistreportid).HasColumnName("fk_blindlistreportid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.Headerdescription)
                    .IsRequired()
                    .HasColumnName("headerdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Highlightleftborder).HasColumnName("highlightleftborder");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ordernr).HasColumnName("ordernr");

                entity.Property(e => e.Width)
                    .HasColumnName("width")
                    .HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.FkBlindlistreport)
                    .WithMany(p => p.TblBlindListReportColumn)
                    .HasForeignKey(d => d.FkBlindlistreportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListReportColumn_tblBlindListReport");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblBlindListReportColumn)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .HasConstraintName("FK_tblBlindListReportColumn_tblMainPhase");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblBlindListReportColumn)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .HasConstraintName("FK_tblBlindListReportColumn_tblSubDiscipline");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblBlindListReportColumn)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .HasConstraintName("FK_tblBlindListReportColumn_tblSubPhase");
            });

            modelBuilder.Entity<TblBlindListReportColumnField>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistreportfieldid);

                entity.ToTable("tblBlindListReportColumnField");

                entity.HasIndex(e => e.FkBlindlistreportcolumnid);

                entity.Property(e => e.PkBlindlistreportfieldid).HasColumnName("pk_blindlistreportfieldid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Enumvalue).HasColumnName("enumvalue");

                entity.Property(e => e.FkBlindlistreportcolumnid).HasColumnName("fk_blindlistreportcolumnid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ordernr).HasColumnName("ordernr");

                entity.HasOne(d => d.FkBlindlistreportcolumn)
                    .WithMany(p => p.TblBlindListReportColumnField)
                    .HasForeignKey(d => d.FkBlindlistreportcolumnid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListReportColumnField_tblBlindListReportColumn");
            });

            modelBuilder.Entity<TblBlindlistReportHeaderColumn>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistreportheadercolumnid);

                entity.ToTable("tblBlindlistReportHeaderColumn");

                entity.HasIndex(e => e.Fieldname)
                    .HasName("IX_tblBlindlistReportHeaderColumn_fieldname")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistreportheadercolumnid).HasColumnName("pk_blindlistreportheadercolumnid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fieldname)
                    .IsRequired()
                    .HasColumnName("fieldname")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ordernr).HasColumnName("ordernr");
            });

            modelBuilder.Entity<TblBlindListRevision>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistrevisionid);

                entity.ToTable("tblBlindListRevision");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkRevisionid);

                entity.HasIndex(e => new { e.FkBlindlistid, e.FkRevisionid })
                    .HasName("UK_tblBlindListRevision")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistrevisionid).HasColumnName("pk_blindlistrevisionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkRevisionid).HasColumnName("fk_revisionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindListRevision)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListRevision_tblBlindList");

                entity.HasOne(d => d.FkRevision)
                    .WithMany(p => p.TblBlindListRevision)
                    .HasForeignKey(d => d.FkRevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListRevision_tblRevision");
            });

            modelBuilder.Entity<TblBlindListScope>(entity =>
            {
                entity.HasKey(e => e.PkBlindlistscopeid);

                entity.ToTable("tblBlindListScope");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkBlindlistid, e.FkScopeid })
                    .HasName("UQ_tblBlindListScope")
                    .IsUnique();

                entity.Property(e => e.PkBlindlistscopeid).HasColumnName("pk_blindlistscopeid");

                entity.Property(e => e.Createcomputer)
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Isleadingscope).HasColumnName("isleadingscope");

                entity.Property(e => e.Modifycomputer)
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindListScope)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListScope_tblBlindList");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblBlindListScope)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNlindlistScope_tblScope");
            });

            modelBuilder.Entity<TblBlindListType>(entity =>
            {
                entity.HasKey(e => e.PkBlindlisttypeid);

                entity.ToTable("tblBlindListType");

                entity.HasIndex(e => e.Blindlisttypecode)
                    .HasName("UK_tblBlindListType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Blindlisttypedescription)
                    .HasName("UK_tblBlindListType_description")
                    .IsUnique();

                entity.Property(e => e.PkBlindlisttypeid).HasColumnName("pk_blindlisttypeid");

                entity.Property(e => e.Blindlisttypecode)
                    .IsRequired()
                    .HasColumnName("blindlisttypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Blindlisttypedescription)
                    .IsRequired()
                    .HasColumnName("blindlisttypedescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Printname)
                    .IsRequired()
                    .HasColumnName("printname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBlindListTypeBlindTypeQcType>(entity =>
            {
                entity.HasKey(e => e.PkBlindlisttypeblindtypeqctypeid);

                entity.ToTable("tblBlindListTypeBlindTypeQcType");

                entity.HasIndex(e => e.FkBlindlisttypeid);

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.Property(e => e.PkBlindlisttypeblindtypeqctypeid).HasColumnName("pk_blindlisttypeblindtypeqctypeid");

                entity.Property(e => e.Activityqctype).HasColumnName("activityqctype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlisttypeid).HasColumnName("fk_blindlisttypeid");

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlisttype)
                    .WithMany(p => p.TblBlindListTypeBlindTypeQcType)
                    .HasForeignKey(d => d.FkBlindlisttypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListTypeBlindTypeQcType_tblBlindListType");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblBlindListTypeBlindTypeQcType)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindListTypeBlindTypeQcType_tblBlindType");
            });

            modelBuilder.Entity<TblBlindPoint>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointid);

                entity.ToTable("tblBlindPoint");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.HasIndex(e => e.FkBoltingid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => e.FkTestsystemid);

                entity.HasIndex(e => new { e.FkBlindlistid, e.FkTemplateblindpointid })
                    .HasName("UK_tblBlindPoint_blindlist_templateblindpoint")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointid).HasColumnName("pk_blindpointid");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Approvedby)
                    .HasColumnName("approvedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Approveddate)
                    .HasColumnName("approveddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Blindpointdescription)
                    .HasColumnName("blindpointdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.FkBoltingid).HasColumnName("fk_boltingid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.FkTestsystemid).HasColumnName("fk_testsystemid");

                entity.Property(e => e.Hazards)
                    .HasColumnName("hazards")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Refbox).HasColumnName("refbox");

                entity.Property(e => e.Refid)
                    .HasColumnName("refid")
                    .HasMaxLength(10);

                entity.Property(e => e.Reviewedby)
                    .HasColumnName("reviewedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Revieweddate)
                    .HasColumnName("revieweddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Safetymemo)
                    .HasColumnName("safetymemo")
                    .HasMaxLength(500);

                entity.Property(e => e.Seqno).HasColumnName("seqno");

                entity.Property(e => e.Wpmemo)
                    .HasColumnName("wpmemo")
                    .HasMaxLength(500);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindPoint)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPoint_tblBlindList");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblBlindPoint)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .HasConstraintName("FK_tblBlindPoint_tblBlindType");

                entity.HasOne(d => d.FkBolting)
                    .WithMany(p => p.TblBlindPoint)
                    .HasForeignKey(d => d.FkBoltingid)
                    .HasConstraintName("FK_tblBlindPoint_tblBolting");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblBlindPoint)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPoint_tblTemplateBlindPoint");

                entity.HasOne(d => d.FkTestsystem)
                    .WithMany(p => p.TblBlindPoint)
                    .HasForeignKey(d => d.FkTestsystemid)
                    .HasConstraintName("FK_tblBlindPoint_tblTestSystem");
            });

            modelBuilder.Entity<TblBlindPointActivity>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointactivityid);

                entity.ToTable("tblBlindPointActivity");

                entity.HasIndex(e => e.FkActivityid);

                entity.HasIndex(e => e.FkBlindpointid);

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.HasIndex(e => e.FkBolttypeid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkGaskettypeid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkBlindpointid, e.FkMainphaseid, e.FkSubphaseid, e.Grouping })
                    .HasName("IX_tblBlindPointActivity")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointactivityid).HasColumnName("pk_blindpointactivityid");

                entity.Property(e => e.Actionby).HasColumnName("actionby");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Finalqcbybarcode).HasColumnName("finalqcbybarcode");

                entity.Property(e => e.Finalqcdate)
                    .HasColumnName("finalqcdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Finalqcuser)
                    .HasColumnName("finalqcuser")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FkActivityid).HasColumnName("fk_activityid");

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.FkBolttypeid).HasColumnName("fk_bolttypeid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkGaskettypeid).HasColumnName("fk_gaskettypeid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Grouping)
                    .HasColumnName("grouping")
                    .HasMaxLength(10);

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Needsfinalqc).HasColumnName("needsfinalqc");

                entity.Property(e => e.Needspostqc).HasColumnName("needspostqc");

                entity.Property(e => e.Needspreqc).HasColumnName("needspreqc");

                entity.Property(e => e.Needsvisualqc).HasColumnName("needsvisualqc");

                entity.Property(e => e.Notapplicabledate)
                    .HasColumnName("notapplicabledate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Notapplicablereason)
                    .HasColumnName("notapplicablereason")
                    .HasMaxLength(500);

                entity.Property(e => e.Notapplicableuser)
                    .HasColumnName("notapplicableuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Postqcbybarcode).HasColumnName("postqcbybarcode");

                entity.Property(e => e.Postqcdate)
                    .HasColumnName("postqcdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Postqcuser)
                    .HasColumnName("postqcuser")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Preqcbybarcode).HasColumnName("preqcbybarcode");

                entity.Property(e => e.Preqcdate)
                    .HasColumnName("preqcdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Preqcuser)
                    .HasColumnName("preqcuser")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Readybybarcode).HasColumnName("readybybarcode");

                entity.Property(e => e.Readydate)
                    .HasColumnName("readydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Readytype).HasColumnName("readytype");

                entity.Property(e => e.Readyuser)
                    .HasColumnName("readyuser")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Releasebybarcode).HasColumnName("releasebybarcode");

                entity.Property(e => e.Releasedate)
                    .HasColumnName("releasedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Releaseuser)
                    .HasColumnName("releaseuser")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Seqno).HasColumnName("seqno");

                entity.Property(e => e.Startwork)
                    .HasColumnName("startwork")
                    .HasColumnType("datetime");

                entity.Property(e => e.Startworkuser)
                    .HasColumnName("startworkuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Visualqcbybarcode).HasColumnName("visualqcbybarcode");

                entity.Property(e => e.Visualqcdate)
                    .HasColumnName("visualqcdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Visualqcuser)
                    .HasColumnName("visualqcuser")
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkActivity)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkActivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivity_tblActivity");

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPhase_tblBlindPoint1");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblBlindType");

                entity.HasOne(d => d.FkBolttype)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkBolttypeid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblBoltType");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblContractor");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblDn");

                entity.HasOne(d => d.FkGaskettype)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkGaskettypeid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblGasketType");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblLbs");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivity_tblMainPhase");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblPn");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivity_tblSubPhase");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblBlindpointActivity_tblThickness");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblBlindPointActivity)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblBlindPointActivity_tblUser");
            });

            modelBuilder.Entity<TblBlindPointActivityChecklist>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointactivitychecklistid);

                entity.ToTable("tblBlindPointActivityChecklist");

                entity.HasIndex(e => e.FkBlindpointactivityid);

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkBlindpointactivityid, e.FkChecklistid, e.Activityqctype })
                    .HasName("UK_tblBlindPointActivityChecklist")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointactivitychecklistid).HasColumnName("pk_blindpointactivitychecklistid");

                entity.Property(e => e.Activityqctype).HasColumnName("activityqctype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointactivityid).HasColumnName("fk_blindpointactivityid");

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Neededdate)
                    .HasColumnName("neededdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkBlindpointactivity)
                    .WithMany(p => p.TblBlindPointActivityChecklist)
                    .HasForeignKey(d => d.FkBlindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityChecklist_tblBlindPointActivity");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblBlindPointActivityChecklist)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityChecklist_tblChecklist");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblBlindPointActivityChecklist)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblBlindPointActivityChecklist_tblUser");
            });

            modelBuilder.Entity<TblBlindPointActivityCircumstance>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointactivitycircumstanceid);

                entity.ToTable("tblBlindPointActivityCircumstance");

                entity.HasIndex(e => e.FkBlindpointactivityid);

                entity.HasIndex(e => e.FkCircumstanceid);

                entity.HasIndex(e => new { e.FkBlindpointactivityid, e.FkCircumstanceid })
                    .HasName("UK_tblBlindPointActivityCircumstance_fk_blindpointactivityid_fk_circumstanceid")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointactivitycircumstanceid).HasColumnName("pk_blindpointactivitycircumstanceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointactivityid).HasColumnName("fk_blindpointactivityid");

                entity.Property(e => e.FkCircumstanceid).HasColumnName("fk_circumstanceid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindpointactivity)
                    .WithMany(p => p.TblBlindPointActivityCircumstance)
                    .HasForeignKey(d => d.FkBlindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityCircumstance_tblBlindPointActivity");

                entity.HasOne(d => d.FkCircumstance)
                    .WithMany(p => p.TblBlindPointActivityCircumstance)
                    .HasForeignKey(d => d.FkCircumstanceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityCircumstance_tblCircumstance");
            });

            modelBuilder.Entity<TblBlindPointActivityLabel>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointactivitylabelid);

                entity.ToTable("tblBlindPointActivityLabel");

                entity.HasIndex(e => e.FkBasereportid);

                entity.HasIndex(e => e.FkBlindpointactivityid);

                entity.HasIndex(e => new { e.FkBlindpointactivityid, e.FkBasereportid })
                    .HasName("UK_tblBlindPointActivityLabel")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointactivitylabelid).HasColumnName("pk_blindpointactivitylabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportid).HasColumnName("fk_basereportid");

                entity.Property(e => e.FkBlindpointactivityid).HasColumnName("fk_blindpointactivityid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasereport)
                    .WithMany(p => p.TblBlindPointActivityLabel)
                    .HasForeignKey(d => d.FkBasereportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityLabel_tblBaseReport");

                entity.HasOne(d => d.FkBlindpointactivity)
                    .WithMany(p => p.TblBlindPointActivityLabel)
                    .HasForeignKey(d => d.FkBlindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityLabel_tblBlindpointActivity");
            });

            modelBuilder.Entity<TblBlindPointActivityLabelLog>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointlabellogid);

                entity.ToTable("tblBlindPointActivityLabelLog");

                entity.HasIndex(e => new { e.FkBlindpointactivitylabelid, e.FkBlindpointactivityid })
                    .HasName("UK_tblBlindPointActivityLabelLog")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointlabellogid).HasColumnName("pk_blindpointlabellogid");

                entity.Property(e => e.Activityid).HasColumnName("activityid");

                entity.Property(e => e.Basereportid).HasColumnName("basereportid");

                entity.Property(e => e.Blindlistid).HasColumnName("blindlistid");

                entity.Property(e => e.Blindpointid).HasColumnName("blindpointid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointactivityid).HasColumnName("fk_blindpointactivityid");

                entity.Property(e => e.FkBlindpointactivitylabelid).HasColumnName("fk_blindpointactivitylabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Placed).HasColumnName("placed");

                entity.Property(e => e.Placedby)
                    .HasColumnName("placedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Placeddate)
                    .HasColumnName("placeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Printby)
                    .HasColumnName("printby")
                    .HasMaxLength(50);

                entity.Property(e => e.Printdate)
                    .HasColumnName("printdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Printed).HasColumnName("printed");
            });

            modelBuilder.Entity<TblBlindPointActivityMaterial>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointactivitymaterialid);

                entity.ToTable("tblBlindPointActivityMaterial");

                entity.HasIndex(e => e.FkBlindpointactivityid);

                entity.HasIndex(e => e.FkMaterialid);

                entity.HasIndex(e => e.FkScopejobdetailresourcematerialid);

                entity.Property(e => e.PkBlindpointactivitymaterialid).HasColumnName("pk_blindpointactivitymaterialid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointactivityid).HasColumnName("fk_blindpointactivityid");

                entity.Property(e => e.FkMaterialid).HasColumnName("fk_materialid");

                entity.Property(e => e.FkScopejobdetailresourcematerialid).HasColumnName("fk_scopejobdetailresourcematerialid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindpointactivity)
                    .WithMany(p => p.TblBlindPointActivityMaterial)
                    .HasForeignKey(d => d.FkBlindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointActivityMaterials_tblBlindPointActivity");

                entity.HasOne(d => d.FkMaterial)
                    .WithMany(p => p.TblBlindPointActivityMaterial)
                    .HasForeignKey(d => d.FkMaterialid)
                    .HasConstraintName("FK_tblBlindPointActivityMaterial_tblMaterial");

                entity.HasOne(d => d.FkScopejobdetailresourcematerial)
                    .WithMany(p => p.TblBlindPointActivityMaterial)
                    .HasForeignKey(d => d.FkScopejobdetailresourcematerialid)
                    .HasConstraintName("FK_tblBlindPointActivityMaterial_tblScopeJobDetailResourceMaterial");
            });

            modelBuilder.Entity<TblBlindPointActivityPdaLog>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointactivitypdalogid);

                entity.ToTable("tblBlindPointActivityPdaLog");

                entity.Property(e => e.PkBlindpointactivitypdalogid).HasColumnName("pk_blindpointactivitypdalogid");

                entity.Property(e => e.ActivityId).HasColumnName("activityId");

                entity.Property(e => e.Changedate)
                    .HasColumnName("changedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changeuser)
                    .IsRequired()
                    .HasColumnName("changeuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Device)
                    .IsRequired()
                    .HasColumnName("device")
                    .HasMaxLength(100);

                entity.Property(e => e.DockingStation)
                    .HasColumnName("dockingStation")
                    .HasMaxLength(150);

                entity.Property(e => e.Exceptioninnermessage).HasColumnName("exceptioninnermessage");

                entity.Property(e => e.Exceptioninnerstacktrace).HasColumnName("exceptioninnerstacktrace");

                entity.Property(e => e.Exceptionmessage).HasColumnName("exceptionmessage");

                entity.Property(e => e.Exceptionstacktrace).HasColumnName("exceptionstacktrace");

                entity.Property(e => e.Failed).HasColumnName("failed");

                entity.Property(e => e.Failedreason).HasColumnName("failedreason");

                entity.Property(e => e.Logtype)
                    .IsRequired()
                    .HasColumnName("logtype")
                    .HasMaxLength(255);

                entity.Property(e => e.Message).HasColumnName("message");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.TaskType)
                    .HasColumnName("taskType")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<TblBlindPointChecklist>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointchecklistid);

                entity.ToTable("tblBlindPointChecklist");

                entity.HasIndex(e => e.FkBlindpointid);

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkBlindpointid, e.FkChecklistid })
                    .HasName("UK_tblBlindPointChecklist")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointchecklistid).HasColumnName("pk_blindpointchecklistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Neededdate)
                    .HasColumnName("neededdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblBlindPointChecklist)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointChecklist_tblBlindPoint");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblBlindPointChecklist)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointChecklist_tblChecklist");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblBlindPointChecklist)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblBlindPointChecklist_tblUser");
            });

            modelBuilder.Entity<TblBlindPointDisciplineConfirmation>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointdisciplineconfirmationid);

                entity.ToTable("tblBlindPointDisciplineConfirmation");

                entity.HasIndex(e => e.FkBlindpointid);

                entity.HasIndex(e => e.FkTemplateblindpointdisciplineid);

                entity.HasIndex(e => new { e.FkTemplateblindpointdisciplineid, e.FkBlindpointid })
                    .HasName("UK_tblBlindPointDisciplineConfirmation")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointdisciplineconfirmationid).HasColumnName("pk_blindpointdisciplineconfirmationid");

                entity.Property(e => e.Confirmationdate)
                    .HasColumnName("confirmationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Confirmationuser)
                    .IsRequired()
                    .HasColumnName("confirmationuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.FkTemplateblindpointdisciplineid).HasColumnName("fk_templateblindpointdisciplineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblBlindPointDisciplineConfirmation)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointDisciplineConfirmation_tblBlindPoint");

                entity.HasOne(d => d.FkTemplateblindpointdiscipline)
                    .WithMany(p => p.TblBlindPointDisciplineConfirmation)
                    .HasForeignKey(d => d.FkTemplateblindpointdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointDisciplineConfirmation_tblTemplateBlindPointDiscipline");
            });

            modelBuilder.Entity<TblBlindPointDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointdocumentlabelid);

                entity.ToTable("tblBlindPointDocumentLabel");

                entity.HasIndex(e => e.FkBlindpointid);

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => new { e.FkBlindpointid, e.FkDocumentlabelid })
                    .HasName("UK_tblBlindPointDocumentLabel_fk_blindpointid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointdocumentlabelid).HasColumnName("pk_blindpointdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblBlindPointDocumentLabel)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointDocumentLabel_tblBlindPoint");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblBlindPointDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointDocumentLabel_tblDocumentLabel");
            });

            modelBuilder.Entity<TblBlindPointHazard>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointhazardid);

                entity.ToTable("tblBlindPointHazard");

                entity.HasIndex(e => e.FkBlindpointid);

                entity.HasIndex(e => e.FkHazardid);

                entity.HasIndex(e => new { e.FkBlindpointid, e.FkHazardid })
                    .HasName("UK_tblBlindPointHazard")
                    .IsUnique();

                entity.Property(e => e.PkBlindpointhazardid).HasColumnName("pk_blindpointhazardid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.FkHazardid).HasColumnName("fk_hazardid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblBlindPointHazard)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointHazard_tblBlindPoint");

                entity.HasOne(d => d.FkHazard)
                    .WithMany(p => p.TblBlindPointHazard)
                    .HasForeignKey(d => d.FkHazardid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointHazard_tblHazard");
            });

            modelBuilder.Entity<TblBlindPointLog>(entity =>
            {
                entity.HasKey(e => e.PkBlindpointlogid);

                entity.ToTable("tblBlindPointLog");

                entity.HasIndex(e => e.FkBlindpointid);

                entity.Property(e => e.PkBlindpointlogid).HasColumnName("pk_blindpointlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointid).HasColumnName("fk_blindpointid");

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction")
                    .HasMaxLength(1000);

                entity.Property(e => e.Logdate)
                    .HasColumnName("logdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Logtype).HasColumnName("logtype");

                entity.Property(e => e.Loguser)
                    .HasColumnName("loguser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindpoint)
                    .WithMany(p => p.TblBlindPointLog)
                    .HasForeignKey(d => d.FkBlindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindPointLog_tblBlindpoint");
            });

            modelBuilder.Entity<TblBlindProjectMainPhaseSubPhaseReleaseFinish>(entity =>
            {
                entity.HasKey(e => e.PkBlindprojectmainphasesubphasereleasefinishid);

                entity.ToTable("tblBlindProjectMainPhaseSubPhaseReleaseFinish");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => new { e.FkBlindlistid, e.FkMainphaseid, e.FkSubphaseid })
                    .HasName("UK_tblBlindProjectMainPhaseSubPhaseReleaseFinish")
                    .IsUnique();

                entity.Property(e => e.PkBlindprojectmainphasesubphasereleasefinishid).HasColumnName("pk_blindprojectmainphasesubphasereleasefinishid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Finishedby)
                    .HasColumnName("finishedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Finisheddate)
                    .HasColumnName("finisheddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Releasedby)
                    .HasColumnName("releasedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Releaseddate)
                    .HasColumnName("releaseddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblBlindProjectMainPhaseSubPhaseReleaseFinish)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindProjectMainPhaseSubPhaseReleaseFinish_tblBlindList");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblBlindProjectMainPhaseSubPhaseReleaseFinish)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindProjectMainPhaseSubPhaseReleaseFinish_tblMainPhase");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblBlindProjectMainPhaseSubPhaseReleaseFinish)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblBlindProjectMainPhaseSubPhaseReleaseFinish_tblProject");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblBlindProjectMainPhaseSubPhaseReleaseFinish)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindProjectMainPhaseSubPhaseReleaseFinish_tblSubPhase");
            });

            modelBuilder.Entity<TblBlindType>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypeid);

                entity.ToTable("tblBlindType");

                entity.HasIndex(e => e.Blindtypecode)
                    .HasName("UK_tblBlindType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Blindtypedescription)
                    .HasName("UK_tblBlindType_description")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypeid).HasColumnName("pk_blindtypeid");

                entity.Property(e => e.Blindtypecode)
                    .IsRequired()
                    .HasColumnName("blindtypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Blindtypedescription)
                    .IsRequired()
                    .HasColumnName("blindtypedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindtypesymbolid).HasColumnName("fk_blindtypesymbolid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindtypesymbol)
                    .WithMany(p => p.TblBlindType)
                    .HasForeignKey(d => d.FkBlindtypesymbolid)
                    .HasConstraintName("FK_BlindType_BlindTypeSymbol");
            });

            modelBuilder.Entity<TblBlindTypeNormPos>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposid);

                entity.ToTable("tblBlindTypeNormPos");

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.HasIndex(e => new { e.FkBlindtypeid, e.Normpostype })
                    .HasName("UQ_tblBlindTypeNormPos")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposid).HasColumnName("pk_blindtypenormposid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normpostype).HasColumnName("normpostype");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblBlindTypeNormPos)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPos_tblBlindType");
            });

            modelBuilder.Entity<TblBlindTypeNormPosActivity>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposactivityid);

                entity.ToTable("tblBlindTypeNormPosActivity");

                entity.HasIndex(e => e.FkActivityid);

                entity.HasIndex(e => e.FkBlindtypenormposid);

                entity.HasIndex(e => new { e.FkBlindtypenormposid, e.FkActivityid })
                    .HasName("UK_tblBlindTypeNormPosActivity")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposactivityid).HasColumnName("pk_blindtypenormposactivityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivityid).HasColumnName("fk_activityid");

                entity.Property(e => e.FkBlindtypenormposid).HasColumnName("fk_blindtypenormposid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivity)
                    .WithMany(p => p.TblBlindTypeNormPosActivity)
                    .HasForeignKey(d => d.FkActivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivity_tblActivity");

                entity.HasOne(d => d.FkBlindtypenormpos)
                    .WithMany(p => p.TblBlindTypeNormPosActivity)
                    .HasForeignKey(d => d.FkBlindtypenormposid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivity_tblBlindTypeNormPos");
            });

            modelBuilder.Entity<TblBlindTypeNormPosActivityLabel>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposactivitylabelid);

                entity.ToTable("tblBlindTypeNormPosActivityLabel");

                entity.HasIndex(e => e.FkBasereportid);

                entity.HasIndex(e => e.FkBlindtypenormposactivityid);

                entity.HasIndex(e => new { e.FkBlindtypenormposactivityid, e.FkBasereportid })
                    .HasName("UK_tblBlindTypeNormPosActivityLabel")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposactivitylabelid).HasColumnName("pk_blindtypenormposactivitylabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportid).HasColumnName("fk_basereportid");

                entity.Property(e => e.FkBlindtypenormposactivityid).HasColumnName("fk_blindtypenormposactivityid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasereport)
                    .WithMany(p => p.TblBlindTypeNormPosActivityLabel)
                    .HasForeignKey(d => d.FkBasereportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityLabel_tblBaseReport");

                entity.HasOne(d => d.FkBlindtypenormposactivity)
                    .WithMany(p => p.TblBlindTypeNormPosActivityLabel)
                    .HasForeignKey(d => d.FkBlindtypenormposactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityLabel_tblBlindTypeNormPosActivity");
            });

            modelBuilder.Entity<TblBlindTypeNormPosActivityNormbase>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposactivitynormbaseid);

                entity.ToTable("tblBlindTypeNormPosActivityNormbase");

                entity.HasIndex(e => e.FkActivityid);

                entity.HasIndex(e => e.FkBlindtypenormposid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => new { e.FkBlindtypenormposid, e.FkActivityid, e.FkMainphaseid, e.FkSubphaseid })
                    .HasName("UK_tblBlindTypeNormPosActivityNormbase")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposactivitynormbaseid).HasColumnName("pk_blindtypenormposactivitynormbaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivityid).HasColumnName("fk_activityid");

                entity.Property(e => e.FkBlindtypenormposid).HasColumnName("fk_blindtypenormposid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivity)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbase)
                    .HasForeignKey(d => d.FkActivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbase_tblActivity");

                entity.HasOne(d => d.FkBlindtypenormpos)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbase)
                    .HasForeignKey(d => d.FkBlindtypenormposid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbase_tblBlindTypeNormPos");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbase)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbase_tblMainPhase");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbase)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbase_tblSubPhase");
            });

            modelBuilder.Entity<TblBlindTypeNormPosActivityNormbaseReference>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposactivitynormbasereferenceid);

                entity.ToTable("tblBlindTypeNormPosActivityNormbaseReference");

                entity.HasIndex(e => e.FkBlindtypenormposactivitynormbaseid);

                entity.HasIndex(e => e.FkCalcgroupmainid);

                entity.HasIndex(e => e.FkCalcgroupsubid);

                entity.HasIndex(e => new { e.FkBlindtypenormposactivitynormbaseid, e.FkCalcgroupmainid, e.FkCalcgroupsubid })
                    .HasName("UK_tblBlindTypeNormPosActivityNormbaseReference")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposactivitynormbasereferenceid).HasColumnName("pk_blindtypenormposactivitynormbasereferenceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindtypenormposactivitynormbaseid).HasColumnName("fk_blindtypenormposactivitynormbaseid");

                entity.Property(e => e.FkCalcgroupmainid).HasColumnName("fk_calcgroupmainid");

                entity.Property(e => e.FkCalcgroupsubid).HasColumnName("fk_calcgroupsubid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindtypenormposactivitynormbase)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbaseReference)
                    .HasForeignKey(d => d.FkBlindtypenormposactivitynormbaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbaseReference_tblBlindTypeNormPosActivityNormbase");

                entity.HasOne(d => d.FkCalcgroupmain)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbaseReference)
                    .HasForeignKey(d => d.FkCalcgroupmainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbaseReference_tblCalcGroupMain");

                entity.HasOne(d => d.FkCalcgroupsub)
                    .WithMany(p => p.TblBlindTypeNormPosActivityNormbaseReference)
                    .HasForeignKey(d => d.FkCalcgroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityNormbaseReference_tblCalcGroupSub");
            });

            modelBuilder.Entity<TblBlindTypeNormPosActivityTemplate>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposactivitytemplateid);

                entity.ToTable("tblBlindTypeNormPosActivityTemplate");

                entity.HasIndex(e => e.FkActivityid);

                entity.HasIndex(e => e.FkBlindtypenormposid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => new { e.FkBlindtypenormposid, e.Grouping, e.FkMainphaseid, e.FkSubphaseid })
                    .HasName("UK_tblBlindTypeNormPosActivityTemplate")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposactivitytemplateid).HasColumnName("pk_blindtypenormposactivitytemplateid");

                entity.Property(e => e.Actionby).HasColumnName("actionby");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivityid).HasColumnName("fk_activityid");

                entity.Property(e => e.FkBlindtypenormposid).HasColumnName("fk_blindtypenormposid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.Grouping)
                    .HasColumnName("grouping")
                    .HasMaxLength(10);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Seqno).HasColumnName("seqno");

                entity.HasOne(d => d.FkActivity)
                    .WithMany(p => p.TblBlindTypeNormPosActivityTemplate)
                    .HasForeignKey(d => d.FkActivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityTemplate_tblActivity");

                entity.HasOne(d => d.FkBlindtypenormpos)
                    .WithMany(p => p.TblBlindTypeNormPosActivityTemplate)
                    .HasForeignKey(d => d.FkBlindtypenormposid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityTemplate_tblBlindTypeNormPos");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblBlindTypeNormPosActivityTemplate)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityTemplate_tblMainPhase");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblBlindTypeNormPosActivityTemplate)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityTemplate_tblSubPhase");
            });

            modelBuilder.Entity<TblBlindTypeNormPosActivityTemplateMaterial>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypenormposactivitytemplatematerialid);

                entity.ToTable("tblBlindTypeNormPosActivityTemplateMaterial");

                entity.HasIndex(e => e.FkBlindtypenormposactivitytemplateid);

                entity.HasIndex(e => e.FkSubmaterialgroupid);

                entity.HasIndex(e => new { e.FkBlindtypenormposactivitytemplateid, e.FkSubmaterialgroupid })
                    .HasName("UK_tblBlindTypeNormPosActivityTemplateMaterial")
                    .IsUnique();

                entity.Property(e => e.PkBlindtypenormposactivitytemplatematerialid).HasColumnName("pk_blindtypenormposactivitytemplatematerialid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindtypenormposactivitytemplateid).HasColumnName("fk_blindtypenormposactivitytemplateid");

                entity.Property(e => e.FkSubmaterialgroupid).HasColumnName("fk_submaterialgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.HasOne(d => d.FkBlindtypenormposactivitytemplate)
                    .WithMany(p => p.TblBlindTypeNormPosActivityTemplateMaterial)
                    .HasForeignKey(d => d.FkBlindtypenormposactivitytemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityTemplateMaterial_tblBlindTypeNormposActivityTemplate");

                entity.HasOne(d => d.FkSubmaterialgroup)
                    .WithMany(p => p.TblBlindTypeNormPosActivityTemplateMaterial)
                    .HasForeignKey(d => d.FkSubmaterialgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBlindTypeNormPosActivityTemplateMaterial_tblSubMaterialGroup");
            });

            modelBuilder.Entity<TblBlindTypeSymbol>(entity =>
            {
                entity.HasKey(e => e.PkBlindtypesymbolid);

                entity.ToTable("tblBlindTypeSymbol");

                entity.Property(e => e.PkBlindtypesymbolid).HasColumnName("pk_blindtypesymbolid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasColumnName("image");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblBolting>(entity =>
            {
                entity.HasKey(e => e.PkBoltingid);

                entity.ToTable("tblBolting");

                entity.HasIndex(e => e.FkAdditionalboltdiameterdiaid);

                entity.HasIndex(e => e.FkAdditionalboltdiameterdnid);

                entity.HasIndex(e => e.FkAdditionalbolttypeid);

                entity.HasIndex(e => e.FkBoltBasematerialid);

                entity.HasIndex(e => e.FkBoltCertificateid);

                entity.HasIndex(e => e.FkBoltareaUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltdiameterdiaid);

                entity.HasIndex(e => e.FkBoltdiameterdnid);

                entity.HasIndex(e => e.FkBoltelongationUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltlgripUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltlimitsUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttensioncheckUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttensiontightenUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttorqmaxvalueUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttorqvalueUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttypeid);

                entity.HasIndex(e => e.FkBreaklooseUnitofmeasurementid);

                entity.HasIndex(e => e.FkCompressionidUnitofmeasurementid);

                entity.HasIndex(e => e.FkConnectionid);

                entity.HasIndex(e => e.FkCriticalityid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkFinalreqboltstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkFinalreqstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkFlangeBasematerialid);

                entity.HasIndex(e => e.FkFlangesubtypeid);

                entity.HasIndex(e => e.FkFlangetypeid);

                entity.HasIndex(e => e.FkFrictionid);

                entity.HasIndex(e => e.FkGasketBasematerialid);

                entity.HasIndex(e => e.FkGaskettypeid);

                entity.HasIndex(e => e.FkGriplengthUnitofmeasurementid);

                entity.HasIndex(e => e.FkJackpressureUnitofmeasurementid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkLubricantid);

                entity.HasIndex(e => e.FkMaxoffsetflangefacesid);

                entity.HasIndex(e => e.FkMaxtensioningpressUnitofmeasurementid);

                entity.HasIndex(e => e.FkNutBasematerialid);

                entity.HasIndex(e => e.FkPass1Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass2Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass3Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass4Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass5Unitofmeasurementid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkPumpsettingUnitofmeasurementid);

                entity.HasIndex(e => e.FkRelaxationfactorUnitofmeasurementid);

                entity.HasIndex(e => e.FkReqboltloadUnitofmeasurementid);

                entity.HasIndex(e => e.FkResidualboltstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkResidualbolttensionUnitofmeasurementid);

                entity.HasIndex(e => e.FkRingjointid);

                entity.HasIndex(e => e.FkSwUnitofmeasurementid);

                entity.HasIndex(e => e.FkTensioningvalueAUnitofmeasurementid);

                entity.HasIndex(e => e.FkTensioningvalueBUnitofmeasurementid);

                entity.HasIndex(e => e.FkThreadformid);

                entity.HasIndex(e => e.FkToolareaUnitofmeasurementid);

                entity.HasIndex(e => e.FkTorqtypeid);

                entity.HasIndex(e => e.FkWashersBasematerialid);

                entity.HasIndex(e => e.FkWashersthkUnitofmeasurementid);

                entity.HasIndex(e => e.FkWeldnormid);

                entity.HasIndex(e => e.FkYieldpointUnitofmeasurementid);

                entity.Property(e => e.PkBoltingid).HasColumnName("pk_boltingid");

                entity.Property(e => e.Additionalboltlengthinch)
                    .HasColumnName("additionalboltlengthinch")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Additionalboltlengthmm)
                    .HasColumnName("additionalboltlengthmm")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Additionalboltsqty).HasColumnName("additionalboltsqty");

                entity.Property(e => e.Boltarea)
                    .HasColumnName("boltarea")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltarticleno).HasColumnName("boltarticleno");

                entity.Property(e => e.Boltelongation)
                    .HasColumnName("boltelongation")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltelongationmethod)
                    .HasColumnName("boltelongationmethod")
                    .HasMaxLength(100);

                entity.Property(e => e.Boltlengthinch)
                    .HasColumnName("boltlengthinch")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltlengthmm)
                    .HasColumnName("boltlengthmm")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltlgrip)
                    .HasColumnName("boltlgrip")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltlimits)
                    .HasColumnName("boltlimits")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltqty).HasColumnName("boltqty");

                entity.Property(e => e.Boltstress).HasColumnName("boltstress");

                entity.Property(e => e.Bolttensioncheck).HasColumnName("bolttensioncheck");

                entity.Property(e => e.Bolttensiontighten).HasColumnName("bolttensiontighten");

                entity.Property(e => e.Bolttorqmaxvalue).HasColumnName("bolttorqmaxvalue");

                entity.Property(e => e.Bolttorqvalue)
                    .HasColumnName("bolttorqvalue")
                    .HasMaxLength(50);

                entity.Property(e => e.Breakloosepressure).HasColumnName("breakloosepressure");

                entity.Property(e => e.Compression).HasColumnName("compression");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Finalreqboltstress).HasColumnName("finalreqboltstress");

                entity.Property(e => e.Finalreqstress).HasColumnName("finalreqstress");

                entity.Property(e => e.FkAdditionalboltdiameterdiaid).HasColumnName("fk_additionalboltdiameterdiaid");

                entity.Property(e => e.FkAdditionalboltdiameterdnid).HasColumnName("fk_additionalboltdiameterdnid");

                entity.Property(e => e.FkAdditionalbolttypeid).HasColumnName("fk_additionalbolttypeid");

                entity.Property(e => e.FkBoltBasematerialid).HasColumnName("fk_bolt_basematerialid");

                entity.Property(e => e.FkBoltCertificateid).HasColumnName("fk_bolt_certificateid");

                entity.Property(e => e.FkBoltareaUnitofmeasurementid).HasColumnName("fk_boltarea_unitofmeasurementid");

                entity.Property(e => e.FkBoltdiameterdiaid).HasColumnName("fk_boltdiameterdiaid");

                entity.Property(e => e.FkBoltdiameterdnid).HasColumnName("fk_boltdiameterdnid");

                entity.Property(e => e.FkBoltelongationUnitofmeasurementid).HasColumnName("fk_boltelongation_unitofmeasurementid");

                entity.Property(e => e.FkBoltlgripUnitofmeasurementid).HasColumnName("fk_boltlgrip_unitofmeasurementid");

                entity.Property(e => e.FkBoltlimitsUnitofmeasurementid).HasColumnName("fk_boltlimits_unitofmeasurementid");

                entity.Property(e => e.FkBoltstressUnitofmeasurementid).HasColumnName("fk_boltstress_unitofmeasurementid");

                entity.Property(e => e.FkBolttensioncheckUnitofmeasurementid).HasColumnName("fk_bolttensioncheck_unitofmeasurementid");

                entity.Property(e => e.FkBolttensiontightenUnitofmeasurementid).HasColumnName("fk_bolttensiontighten_unitofmeasurementid");

                entity.Property(e => e.FkBolttorqmaxvalueUnitofmeasurementid).HasColumnName("fk_bolttorqmaxvalue_unitofmeasurementid");

                entity.Property(e => e.FkBolttorqvalueUnitofmeasurementid).HasColumnName("fk_bolttorqvalue_unitofmeasurementid");

                entity.Property(e => e.FkBolttypeid).HasColumnName("fk_bolttypeid");

                entity.Property(e => e.FkBreaklooseUnitofmeasurementid).HasColumnName("fk_breakloose_unitofmeasurementid");

                entity.Property(e => e.FkCompressionidUnitofmeasurementid).HasColumnName("fk_compressionid_unitofmeasurementid");

                entity.Property(e => e.FkConnectionid).HasColumnName("fk_connectionid");

                entity.Property(e => e.FkCriticalityid).HasColumnName("fk_criticalityid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkFinalreqboltstressUnitofmeasurementid).HasColumnName("fk_finalreqboltstress_unitofmeasurementid");

                entity.Property(e => e.FkFinalreqstressUnitofmeasurementid).HasColumnName("fk_finalreqstress_unitofmeasurementid");

                entity.Property(e => e.FkFlangeBasematerialid).HasColumnName("fk_flange_basematerialid");

                entity.Property(e => e.FkFlangesubtypeid).HasColumnName("fk_flangesubtypeid");

                entity.Property(e => e.FkFlangetypeid).HasColumnName("fk_flangetypeid");

                entity.Property(e => e.FkFrictionid).HasColumnName("fk_frictionid");

                entity.Property(e => e.FkGasketBasematerialid).HasColumnName("fk_gasket_basematerialid");

                entity.Property(e => e.FkGaskettypeid).HasColumnName("fk_gaskettypeid");

                entity.Property(e => e.FkGriplengthUnitofmeasurementid).HasColumnName("fk_griplength_unitofmeasurementid");

                entity.Property(e => e.FkJackpressureUnitofmeasurementid).HasColumnName("fk_jackpressure_unitofmeasurementid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkLubricantid).HasColumnName("fk_lubricantid");

                entity.Property(e => e.FkMaxoffsetflangefacesid).HasColumnName("fk_maxoffsetflangefacesid");

                entity.Property(e => e.FkMaxtensioningpressUnitofmeasurementid).HasColumnName("fk_maxtensioningpress_unitofmeasurementid");

                entity.Property(e => e.FkNutBasematerialid).HasColumnName("fk_nut_basematerialid");

                entity.Property(e => e.FkPass1Unitofmeasurementid).HasColumnName("fk_pass1_unitofmeasurementid");

                entity.Property(e => e.FkPass2Unitofmeasurementid).HasColumnName("fk_pass2_unitofmeasurementid");

                entity.Property(e => e.FkPass3Unitofmeasurementid).HasColumnName("fk_pass3_unitofmeasurementid");

                entity.Property(e => e.FkPass4Unitofmeasurementid).HasColumnName("fk_pass4_unitofmeasurementid");

                entity.Property(e => e.FkPass5Unitofmeasurementid).HasColumnName("fk_pass5_unitofmeasurementid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkPumpsettingUnitofmeasurementid).HasColumnName("fk_pumpsetting_unitofmeasurementid");

                entity.Property(e => e.FkRelaxationfactorUnitofmeasurementid).HasColumnName("fk_relaxationfactor_unitofmeasurementid");

                entity.Property(e => e.FkReqboltloadUnitofmeasurementid).HasColumnName("fk_reqboltload_unitofmeasurementid");

                entity.Property(e => e.FkResidualboltstressUnitofmeasurementid).HasColumnName("fk_residualboltstress_unitofmeasurementid");

                entity.Property(e => e.FkResidualbolttensionUnitofmeasurementid).HasColumnName("fk_residualbolttension_unitofmeasurementid");

                entity.Property(e => e.FkRingjointid).HasColumnName("fk_ringjointid");

                entity.Property(e => e.FkSwUnitofmeasurementid).HasColumnName("fk_sw_unitofmeasurementid");

                entity.Property(e => e.FkTensioningvalueAUnitofmeasurementid).HasColumnName("fk_tensioningvalue_a_unitofmeasurementid");

                entity.Property(e => e.FkTensioningvalueBUnitofmeasurementid).HasColumnName("fk_tensioningvalue_b_unitofmeasurementid");

                entity.Property(e => e.FkThreadformid).HasColumnName("fk_threadformid");

                entity.Property(e => e.FkToolareaUnitofmeasurementid).HasColumnName("fk_toolarea_unitofmeasurementid");

                entity.Property(e => e.FkTorqtypeid).HasColumnName("fk_torqtypeid");

                entity.Property(e => e.FkWashersBasematerialid).HasColumnName("fk_washers_basematerialid");

                entity.Property(e => e.FkWashersthkUnitofmeasurementid).HasColumnName("fk_washersthk_unitofmeasurementid");

                entity.Property(e => e.FkWeldnormid).HasColumnName("fk_weldnormid");

                entity.Property(e => e.FkYieldpointUnitofmeasurementid).HasColumnName("fk_yieldpoint_unitofmeasurementid");

                entity.Property(e => e.Gasketarticlenumer).HasColumnName("gasketarticlenumer");

                entity.Property(e => e.Gasketid)
                    .HasColumnName("gasketid")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Gasketod)
                    .HasColumnName("gasketod")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Gasketthk).HasColumnName("gasketthk");

                entity.Property(e => e.Griplength).HasColumnName("griplength");

                entity.Property(e => e.Jackpressuretouse).HasColumnName("jackpressuretouse");

                entity.Property(e => e.Linedflange)
                    .HasColumnName("linedflange")
                    .HasMaxLength(50);

                entity.Property(e => e.Liningtype)
                    .HasColumnName("liningtype")
                    .HasMaxLength(50);

                entity.Property(e => e.Maxtensioningpress).HasColumnName("maxtensioningpress");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Numberoftensionersrequired).HasColumnName("numberoftensionersrequired");

                entity.Property(e => e.Pass1).HasColumnName("pass1");

                entity.Property(e => e.Pass1percentage).HasColumnName("pass1percentage");

                entity.Property(e => e.Pass2).HasColumnName("pass2");

                entity.Property(e => e.Pass2percentage).HasColumnName("pass2percentage");

                entity.Property(e => e.Pass3).HasColumnName("pass3");

                entity.Property(e => e.Pass3percentage).HasColumnName("pass3percentage");

                entity.Property(e => e.Pass4).HasColumnName("pass4");

                entity.Property(e => e.Pass4percentage).HasColumnName("pass4percentage");

                entity.Property(e => e.Pass5).HasColumnName("pass5");

                entity.Property(e => e.Pass5percentage).HasColumnName("pass5percentage");

                entity.Property(e => e.Protectioncap)
                    .HasColumnName("protectioncap")
                    .HasMaxLength(100);

                entity.Property(e => e.Pumpsetting).HasColumnName("pumpsetting");

                entity.Property(e => e.Relaxationfactor).HasColumnName("relaxationfactor");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(250);

                entity.Property(e => e.Reqboltload).HasColumnName("reqboltload");

                entity.Property(e => e.Requiredboltloadvalue).HasColumnName("requiredboltloadvalue");

                entity.Property(e => e.Residualboltstress).HasColumnName("residualboltstress");

                entity.Property(e => e.Residualbolttension).HasColumnName("residualbolttension");

                entity.Property(e => e.Specialboltinfo)
                    .HasColumnName("specialboltinfo")
                    .HasMaxLength(100);

                entity.Property(e => e.Specialnote)
                    .HasColumnName("specialnote")
                    .HasMaxLength(200);

                entity.Property(e => e.Sw)
                    .HasColumnName("sw")
                    .HasMaxLength(50);

                entity.Property(e => e.Tensioningvaluea).HasColumnName("tensioningvaluea");

                entity.Property(e => e.Tensioningvalueb).HasColumnName("tensioningvalueb");

                entity.Property(e => e.Threadpitch)
                    .HasColumnName("threadpitch")
                    .HasMaxLength(50);

                entity.Property(e => e.Tightentorquedgreased).HasColumnName("tightentorquedgreased");

                entity.Property(e => e.Tightentorquedungreased).HasColumnName("tightentorquedungreased");

                entity.Property(e => e.Toolarea).HasColumnName("toolarea");

                entity.Property(e => e.Washersqty).HasColumnName("washersqty");

                entity.Property(e => e.Washersthk).HasColumnName("washersthk");

                entity.Property(e => e.Wrenchsizetype)
                    .HasColumnName("wrenchsizetype")
                    .HasMaxLength(50);

                entity.Property(e => e.Yieldpercentage).HasColumnName("yieldpercentage");

                entity.Property(e => e.Yieldpoint).HasColumnName("yieldpoint");

                entity.HasOne(d => d.FkAdditionalboltdiameterdia)
                    .WithMany(p => p.TblBoltingFkAdditionalboltdiameterdia)
                    .HasForeignKey(d => d.FkAdditionalboltdiameterdiaid)
                    .HasConstraintName("FK_tblBolting_tblboltdiameterAdditionalDia");

                entity.HasOne(d => d.FkAdditionalboltdiameterdn)
                    .WithMany(p => p.TblBoltingFkAdditionalboltdiameterdn)
                    .HasForeignKey(d => d.FkAdditionalboltdiameterdnid)
                    .HasConstraintName("FK_tblBolting_tblboltdiameterAdditionalDn");

                entity.HasOne(d => d.FkAdditionalbolttype)
                    .WithMany(p => p.TblBoltingFkAdditionalbolttype)
                    .HasForeignKey(d => d.FkAdditionalbolttypeid)
                    .HasConstraintName("FK_tblBolting_tblAdditionalBoltType");

                entity.HasOne(d => d.FkBoltBasematerial)
                    .WithMany(p => p.TblBoltingFkBoltBasematerial)
                    .HasForeignKey(d => d.FkBoltBasematerialid)
                    .HasConstraintName("FK_tblBolting_tblBaseMaterial3");

                entity.HasOne(d => d.FkBoltCertificate)
                    .WithMany(p => p.TblBoltingFkBoltCertificate)
                    .HasForeignKey(d => d.FkBoltCertificateid)
                    .HasConstraintName("FK_tblBolting_tblBaseMaterial4");

                entity.HasOne(d => d.FkBoltareaUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBoltareaUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltareaUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement2");

                entity.HasOne(d => d.FkBoltdiameterdia)
                    .WithMany(p => p.TblBoltingFkBoltdiameterdia)
                    .HasForeignKey(d => d.FkBoltdiameterdiaid)
                    .HasConstraintName("FK_tblBolting_tblboltdiameterDia");

                entity.HasOne(d => d.FkBoltdiameterdn)
                    .WithMany(p => p.TblBoltingFkBoltdiameterdn)
                    .HasForeignKey(d => d.FkBoltdiameterdnid)
                    .HasConstraintName("FK_tblBolting_tblboltdiameterDn");

                entity.HasOne(d => d.FkBoltelongationUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBoltelongationUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltelongationUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement6");

                entity.HasOne(d => d.FkBoltlgripUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBoltlgripUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltlgripUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement4");

                entity.HasOne(d => d.FkBoltlimitsUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBoltlimitsUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltlimitsUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement3");

                entity.HasOne(d => d.FkBoltstressUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBoltstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement31");

                entity.HasOne(d => d.FkBolttensioncheckUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBolttensioncheckUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttensioncheckUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement12");

                entity.HasOne(d => d.FkBolttensiontightenUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBolttensiontightenUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttensiontightenUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement11");

                entity.HasOne(d => d.FkBolttorqmaxvalueUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBolttorqmaxvalueUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttorqmaxvalueUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement32");

                entity.HasOne(d => d.FkBolttorqvalueUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBolttorqvalueUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttorqvalueUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement5");

                entity.HasOne(d => d.FkBolttype)
                    .WithMany(p => p.TblBoltingFkBolttype)
                    .HasForeignKey(d => d.FkBolttypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBolting_tblBoltType");

                entity.HasOne(d => d.FkBreaklooseUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkBreaklooseUnitofmeasurement)
                    .HasForeignKey(d => d.FkBreaklooseUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement10");

                entity.HasOne(d => d.FkCompressionidUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkCompressionidUnitofmeasurement)
                    .HasForeignKey(d => d.FkCompressionidUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement29");

                entity.HasOne(d => d.FkConnection)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkConnectionid)
                    .HasConstraintName("FK_tblBolting_tblConnection");

                entity.HasOne(d => d.FkCriticality)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkCriticalityid)
                    .HasConstraintName("FK_tblBolting_tblcriticality");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblBoltingFkDia)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblBolting_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblBoltingFkDn)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblBolting_tblDn");

                entity.HasOne(d => d.FkFinalreqboltstressUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkFinalreqboltstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkFinalreqboltstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement18");

                entity.HasOne(d => d.FkFinalreqstressUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkFinalreqstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkFinalreqstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement17");

                entity.HasOne(d => d.FkFlangeBasematerial)
                    .WithMany(p => p.TblBoltingFkFlangeBasematerial)
                    .HasForeignKey(d => d.FkFlangeBasematerialid)
                    .HasConstraintName("FK_tblBolting_tblBaseMaterial1");

                entity.HasOne(d => d.FkFlangesubtype)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkFlangesubtypeid)
                    .HasConstraintName("FK_tblBolting_tblFlangeSubType");

                entity.HasOne(d => d.FkFlangetype)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkFlangetypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBolting_tblFlangeType");

                entity.HasOne(d => d.FkFriction)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkFrictionid)
                    .HasConstraintName("FK_tblBolting_tblFriction");

                entity.HasOne(d => d.FkGasketBasematerial)
                    .WithMany(p => p.TblBoltingFkGasketBasematerial)
                    .HasForeignKey(d => d.FkGasketBasematerialid)
                    .HasConstraintName("FK_tblBolting_tblBaseMaterial2");

                entity.HasOne(d => d.FkGaskettype)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkGaskettypeid)
                    .HasConstraintName("FK_tblBolting_tblGasketType");

                entity.HasOne(d => d.FkGriplengthUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkGriplengthUnitofmeasurement)
                    .HasForeignKey(d => d.FkGriplengthUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement20");

                entity.HasOne(d => d.FkJackpressureUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkJackpressureUnitofmeasurement)
                    .HasForeignKey(d => d.FkJackpressureUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement7");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblBolting_tblLbs");

                entity.HasOne(d => d.FkLubricant)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkLubricantid)
                    .HasConstraintName("FK_tblBolting_tblLubricant");

                entity.HasOne(d => d.FkMaxoffsetflangefaces)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkMaxoffsetflangefacesid)
                    .HasConstraintName("FK_tblBolting_tblMaxOffsetFlangeFaces");

                entity.HasOne(d => d.FkMaxtensioningpressUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkMaxtensioningpressUnitofmeasurement)
                    .HasForeignKey(d => d.FkMaxtensioningpressUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement13");

                entity.HasOne(d => d.FkNutBasematerial)
                    .WithMany(p => p.TblBoltingFkNutBasematerial)
                    .HasForeignKey(d => d.FkNutBasematerialid)
                    .HasConstraintName("FK_tblBolting_tblBaseMaterial5");

                entity.HasOne(d => d.FkPass1Unitofmeasurement)
                    .WithMany(p => p.TblBoltingFkPass1Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass1Unitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement24");

                entity.HasOne(d => d.FkPass2Unitofmeasurement)
                    .WithMany(p => p.TblBoltingFkPass2Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass2Unitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement25");

                entity.HasOne(d => d.FkPass3Unitofmeasurement)
                    .WithMany(p => p.TblBoltingFkPass3Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass3Unitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement26");

                entity.HasOne(d => d.FkPass4Unitofmeasurement)
                    .WithMany(p => p.TblBoltingFkPass4Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass4Unitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement27");

                entity.HasOne(d => d.FkPass5Unitofmeasurement)
                    .WithMany(p => p.TblBoltingFkPass5Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass5Unitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement28");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblBolting_tblPn");

                entity.HasOne(d => d.FkPumpsettingUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkPumpsettingUnitofmeasurement)
                    .HasForeignKey(d => d.FkPumpsettingUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement23");

                entity.HasOne(d => d.FkRelaxationfactorUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkRelaxationfactorUnitofmeasurement)
                    .HasForeignKey(d => d.FkRelaxationfactorUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement16");

                entity.HasOne(d => d.FkReqboltloadUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkReqboltloadUnitofmeasurement)
                    .HasForeignKey(d => d.FkReqboltloadUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement19");

                entity.HasOne(d => d.FkResidualboltstressUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkResidualboltstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkResidualboltstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement14");

                entity.HasOne(d => d.FkResidualbolttensionUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkResidualbolttensionUnitofmeasurement)
                    .HasForeignKey(d => d.FkResidualbolttensionUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement15");

                entity.HasOne(d => d.FkRingjoint)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkRingjointid)
                    .HasConstraintName("FK_tblBolting_tblRingJoint");

                entity.HasOne(d => d.FkSwUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkSwUnitofmeasurement)
                    .HasForeignKey(d => d.FkSwUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement1");

                entity.HasOne(d => d.FkTensioningvalueAUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkTensioningvalueAUnitofmeasurement)
                    .HasForeignKey(d => d.FkTensioningvalueAUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement8");

                entity.HasOne(d => d.FkTensioningvalueBUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkTensioningvalueBUnitofmeasurement)
                    .HasForeignKey(d => d.FkTensioningvalueBUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement9");

                entity.HasOne(d => d.FkThreadform)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkThreadformid)
                    .HasConstraintName("FK_tblBolting_tblThreadForm");

                entity.HasOne(d => d.FkToolareaUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkToolareaUnitofmeasurement)
                    .HasForeignKey(d => d.FkToolareaUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement22");

                entity.HasOne(d => d.FkTorqtype)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkTorqtypeid)
                    .HasConstraintName("FK_tblBolting_tblTorqType");

                entity.HasOne(d => d.FkWashersBasematerial)
                    .WithMany(p => p.TblBoltingFkWashersBasematerial)
                    .HasForeignKey(d => d.FkWashersBasematerialid)
                    .HasConstraintName("FK_tblBolting_tblBaseMaterial6");

                entity.HasOne(d => d.FkWashersthkUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkWashersthkUnitofmeasurement)
                    .HasForeignKey(d => d.FkWashersthkUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement30");

                entity.HasOne(d => d.FkWeldnorm)
                    .WithMany(p => p.TblBolting)
                    .HasForeignKey(d => d.FkWeldnormid)
                    .HasConstraintName("FK_tblBolting_tblWeldNorm");

                entity.HasOne(d => d.FkYieldpointUnitofmeasurement)
                    .WithMany(p => p.TblBoltingFkYieldpointUnitofmeasurement)
                    .HasForeignKey(d => d.FkYieldpointUnitofmeasurementid)
                    .HasConstraintName("FK_tblBolting_tblUnitOfMeasurement21");
            });

            modelBuilder.Entity<TblBoltType>(entity =>
            {
                entity.HasKey(e => e.PkBolttypeid);

                entity.ToTable("tblBoltType");

                entity.HasIndex(e => e.Code)
                    .HasName("UK_tblBoltType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Description)
                    .HasName("UK_tblBoltType_description")
                    .IsUnique();

                entity.Property(e => e.PkBolttypeid).HasColumnName("pk_bolttypeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(250);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBranch>(entity =>
            {
                entity.HasKey(e => e.PkBranchid);

                entity.ToTable("tblBranch");

                entity.HasIndex(e => e.Branchcode)
                    .HasName("UK_tblBranchCode")
                    .IsUnique();

                entity.Property(e => e.PkBranchid).HasColumnName("pk_branchid");

                entity.Property(e => e.Branchcode)
                    .IsRequired()
                    .HasColumnName("branchcode")
                    .HasMaxLength(25);

                entity.Property(e => e.Branchdescription)
                    .IsRequired()
                    .HasColumnName("branchdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBudgetCenterAllocation>(entity =>
            {
                entity.HasKey(e => e.PkBudgetcenterallocationid);

                entity.ToTable("tblBudgetCenterAllocation");

                entity.HasIndex(e => e.Budgetcenter)
                    .HasName("UQ_tblBudgetCenterAllocation_budgetcenter")
                    .IsUnique();

                entity.HasIndex(e => e.Description)
                    .HasName("UQ_tblBudgetCenterAllocation_description")
                    .IsUnique();

                entity.Property(e => e.PkBudgetcenterallocationid).HasColumnName("pk_budgetcenterallocationid");

                entity.Property(e => e.Budgetcenter)
                    .IsRequired()
                    .HasColumnName("budgetcenter")
                    .HasMaxLength(25);

                entity.Property(e => e.Cbs)
                    .HasColumnName("cbs")
                    .HasMaxLength(25);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBudgetCode>(entity =>
            {
                entity.HasKey(e => e.PkBudgetcodeid);

                entity.ToTable("tblBudgetCode");

                entity.HasIndex(e => e.FkBudgettypeid);

                entity.Property(e => e.PkBudgetcodeid).HasColumnName("pk_budgetcodeid");

                entity.Property(e => e.Budgetcode)
                    .IsRequired()
                    .HasColumnName("budgetcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Budgetcodedescription)
                    .IsRequired()
                    .HasColumnName("budgetcodedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBudgettypeid).HasColumnName("fk_budgettypeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBudgettype)
                    .WithMany(p => p.TblBudgetCode)
                    .HasForeignKey(d => d.FkBudgettypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBudgetCode_tblBudgetType");
            });

            modelBuilder.Entity<TblBudgetTemplate>(entity =>
            {
                entity.HasKey(e => e.PkBudgettemplateid);

                entity.ToTable("tblBudgetTemplate");

                entity.HasIndex(e => e.FkShortcodeid);

                entity.Property(e => e.PkBudgettemplateid).HasColumnName("pk_budgettemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Templatedescription)
                    .IsRequired()
                    .HasColumnName("templatedescription")
                    .HasMaxLength(200);

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblBudgetTemplate)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateShortcodeTask_tblShortcode");
            });

            modelBuilder.Entity<TblBudgetTemplateSubDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkBudgettemplatesubdisciplineid);

                entity.ToTable("tblBudgetTemplateSubDiscipline");

                entity.HasIndex(e => e.FkBudgettemplateid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => new { e.FkBudgettemplateid, e.FkSubdisciplineid })
                    .HasName("uc_budgettemplatesubdiscipline")
                    .IsUnique();

                entity.Property(e => e.PkBudgettemplatesubdisciplineid).HasColumnName("pk_budgettemplatesubdisciplineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Crew)
                    .HasColumnName("crew")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Durationhrs).HasColumnName("durationhrs");

                entity.Property(e => e.Eqprentalsbudget).HasColumnName("eqprentalsbudget");

                entity.Property(e => e.FkBudgettemplateid).HasColumnName("fk_budgettemplateid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.Manhrsbudget).HasColumnName("manhrsbudget");

                entity.Property(e => e.Matbudget).HasColumnName("matbudget");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Oldtaskdescription)
                    .HasColumnName("_oldtaskdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.FkBudgettemplate)
                    .WithMany(p => p.TblBudgetTemplateSubDiscipline)
                    .HasForeignKey(d => d.FkBudgettemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBudgetTemplateSubDiscipline_tblBudgetTemplate");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblBudgetTemplateSubDiscipline)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBudgetTemplateSubDiscipline_tblSubDiscipline");
            });

            modelBuilder.Entity<TblBudgetType>(entity =>
            {
                entity.HasKey(e => e.PkBudgettypeid);

                entity.ToTable("tblBudgetType");

                entity.Property(e => e.PkBudgettypeid).HasColumnName("pk_budgettypeid");

                entity.Property(e => e.Budgettypedescription)
                    .IsRequired()
                    .HasColumnName("budgettypedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBuilding>(entity =>
            {
                entity.HasKey(e => e.PkBuildingid);

                entity.ToTable("tblBuilding");

                entity.HasIndex(e => e.Buildingcode)
                    .HasName("UK_tblBuilding")
                    .IsUnique();

                entity.Property(e => e.PkBuildingid).HasColumnName("pk_buildingid");

                entity.Property(e => e.Buildingcode)
                    .IsRequired()
                    .HasColumnName("buildingcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Buildingdescription)
                    .IsRequired()
                    .HasColumnName("buildingdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblBusinessRule>(entity =>
            {
                entity.HasKey(e => e.PkBusinessruleid);

                entity.ToTable("tblBusinessRule");

                entity.HasIndex(e => e.FkBusinessrulegroupid);

                entity.Property(e => e.PkBusinessruleid).HasColumnName("pk_businessruleid");

                entity.Property(e => e.Businessruleid).HasColumnName("businessruleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBusinessrulegroupid).HasColumnName("fk_businessrulegroupid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBusinessrulegroup)
                    .WithMany(p => p.TblBusinessRule)
                    .HasForeignKey(d => d.FkBusinessrulegroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblBusinessRule_tblBusinessRuleGroup");
            });

            modelBuilder.Entity<TblBusinessRuleGroup>(entity =>
            {
                entity.HasKey(e => e.PkBusinessrulegroupid);

                entity.ToTable("tblBusinessRuleGroup");

                entity.Property(e => e.PkBusinessrulegroupid).HasColumnName("pk_businessrulegroupid");

                entity.Property(e => e.Businessrulegroupid).HasColumnName("businessrulegroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCalcCorfactor>(entity =>
            {
                entity.HasKey(e => e.PkCalccorfactorid);

                entity.ToTable("tblCalcCorfactor");

                entity.HasIndex(e => e.FkCalccorfactorgroupid);

                entity.HasIndex(e => new { e.FkCalccorfactorgroupid, e.Calccorfactorcode })
                    .HasName("UC_tblCalcCorfactor_fk_calccorfactorgroupid_calccorfactorcode")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkCalccorfactorgroupid, e.Calccorfactorname })
                    .HasName("UC_tblCalcCorfactor_fk_calccorfactorgroupid_calccorfactorname")
                    .IsUnique();

                entity.Property(e => e.PkCalccorfactorid).HasColumnName("pk_calccorfactorid");

                entity.Property(e => e.Calccorfactor)
                    .HasColumnName("calccorfactor")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Calccorfactorcode)
                    .IsRequired()
                    .HasColumnName("calccorfactorcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Calccorfactorname)
                    .IsRequired()
                    .HasColumnName("calccorfactorname")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalccorfactorgroupid).HasColumnName("fk_calccorfactorgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalccorfactorgroup)
                    .WithMany(p => p.TblCalcCorfactor)
                    .HasForeignKey(d => d.FkCalccorfactorgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcCorfactor_fk_fk_calccorfactorgroupid");
            });

            modelBuilder.Entity<TblCalcCorfactorGroup>(entity =>
            {
                entity.HasKey(e => e.PkCalccorfactorgroupid);

                entity.ToTable("tblCalcCorfactorGroup");

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => new { e.FkNormsetid, e.Calccorfactorgroupcode })
                    .HasName("UC_tblCalcCorfactorGroup_fk_normsetid_calccorfactorgroupcode")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkNormsetid, e.Calccorfactorgroupname })
                    .HasName("UC_tblCalcCorfactorGroup_fk_normsetid_calccorfactorgroupname")
                    .IsUnique();

                entity.Property(e => e.PkCalccorfactorgroupid).HasColumnName("pk_calccorfactorgroupid");

                entity.Property(e => e.Calccorfactorgroupcode)
                    .IsRequired()
                    .HasColumnName("calccorfactorgroupcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Calccorfactorgroupname)
                    .IsRequired()
                    .HasColumnName("calccorfactorgroupname")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblCalcCorfactorGroup)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcCorfactorGroup_fk_normsetid");
            });

            modelBuilder.Entity<TblCalcGroupCorfactor>(entity =>
            {
                entity.HasKey(e => e.PkCalcgroupcorfactorid);

                entity.ToTable("tblCalcGroupCorfactor");

                entity.HasIndex(e => e.FkCalccorfactorid);

                entity.HasIndex(e => e.FkCalcgroupmainid);

                entity.HasIndex(e => e.FkCalcgroupsubid);

                entity.HasIndex(e => new { e.FkCalcgroupmainid, e.FkCalcgroupsubid, e.FkCalccorfactorid })
                    .HasName("UC_tblCalcGroupCorfactor_fk_calcgroupmainid_fk_calcgroupsubid_fk_calccorfactorid")
                    .IsUnique();

                entity.Property(e => e.PkCalcgroupcorfactorid).HasColumnName("pk_calcgroupcorfactorid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalccorfactorid).HasColumnName("fk_calccorfactorid");

                entity.Property(e => e.FkCalcgroupmainid).HasColumnName("fk_calcgroupmainid");

                entity.Property(e => e.FkCalcgroupsubid).HasColumnName("fk_calcgroupsubid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalccorfactor)
                    .WithMany(p => p.TblCalcGroupCorfactor)
                    .HasForeignKey(d => d.FkCalccorfactorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupCorfactor_fk_calccorfactorid");

                entity.HasOne(d => d.FkCalcgroupmain)
                    .WithMany(p => p.TblCalcGroupCorfactor)
                    .HasForeignKey(d => d.FkCalcgroupmainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupCorfactor_fk_calcgroupmainid");

                entity.HasOne(d => d.FkCalcgroupsub)
                    .WithMany(p => p.TblCalcGroupCorfactor)
                    .HasForeignKey(d => d.FkCalcgroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupCorfactor_fk_calcgroupsubid");
            });

            modelBuilder.Entity<TblCalcGroupMain>(entity =>
            {
                entity.HasKey(e => e.PkCalcgroupmainid);

                entity.ToTable("tblCalcGroupMain");

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => new { e.FkNormsetid, e.Calcgroupmaincode })
                    .HasName("UC_tblCalcGroupMain_Normset_Calcgroupmaincode")
                    .IsUnique();

                entity.Property(e => e.PkCalcgroupmainid).HasColumnName("pk_calcgroupmainid");

                entity.Property(e => e.Calcgroupmaincode)
                    .IsRequired()
                    .HasColumnName("calcgroupmaincode")
                    .HasMaxLength(10);

                entity.Property(e => e.CalcgroupmaindescriptionL1)
                    .HasColumnName("calcgroupmaindescription_l1")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupmaindescriptionL2)
                    .HasColumnName("calcgroupmaindescription_l2")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupmaindescriptionL3)
                    .HasColumnName("calcgroupmaindescription_l3")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupmaindescriptionL4)
                    .HasColumnName("calcgroupmaindescription_l4")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupmaindescriptionL5)
                    .HasColumnName("calcgroupmaindescription_l5")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normbasetype)
                    .IsRequired()
                    .HasColumnName("normbasetype")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblCalcGroupMain)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupMain_fk_normsetid");
            });

            modelBuilder.Entity<TblCalcGroupNormbaseMemo>(entity =>
            {
                entity.HasKey(e => e.PkCalcgroupnormbasememoid);

                entity.ToTable("tblCalcGroupNormbaseMemo");

                entity.HasIndex(e => e.FkCalcgroupmainid);

                entity.HasIndex(e => e.FkCalcgroupsubid);

                entity.HasIndex(e => e.FkNormbasememoid);

                entity.Property(e => e.PkCalcgroupnormbasememoid).HasColumnName("pk_calcgroupnormbasememoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalcgroupmainid).HasColumnName("fk_calcgroupmainid");

                entity.Property(e => e.FkCalcgroupsubid).HasColumnName("fk_calcgroupsubid");

                entity.Property(e => e.FkNormbasememoid).HasColumnName("fk_normbasememoid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalcgroupmain)
                    .WithMany(p => p.TblCalcGroupNormbaseMemo)
                    .HasForeignKey(d => d.FkCalcgroupmainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupNormbaseMemo_fk_calcgroupmainid");

                entity.HasOne(d => d.FkCalcgroupsub)
                    .WithMany(p => p.TblCalcGroupNormbaseMemo)
                    .HasForeignKey(d => d.FkCalcgroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupNormbaseMemo_fk_calcgroupsubid");

                entity.HasOne(d => d.FkNormbasememo)
                    .WithMany(p => p.TblCalcGroupNormbaseMemo)
                    .HasForeignKey(d => d.FkNormbasememoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupNormbaseMemo_fk_normbasememoid");
            });

            modelBuilder.Entity<TblCalcGroupSub>(entity =>
            {
                entity.HasKey(e => e.PkCalcgroupsubid);

                entity.ToTable("tblCalcGroupSub");

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => new { e.FkNormsetid, e.Calcgroupsubnumber })
                    .HasName("UC_tblCalcGroupSub_fk_normsetid_calcgroupsubnumber")
                    .IsUnique();

                entity.Property(e => e.PkCalcgroupsubid).HasColumnName("pk_calcgroupsubid");

                entity.Property(e => e.CalcgroupsubmemoL1)
                    .HasColumnName("calcgroupsubmemo_l1")
                    .HasMaxLength(500);

                entity.Property(e => e.CalcgroupsubmemoL2)
                    .HasColumnName("calcgroupsubmemo_l2")
                    .HasMaxLength(500);

                entity.Property(e => e.CalcgroupsubmemoL3)
                    .HasColumnName("calcgroupsubmemo_l3")
                    .HasMaxLength(500);

                entity.Property(e => e.CalcgroupsubmemoL4)
                    .HasColumnName("calcgroupsubmemo_l4")
                    .HasMaxLength(500);

                entity.Property(e => e.CalcgroupsubmemoL5)
                    .HasColumnName("calcgroupsubmemo_l5")
                    .HasMaxLength(500);

                entity.Property(e => e.CalcgroupsubnameL1)
                    .HasColumnName("calcgroupsubname_l1")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupsubnameL2)
                    .HasColumnName("calcgroupsubname_l2")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupsubnameL3)
                    .HasColumnName("calcgroupsubname_l3")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupsubnameL4)
                    .HasColumnName("calcgroupsubname_l4")
                    .HasMaxLength(150);

                entity.Property(e => e.CalcgroupsubnameL5)
                    .HasColumnName("calcgroupsubname_l5")
                    .HasMaxLength(150);

                entity.Property(e => e.Calcgroupsubnumber)
                    .IsRequired()
                    .HasColumnName("calcgroupsubnumber")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normbasetype)
                    .IsRequired()
                    .HasColumnName("normbasetype")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblCalcGroupSub)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupSub_fk_normsetid");
            });

            modelBuilder.Entity<TblCalcGroupXref>(entity =>
            {
                entity.HasKey(e => e.PkCalcgroupxrefid);

                entity.ToTable("tblCalcGroupXref");

                entity.HasIndex(e => e.FkCalcgroupsubid1);

                entity.HasIndex(e => e.FkCalcgroupsubid2);

                entity.HasIndex(e => new { e.FkCalcgroupsubid1, e.FkCalcgroupsubid2 })
                    .HasName("UC_tblCalcGroupXref_calcgroupsubid1_calcgroupsubid2")
                    .IsUnique();

                entity.Property(e => e.PkCalcgroupxrefid).HasColumnName("pk_calcgroupxrefid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalcgroupsubid1).HasColumnName("fk_calcgroupsubid1");

                entity.Property(e => e.FkCalcgroupsubid2).HasColumnName("fk_calcgroupsubid2");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalcgroupsubid1Navigation)
                    .WithMany(p => p.TblCalcGroupXrefFkCalcgroupsubid1Navigation)
                    .HasForeignKey(d => d.FkCalcgroupsubid1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupXref_fk_calcgroupsubid1");

                entity.HasOne(d => d.FkCalcgroupsubid2Navigation)
                    .WithMany(p => p.TblCalcGroupXrefFkCalcgroupsubid2Navigation)
                    .HasForeignKey(d => d.FkCalcgroupsubid2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCalcGroupXref_fk_calcgroupsubid2");
            });

            modelBuilder.Entity<TblCalendar>(entity =>
            {
                entity.HasKey(e => e.PkCalendarid);

                entity.ToTable("tblCalendar");

                entity.HasIndex(e => e.FkParentcalendarid);

                entity.HasIndex(e => new { e.CompPkifcalendarcodeisnull, e.Calendarcode })
                    .HasName("IX_tblCalendar")
                    .IsUnique();

                entity.Property(e => e.PkCalendarid).HasColumnName("pk_calendarid");

                entity.Property(e => e.Calendarcode)
                    .HasColumnName("calendarcode")
                    .HasMaxLength(4);

                entity.Property(e => e.Calendardescription)
                    .HasColumnName("calendardescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Calendartype).HasColumnName("calendartype");

                entity.Property(e => e.Calendarworkhours)
                    .IsRequired()
                    .HasColumnName("calendarworkhours")
                    .HasColumnType("char(672)");

                entity.Property(e => e.CompPkifcalendarcodeisnull)
                    .HasColumnName("comp_pkifcalendarcodeisnull")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkParentcalendarid).HasColumnName("fk_parentcalendarid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkParentcalendar)
                    .WithMany(p => p.InverseFkParentcalendar)
                    .HasForeignKey(d => d.FkParentcalendarid)
                    .HasConstraintName("FK_tblCalendar_tblCalendar");
            });

            modelBuilder.Entity<TblCategory>(entity =>
            {
                entity.HasKey(e => e.PkCategoryid);

                entity.ToTable("tblCategory");

                entity.Property(e => e.PkCategoryid).HasColumnName("pk_categoryid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasColumnType("nchar(2)");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500);

                entity.Property(e => e.Ischangeitcategory).HasColumnName("ischangeitcategory");

                entity.Property(e => e.Iswelditcategory).HasColumnName("iswelditcategory");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCause>(entity =>
            {
                entity.HasKey(e => e.PkCauseid);

                entity.ToTable("tblCause");

                entity.HasIndex(e => e.Causecode)
                    .HasName("UK_tblCause")
                    .IsUnique();

                entity.Property(e => e.PkCauseid).HasColumnName("pk_causeid");

                entity.Property(e => e.Causecode)
                    .IsRequired()
                    .HasColumnName("causecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Causedescription)
                    .IsRequired()
                    .HasColumnName("causedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCbs>(entity =>
            {
                entity.HasKey(e => e.PkCbsid);

                entity.ToTable("tblCbs");

                entity.HasIndex(e => e.FkCbsparentid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Cbsnr })
                    .HasName("UQ_tblCBS_projectid_cbsnr")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProjectid, e.Exportcode })
                    .HasName("UQ_tblCBS_projectid_exportcode")
                    .IsUnique();

                entity.Property(e => e.PkCbsid).HasColumnName("pk_cbsid");

                entity.Property(e => e.Cbsdescription)
                    .IsRequired()
                    .HasColumnName("cbsdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Cbsname)
                    .IsRequired()
                    .HasColumnName("cbsname")
                    .HasMaxLength(100);

                entity.Property(e => e.Cbsnr)
                    .IsRequired()
                    .HasColumnName("cbsnr")
                    .HasMaxLength(100);

                entity.Property(e => e.Cbssortorder)
                    .IsRequired()
                    .HasColumnName("cbssortorder")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Exportcode)
                    .IsRequired()
                    .HasColumnName("exportcode")
                    .HasMaxLength(3);

                entity.Property(e => e.FkCbsparentid).HasColumnName("fk_cbsparentid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCbsparent)
                    .WithMany(p => p.InverseFkCbsparent)
                    .HasForeignKey(d => d.FkCbsparentid)
                    .HasConstraintName("FK_tblCbs_tblCbs");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblCbs)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCbs_tblProject");
            });

            modelBuilder.Entity<TblCertificate>(entity =>
            {
                entity.HasKey(e => e.PkCertificateid);

                entity.ToTable("tblCertificate");

                entity.HasIndex(e => e.FkBasematerialid);

                entity.HasIndex(e => e.FkCertificategroupid);

                entity.HasIndex(e => e.FkCertificatetypeid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkMateriallibraryid);

                entity.HasIndex(e => e.FkPipetypeid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkScheduleid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => e.FkUnitofmeasurementid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkCertificateid).HasColumnName("pk_certificateid");

                entity.Property(e => e.Articlenr)
                    .HasColumnName("articlenr")
                    .HasMaxLength(20);

                entity.Property(e => e.Autonumber).HasColumnName("autonumber");

                entity.Property(e => e.Certificatedate)
                    .HasColumnName("certificatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Chargenr)
                    .HasColumnName("chargenr")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customattestnr)
                    .HasColumnName("customattestnr")
                    .HasMaxLength(100);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(250);

                entity.Property(e => e.Examinationdate)
                    .HasColumnName("examinationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkBasematerialid).HasColumnName("fk_basematerialid");

                entity.Property(e => e.FkCertificategroupid).HasColumnName("fk_certificategroupid");

                entity.Property(e => e.FkCertificatetypeid).HasColumnName("fk_certificatetypeid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkMateriallibraryid).HasColumnName("fk_materiallibraryid");

                entity.Property(e => e.FkPipetypeid).HasColumnName("fk_pipetypeid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkScheduleid).HasColumnName("fk_scheduleid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.FkUnitofmeasurementid).HasColumnName("fk_unitofmeasurementid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Info)
                    .HasColumnName("info")
                    .HasMaxLength(500);

                entity.Property(e => e.Ismatlibrary).HasColumnName("ismatlibrary");

                entity.Property(e => e.Matbatch)
                    .HasColumnName("matbatch")
                    .HasMaxLength(50);

                entity.Property(e => e.Material)
                    .HasColumnName("material")
                    .HasMaxLength(50);

                entity.Property(e => e.Matlength)
                    .HasColumnName("matlength")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Needsinspection).HasColumnName("needsinspection");

                entity.Property(e => e.Pdfattestnr)
                    .HasColumnName("pdfattestnr")
                    .HasMaxLength(20);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(50);

                entity.Property(e => e.Projectnr)
                    .HasColumnName("projectnr")
                    .HasMaxLength(1200);

                entity.Property(e => e.Purchasingnr)
                    .HasColumnName("purchasingnr")
                    .HasMaxLength(250);

                entity.Property(e => e.Qty)
                    .HasColumnName("qty")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Reexaminationdate)
                    .HasColumnName("reexaminationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Remarks)
                    .HasColumnName("remarks")
                    .HasMaxLength(500);

                entity.Property(e => e.Scopenr)
                    .HasColumnName("scopenr")
                    .HasMaxLength(20);

                entity.Property(e => e.Size)
                    .HasColumnName("size")
                    .HasMaxLength(250);

                entity.Property(e => e.Stoppointnr)
                    .HasColumnName("stoppointnr")
                    .HasMaxLength(250);

                entity.Property(e => e.Validuntilldate)
                    .HasColumnName("validuntilldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Wonr)
                    .HasColumnName("wonr")
                    .HasMaxLength(1200);

                entity.HasOne(d => d.FkBasematerial)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkBasematerialid)
                    .HasConstraintName("FK_tblCertificate_tblBaseMaterial");

                entity.HasOne(d => d.FkCertificategroup)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkCertificategroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificate_tblCertificateGroup");

                entity.HasOne(d => d.FkCertificatetype)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkCertificatetypeid)
                    .HasConstraintName("FK_tblCertificate_tblCertificateType");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificate_tblContractor");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblCertificate_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblCertificate_tblDn");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblCertificate_tblLbs");

                entity.HasOne(d => d.FkMateriallibrary)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkMateriallibraryid)
                    .HasConstraintName("FK_tblCertificate_tblMaterialLibrary");

                entity.HasOne(d => d.FkPipetype)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkPipetypeid)
                    .HasConstraintName("FK_tblCertificate_tblPipeType");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .HasConstraintName("FK_tblCertificate_tblPlantdata");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblCertificate_tblPn");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblCertificate_tblProject");

                entity.HasOne(d => d.FkSchedule)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkScheduleid)
                    .HasConstraintName("FK_tblCertificate_tblSchedule");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblCertificate_tblThickness");

                entity.HasOne(d => d.FkUnitofmeasurement)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkUnitofmeasurementid)
                    .HasConstraintName("FK_tblCertificate_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblCertificate)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblCertificate_tblUser");
            });

            modelBuilder.Entity<TblCertificateCertificateNorm>(entity =>
            {
                entity.HasKey(e => e.PkCertificatecertificatenormid);

                entity.ToTable("tblCertificateCertificateNorm");

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkCertificatenormid);

                entity.Property(e => e.PkCertificatecertificatenormid).HasColumnName("pk_certificatecertificatenormid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkCertificatenormid).HasColumnName("fk_certificatenormid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblCertificateCertificateNorm)
                    .HasForeignKey(d => d.FkCertificateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateCertificateNorm_tblCertificate");

                entity.HasOne(d => d.FkCertificatenorm)
                    .WithMany(p => p.TblCertificateCertificateNorm)
                    .HasForeignKey(d => d.FkCertificatenormid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateCertificateNorm_tblCertificateNorm");
            });

            modelBuilder.Entity<TblCertificateColumnVisibility>(entity =>
            {
                entity.HasKey(e => e.PkCertificatecolumnvisibilityid);

                entity.ToTable("tblCertificateColumnVisibility");

                entity.Property(e => e.PkCertificatecolumnvisibilityid).HasColumnName("pk_certificatecolumnvisibilityid");

                entity.Property(e => e.Columnenum).HasColumnName("columnenum");

                entity.Property(e => e.Columnisvisible).HasColumnName("columnisvisible");

                entity.Property(e => e.Columnname)
                    .IsRequired()
                    .HasColumnName("columnname")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCertificateCustomName>(entity =>
            {
                entity.HasKey(e => e.PkCertificatecustomnameid);

                entity.ToTable("tblCertificateCustomName");

                entity.Property(e => e.PkCertificatecustomnameid).HasColumnName("pk_certificatecustomnameid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customname)
                    .IsRequired()
                    .HasColumnName("customname")
                    .HasMaxLength(150);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCertificateCustomValue>(entity =>
            {
                entity.HasKey(e => e.PkCertificatecustomvalueid);

                entity.ToTable("tblCertificateCustomValue");

                entity.HasIndex(e => e.FkCertificatecustomnameid);

                entity.HasIndex(e => e.FkCertificateid);

                entity.Property(e => e.PkCertificatecustomvalueid).HasColumnName("pk_certificatecustomvalueid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customvalue)
                    .IsRequired()
                    .HasColumnName("customvalue");

                entity.Property(e => e.FkCertificatecustomnameid).HasColumnName("fk_certificatecustomnameid");

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCertificatecustomname)
                    .WithMany(p => p.TblCertificateCustomValue)
                    .HasForeignKey(d => d.FkCertificatecustomnameid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateCustomValue_tblCertificateCustomName");

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblCertificateCustomValue)
                    .HasForeignKey(d => d.FkCertificateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateCustomValue_tblCertificate");
            });

            modelBuilder.Entity<TblCertificateDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkCertificatedocumentlabelid);

                entity.ToTable("tblCertificateDocumentLabel");

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => new { e.FkCertificateid, e.FkDocumentlabelid })
                    .HasName("UK_tblCertificateDocumentLabel_fk_certificateid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkCertificatedocumentlabelid).HasColumnName("pk_certificatedocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblCertificateDocumentLabel)
                    .HasForeignKey(d => d.FkCertificateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateDocumentLabel_tblCertificate");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblCertificateDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateDocumentLabel_tblDocumentLabel");
            });

            modelBuilder.Entity<TblCertificateGroup>(entity =>
            {
                entity.HasKey(e => e.PkCertificategroupid);

                entity.ToTable("tblCertificateGroup");

                entity.Property(e => e.PkCertificategroupid).HasColumnName("pk_certificategroupid");

                entity.Property(e => e.Certificategroup)
                    .IsRequired()
                    .HasColumnName("certificategroup")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Iswelditgroup).HasColumnName("iswelditgroup");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Prefix)
                    .HasColumnName("prefix")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<TblCertificateInspection>(entity =>
            {
                entity.HasKey(e => e.PkCertificateinspectionid);

                entity.ToTable("tblCertificateInspection");

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkInspectorid);

                entity.Property(e => e.PkCertificateinspectionid).HasColumnName("pk_certificateinspectionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkInspectorid).HasColumnName("fk_inspectorid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasColumnName("remark")
                    .HasMaxLength(1200);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblCertificateInspection)
                    .HasForeignKey(d => d.FkCertificateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateInspection_tblCertificate");

                entity.HasOne(d => d.FkInspector)
                    .WithMany(p => p.TblCertificateInspection)
                    .HasForeignKey(d => d.FkInspectorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCertificateInspection_tblUser");
            });

            modelBuilder.Entity<TblCertificateMaterialLibrary>(entity =>
            {
                entity.HasKey(e => e.PkCertificatemateriallibraryid);

                entity.ToTable("tblCertificateMaterialLibrary");

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkMateriallibraryid);

                entity.Property(e => e.PkCertificatemateriallibraryid).HasColumnName("pk_certificatemateriallibraryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkMateriallibraryid).HasColumnName("fk_materiallibraryid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblCertificateMaterialLibrary)
                    .HasForeignKey(d => d.FkCertificateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CertificateMaterialLibrary_tblCertificate");

                entity.HasOne(d => d.FkMateriallibrary)
                    .WithMany(p => p.TblCertificateMaterialLibrary)
                    .HasForeignKey(d => d.FkMateriallibraryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CertificateMaterialLibrary_tblMaterialLibrary");
            });

            modelBuilder.Entity<TblCertificateNorm>(entity =>
            {
                entity.HasKey(e => e.PkCertificatenormid);

                entity.ToTable("tblCertificateNorm");

                entity.Property(e => e.PkCertificatenormid).HasColumnName("pk_certificatenormid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(1200);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCertificateType>(entity =>
            {
                entity.HasKey(e => e.PkCertificatetypeid);

                entity.ToTable("tblCertificateType");

                entity.Property(e => e.PkCertificatetypeid).HasColumnName("pk_certificatetypeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(1200);

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblChangeRequest>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestid);

                entity.ToTable("tblChangeRequest");

                entity.HasIndex(e => e.FkAuditid);

                entity.HasIndex(e => e.FkCategoryid);

                entity.HasIndex(e => e.FkCauseid);

                entity.HasIndex(e => e.FkCostindicationrangeid);

                entity.HasIndex(e => e.FkDocumentcontrollerid);

                entity.HasIndex(e => e.FkExecutionid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkPriorityid);

                entity.HasIndex(e => e.FkRequestorid);

                entity.HasIndex(e => e.FkResponsibleid);

                entity.HasIndex(e => e.FkWorkflowid);

                entity.Property(e => e.PkChangerequestid).HasColumnName("pk_changerequestid");

                entity.Property(e => e.Changerequestdescription)
                    .IsRequired()
                    .HasColumnName("changerequestdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Changerequestnumber)
                    .IsRequired()
                    .HasColumnName("changerequestnumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Cost).HasColumnName("cost");

                entity.Property(e => e.Costdescription).HasColumnName("costdescription");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkMatrixassessmentid).HasColumnName("dk_matrixassessmentid");

                entity.Property(e => e.Durant)
                    .HasColumnName("durant")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.Durationdescription)
                    .HasColumnName("durationdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Durationenddate)
                    .HasColumnName("durationenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Durationid).HasColumnName("durationid");

                entity.Property(e => e.Equipmentbackupavailable).HasColumnName("equipmentbackupavailable");

                entity.Property(e => e.Equipmentbypassed).HasColumnName("equipmentbypassed");

                entity.Property(e => e.Equipmentinservice).HasColumnName("equipmentinservice");

                entity.Property(e => e.Equipmentisolated).HasColumnName("equipmentisolated");

                entity.Property(e => e.FkAuditid).HasColumnName("fk_auditid");

                entity.Property(e => e.FkCategoryid).HasColumnName("fk_categoryid");

                entity.Property(e => e.FkCauseid).HasColumnName("fk_causeid");

                entity.Property(e => e.FkCostindicationrangeid).HasColumnName("fk_costindicationrangeid");

                entity.Property(e => e.FkDocumentcontrollerid).HasColumnName("fk_documentcontrollerid");

                entity.Property(e => e.FkExecutionid).HasColumnName("fk_executionid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkPriorityid).HasColumnName("fk_priorityid");

                entity.Property(e => e.FkRequestorid).HasColumnName("fk_requestorid");

                entity.Property(e => e.FkResponsibleid).HasColumnName("fk_responsibleid");

                entity.Property(e => e.FkWorkflowid).HasColumnName("fk_workflowid");

                entity.Property(e => e.Justification).HasColumnName("justification");

                entity.Property(e => e.Managementnotes).HasColumnName("managementnotes");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nodocumentsneeded).HasColumnName("nodocumentsneeded");

                entity.Property(e => e.Nodocumentsneededverify).HasColumnName("nodocumentsneededverify");

                entity.Property(e => e.Ordernr)
                    .HasColumnName("ordernr")
                    .HasMaxLength(100);

                entity.Property(e => e.Payout).HasColumnName("payout");

                entity.Property(e => e.Payoutdescription).HasColumnName("payoutdescription");

                entity.Property(e => e.Problemdescription).HasColumnName("problemdescription");

                entity.Property(e => e.Remarksrequestor).HasColumnName("remarksrequestor");

                entity.Property(e => e.Requestdate)
                    .HasColumnName("requestdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Solutiondescription).HasColumnName("solutiondescription");

                entity.Property(e => e.Statusmemo).HasColumnName("statusmemo");

                entity.Property(e => e.Typeid).HasColumnName("typeid");

                entity.Property(e => e.Uncertainties).HasColumnName("uncertainties");

                entity.HasOne(d => d.FkAudit)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkAuditid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequest_tblAudit");

                entity.HasOne(d => d.FkCategory)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkCategoryid)
                    .HasConstraintName("FK_tblChangeRequest_tblCategory");

                entity.HasOne(d => d.FkCause)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkCauseid)
                    .HasConstraintName("FK_tblChangeRequest_tblCause");

                entity.HasOne(d => d.FkCostindicationrange)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkCostindicationrangeid)
                    .HasConstraintName("FK_tblChangeRequest_tblCostIndicationRange");

                entity.HasOne(d => d.FkDocumentcontroller)
                    .WithMany(p => p.TblChangeRequestFkDocumentcontroller)
                    .HasForeignKey(d => d.FkDocumentcontrollerid)
                    .HasConstraintName("FK_tblChangeRequest_tblUser3");

                entity.HasOne(d => d.FkExecution)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkExecutionid)
                    .HasConstraintName("FK_tblChangeRequest_tblExecution");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequest_tblPlantdata");

                entity.HasOne(d => d.FkPriority)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkPriorityid)
                    .HasConstraintName("FK_tblChangeRequest_tblPriority");

                entity.HasOne(d => d.FkRequestor)
                    .WithMany(p => p.TblChangeRequestFkRequestor)
                    .HasForeignKey(d => d.FkRequestorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequest_tblUser0");

                entity.HasOne(d => d.FkResponsible)
                    .WithMany(p => p.TblChangeRequestFkResponsible)
                    .HasForeignKey(d => d.FkResponsibleid)
                    .HasConstraintName("FK_tblChangeRequest_tblUser1");

                entity.HasOne(d => d.FkWorkflow)
                    .WithMany(p => p.TblChangeRequest)
                    .HasForeignKey(d => d.FkWorkflowid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequest_tblWorkflow");
            });

            modelBuilder.Entity<TblChangeRequestAction>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestactionid);

                entity.ToTable("tblChangeRequestAction");

                entity.HasIndex(e => e.FkActioncategoryid);

                entity.HasIndex(e => e.FkActiontemplateid);

                entity.HasIndex(e => e.FkChangerequestid);

                entity.HasIndex(e => e.FkInitiatinguserid);

                entity.HasIndex(e => e.FkReadyuserid);

                entity.HasIndex(e => e.FkResponsibleuserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkChangerequestactionid).HasColumnName("pk_changerequestactionid");

                entity.Property(e => e.Actiondescription)
                    .IsRequired()
                    .HasColumnName("actiondescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Actionduedate)
                    .HasColumnName("actionduedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Actionmemo).HasColumnName("actionmemo");

                entity.Property(e => e.Actionreadydate)
                    .HasColumnName("actionreadydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActioncategoryid).HasColumnName("fk_actioncategoryid");

                entity.Property(e => e.FkActiontemplateid).HasColumnName("fk_actiontemplateid");

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.FkInitiatinguserid).HasColumnName("fk_initiatinguserid");

                entity.Property(e => e.FkReadyuserid).HasColumnName("fk_readyuserid");

                entity.Property(e => e.FkResponsibleuserid).HasColumnName("fk_responsibleuserid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActioncategory)
                    .WithMany(p => p.TblChangeRequestAction)
                    .HasForeignKey(d => d.FkActioncategoryid)
                    .HasConstraintName("FK_tblChangeRequestAction_tblActionCategory");

                entity.HasOne(d => d.FkActiontemplate)
                    .WithMany(p => p.TblChangeRequestAction)
                    .HasForeignKey(d => d.FkActiontemplateid)
                    .HasConstraintName("FK_tblChangeRequestAction_tblActionTemplate");

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblChangeRequestAction)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestAction_tblChangeRequest");

                entity.HasOne(d => d.FkInitiatinguser)
                    .WithMany(p => p.TblChangeRequestActionFkInitiatinguser)
                    .HasForeignKey(d => d.FkInitiatinguserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestAction_tblUser_initiatinguser");

                entity.HasOne(d => d.FkReadyuser)
                    .WithMany(p => p.TblChangeRequestActionFkReadyuser)
                    .HasForeignKey(d => d.FkReadyuserid)
                    .HasConstraintName("FK_tblChangeRequestAction_tblUser_readyuser");

                entity.HasOne(d => d.FkResponsibleuser)
                    .WithMany(p => p.TblChangeRequestActionFkResponsibleuser)
                    .HasForeignKey(d => d.FkResponsibleuserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestAction_tblUser_responsibleuser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblChangeRequestAction)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .HasConstraintName("FK_tblChangeRequestAction_tblWorkflowState");
            });

            modelBuilder.Entity<TblChangeRequestAdditionalPlantData>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestadditionalplantdataid);

                entity.ToTable("tblChangeRequestAdditionalPlantData");

                entity.HasIndex(e => e.FkChangerequestid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => new { e.FkChangerequestid, e.FkPlantdataid })
                    .HasName("UK_tblChangeRequestAdditionalPlantData")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestadditionalplantdataid).HasColumnName("pk_changerequestadditionalplantdataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblChangeRequestAdditionalPlantData)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestAdditionalPlantData_tblChangeRequest");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblChangeRequestAdditionalPlantData)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestAdditionalPlantData_tblPlantdata");
            });

            modelBuilder.Entity<TblChangeRequestChecklistItemUser>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestchecklistitemuserid);

                entity.ToTable("tblChangeRequestChecklistItemUser");

                entity.HasIndex(e => e.FkChangerequestid);

                entity.HasIndex(e => e.FkChecklistitemid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.HasIndex(e => new { e.FkChangerequestid, e.FkChecklistitemid, e.FkUserid, e.FkWorkflowstateid })
                    .HasName("UK_tblChangeRequestChecklistItemUser")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestchecklistitemuserid).HasColumnName("pk_changerequestchecklistitemuserid");

                entity.Property(e => e.Changerequestchecklistitemuseragreed).HasColumnName("changerequestchecklistitemuseragreed");

                entity.Property(e => e.Changerequestchecklistitemuseragreedremark).HasColumnName("changerequestchecklistitemuseragreedremark");

                entity.Property(e => e.Changerequestchecklistitemusernotagreed).HasColumnName("changerequestchecklistitemusernotagreed");

                entity.Property(e => e.Changerequestchecklistitemusernotapplicable).HasColumnName("changerequestchecklistitemusernotapplicable");

                entity.Property(e => e.Changerequestchecklistitemuserremark).HasColumnName("changerequestchecklistitemuserremark");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.FkChecklistitemid).HasColumnName("fk_checklistitemid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblChangeRequestChecklistItemUser)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestChecklistItemUser_tblChangeRequest");

                entity.HasOne(d => d.FkChecklistitem)
                    .WithMany(p => p.TblChangeRequestChecklistItemUser)
                    .HasForeignKey(d => d.FkChecklistitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestChecklistItemUser_tblChecklistItem");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblChangeRequestChecklistItemUser)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestChecklistItemUser_tblUser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblChangeRequestChecklistItemUser)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .HasConstraintName("FK_tblChangeRequestChecklistItemUser_tblWorkflowState");
            });

            modelBuilder.Entity<TblChangeRequestChecklistUser>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestchecklistuserid);

                entity.ToTable("tblChangeRequestChecklistUser");

                entity.HasIndex(e => e.FkChangerequestid);

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.HasIndex(e => new { e.FkChangerequestid, e.FkChecklistid, e.FkUserid, e.FkWorkflowstateid })
                    .HasName("UK_tblChangeRequestChecklistUser")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestchecklistuserid).HasColumnName("pk_changerequestchecklistuserid");

                entity.Property(e => e.Changerequestchecklistuseragreed).HasColumnName("changerequestchecklistuseragreed");

                entity.Property(e => e.Changerequestchecklistuseragreedremark).HasColumnName("changerequestchecklistuseragreedremark");

                entity.Property(e => e.Changerequestchecklistusernotagreed).HasColumnName("changerequestchecklistusernotagreed");

                entity.Property(e => e.Changerequestchecklistusernotapplicable).HasColumnName("changerequestchecklistusernotapplicable");

                entity.Property(e => e.Changerequestchecklistuserremark)
                    .IsRequired()
                    .HasColumnName("changerequestchecklistuserremark");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblChangeRequestChecklistUser)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestChecklistUser_tblChangeRequest");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblChangeRequestChecklistUser)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestChecklistUser_tblChecklist");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblChangeRequestChecklistUser)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestChecklistUser_tblUser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblChangeRequestChecklistUser)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .HasConstraintName("FK_tblChangeRequestChecklistUser_tblWorkflowState");
            });

            modelBuilder.Entity<TblChangeRequestComplexityItem>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestcomplexityitemid);

                entity.ToTable("tblChangeRequestComplexityItem");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkComplexityitemid);

                entity.HasIndex(e => new { e.FkActivechangerequestid, e.FkComplexityitemid })
                    .HasName("UK_tblChangeRequestComplexityItem")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestcomplexityitemid).HasColumnName("pk_changerequestcomplexityitemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkComplexityitemid).HasColumnName("fk_complexityitemid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblChangeRequestComplexityItem)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestComplexityItem_tblActiveChangeRequest");

                entity.HasOne(d => d.FkComplexityitem)
                    .WithMany(p => p.TblChangeRequestComplexityItem)
                    .HasForeignKey(d => d.FkComplexityitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestComplexityItem_tblComplexityItem");
            });

            modelBuilder.Entity<TblChangeRequestDocumentItem>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestdocumentitemid);

                entity.ToTable("tblChangeRequestDocumentItem");

                entity.HasIndex(e => e.FkChangerequestid);

                entity.HasIndex(e => e.FkDocumentitemid);

                entity.HasIndex(e => new { e.FkChangerequestid, e.FkDocumentitemid })
                    .HasName("UK_tblChangeRequestDocumentItem")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestdocumentitemid).HasColumnName("pk_changerequestdocumentitemid");

                entity.Property(e => e.Changerequestdocumentitemcheck).HasColumnName("changerequestdocumentitemcheck");

                entity.Property(e => e.Changerequestdocumentitemdescription)
                    .HasColumnName("changerequestdocumentitemdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Changerequestdocumentitemdone).HasColumnName("changerequestdocumentitemdone");

                entity.Property(e => e.Changerequestdocumentitemgeneralremark)
                    .HasColumnName("changerequestdocumentitemgeneralremark")
                    .HasMaxLength(500);

                entity.Property(e => e.Changerequestdocumentitemmodifieddate)
                    .HasColumnName("changerequestdocumentitemmodifieddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changerequestverifiedmodifieddate)
                    .HasColumnName("changerequestverifiedmodifieddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.FkDocumentitemid).HasColumnName("fk_documentitemid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblChangeRequestDocumentItem)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestDocumentItem_tblChangeRequest");

                entity.HasOne(d => d.FkDocumentitem)
                    .WithMany(p => p.TblChangeRequestDocumentItem)
                    .HasForeignKey(d => d.FkDocumentitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestDocumentItem_tblDocumentItem");
            });

            modelBuilder.Entity<TblChangeRequestDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestdocumentlabelid);

                entity.ToTable("tblChangeRequestDocumentLabel");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => new { e.FkActivechangerequestid, e.FkDocumentlabelid })
                    .HasName("UK_tblChangeRequestDocumentLabel")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestdocumentlabelid).HasColumnName("pk_changerequestdocumentlabelid");

                entity.Property(e => e.Changerequestdocumentlabeldescription)
                    .HasColumnName("changerequestdocumentlabeldescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblChangeRequestDocumentLabel)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestDocumentLabel_tblActiveChangeRequest");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblChangeRequestDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestDocumentLabel_tblDocumentLabel");
            });

            modelBuilder.Entity<TblChangeRequestFormulaParameter>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestformulaparameterid);

                entity.ToTable("tblChangeRequestFormulaParameter");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkFormulaparameterid);

                entity.HasIndex(e => new { e.FkActivechangerequestid, e.FkFormulaparameterid })
                    .HasName("UK_tblChangeRequestFormulaParameter")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestformulaparameterid).HasColumnName("pk_changerequestformulaparameterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkFormulaparameterid).HasColumnName("fk_formulaparameterid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Parametervalue).HasColumnName("parametervalue");

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblChangeRequestFormulaParameter)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestFormulaParameter_tblActiveChangeRequest");

                entity.HasOne(d => d.FkFormulaparameter)
                    .WithMany(p => p.TblChangeRequestFormulaParameter)
                    .HasForeignKey(d => d.FkFormulaparameterid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestFormulaParameter_tblFormulaParameter");
            });

            modelBuilder.Entity<TblChangeRequestLabel>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestlabelid);

                entity.ToTable("tblChangeRequestLabel");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkLabelid);

                entity.HasIndex(e => new { e.FkActivechangerequestid, e.FkLabelid })
                    .HasName("UK_tblChangeRequestLabel")
                    .IsUnique();

                entity.Property(e => e.PkChangerequestlabelid).HasColumnName("pk_changerequestlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkLabelid).HasColumnName("fk_labelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblChangeRequestLabel)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestLabel_tblActiveChangeRequest");

                entity.HasOne(d => d.FkLabel)
                    .WithMany(p => p.TblChangeRequestLabel)
                    .HasForeignKey(d => d.FkLabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestLabel_tblLabel");
            });

            modelBuilder.Entity<TblChangeRequestLog>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestlogid);

                entity.ToTable("tblChangeRequestLog");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkChangerequestlogid).HasColumnName("pk_changerequestlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction");

                entity.Property(e => e.Logdate)
                    .HasColumnName("logdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Loginfo)
                    .HasColumnName("loginfo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblChangeRequestLog)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestLog_tblActiveChangeRequest");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblChangeRequestLog)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestLog_tblUser");
            });

            modelBuilder.Entity<TblChangeRequestWorkflowState>(entity =>
            {
                entity.HasKey(e => e.PkChangerequestworkflowstateid);

                entity.ToTable("tblChangeRequestWorkflowState");

                entity.HasIndex(e => e.FkActivechangerequestid);

                entity.HasIndex(e => e.FkEntryworkflowstatetransitionid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkChangerequestworkflowstateid).HasColumnName("pk_changerequestworkflowstateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkActivechangerequestid).HasColumnName("fk_activechangerequestid");

                entity.Property(e => e.FkEntryworkflowstatetransitionid).HasColumnName("fk_entryworkflowstatetransitionid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Signed).HasColumnName("signed");

                entity.Property(e => e.Signedcomputer)
                    .HasColumnName("signedcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Signeddate)
                    .HasColumnName("signeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Signeduser)
                    .HasColumnName("signeduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkActivechangerequest)
                    .WithMany(p => p.TblChangeRequestWorkflowState)
                    .HasForeignKey(d => d.FkActivechangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestWorkflowState_tblActiveChangeRequest");

                entity.HasOne(d => d.FkEntryworkflowstatetransition)
                    .WithMany(p => p.TblChangeRequestWorkflowState)
                    .HasForeignKey(d => d.FkEntryworkflowstatetransitionid)
                    .HasConstraintName("FK_tblChangeRequestWorkflowState_tblWorkflowStateTransition");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblChangeRequestWorkflowState)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChangeRequestWorkflowState_tblWorkflowState");
            });

            modelBuilder.Entity<TblChecklist>(entity =>
            {
                entity.HasKey(e => e.PkChecklistid);

                entity.ToTable("tblChecklist");

                entity.HasIndex(e => new { e.Checklisttype, e.Checklistcode })
                    .HasName("UK_tblChecklist_code")
                    .IsUnique();

                entity.HasIndex(e => new { e.Checklisttype, e.Checklistdescription })
                    .HasName("UK_tblChecklist_description")
                    .IsUnique();

                entity.Property(e => e.PkChecklistid).HasColumnName("pk_checklistid");

                entity.Property(e => e.Applicationchecklisttype).HasColumnName("applicationchecklisttype");

                entity.Property(e => e.Checklistcode)
                    .IsRequired()
                    .HasColumnName("checklistcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Checklistdescription)
                    .IsRequired()
                    .HasColumnName("checklistdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Checklistrequireddocumentation)
                    .HasColumnName("checklistrequireddocumentation")
                    .HasMaxLength(100);

                entity.Property(e => e.Checklisttype).HasColumnName("checklisttype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Isdefaultchecklist).HasColumnName("isdefaultchecklist");

                entity.Property(e => e.Ismandatory).HasColumnName("ismandatory");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Required).HasColumnName("required");
            });

            modelBuilder.Entity<TblChecklistItem>(entity =>
            {
                entity.HasKey(e => e.PkChecklistitemid);

                entity.ToTable("tblChecklistItem");

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkChecklistitemgroupid);

                entity.HasIndex(e => new { e.FkChecklistid, e.Sequencenumber })
                    .HasName("UK_tblChecklistItem")
                    .IsUnique();

                entity.Property(e => e.PkChecklistitemid).HasColumnName("pk_checklistitemid");

                entity.Property(e => e.Checklistitemdescription)
                    .IsRequired()
                    .HasColumnName("checklistitemdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkChecklistitemgroupid).HasColumnName("fk_checklistitemgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sequencenumber).HasColumnName("sequencenumber");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblChecklistItem)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChecklistItem_tblChecklist");

                entity.HasOne(d => d.FkChecklistitemgroup)
                    .WithMany(p => p.TblChecklistItem)
                    .HasForeignKey(d => d.FkChecklistitemgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChecklistItem_tblChecklistItemGroup");
            });

            modelBuilder.Entity<TblChecklistItemGroup>(entity =>
            {
                entity.HasKey(e => e.PkChecklistitemgroupid);

                entity.ToTable("tblChecklistItemGroup");

                entity.HasIndex(e => e.Checklistitemgroupname)
                    .HasName("UK_tblChecklistItemGroup")
                    .IsUnique();

                entity.Property(e => e.PkChecklistitemgroupid).HasColumnName("pk_checklistitemgroupid");

                entity.Property(e => e.Checklistitemgroupname)
                    .IsRequired()
                    .HasColumnName("checklistitemgroupname")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblChecklistItemGroupReviewSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkChecklistitemgroupreviewsubgroupid);

                entity.ToTable("tblChecklistItemGroupReviewSubGroup");

                entity.HasIndex(e => e.FkChecklistitemgroupid);

                entity.HasIndex(e => e.FkReviewsubgroupid);

                entity.HasIndex(e => new { e.FkChecklistitemgroupid, e.FkReviewsubgroupid })
                    .HasName("UK_tblChecklistItemGroupReviewSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkChecklistitemgroupreviewsubgroupid).HasColumnName("pk_checklistitemgroupreviewsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChecklistitemgroupid).HasColumnName("fk_checklistitemgroupid");

                entity.Property(e => e.FkReviewsubgroupid).HasColumnName("fk_reviewsubgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChecklistitemgroup)
                    .WithMany(p => p.TblChecklistItemGroupReviewSubGroup)
                    .HasForeignKey(d => d.FkChecklistitemgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChecklistItemGroupReviewSubGroup_tblChecklistItemGroup");

                entity.HasOne(d => d.FkReviewsubgroup)
                    .WithMany(p => p.TblChecklistItemGroupReviewSubGroup)
                    .HasForeignKey(d => d.FkReviewsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChecklistItemGroupReviewSubGroup_tblReviewSubGroup");
            });

            modelBuilder.Entity<TblChecklistShortcode>(entity =>
            {
                entity.HasKey(e => e.PkChecklistshortcodeid);

                entity.ToTable("tblChecklistShortcode");

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.Property(e => e.PkChecklistshortcodeid).HasColumnName("pk_checklistshortcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblChecklistShortcode)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChecklistShortcode_tblChecklist");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblChecklistShortcode)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblChecklistShortcode_tblShortcode");
            });

            modelBuilder.Entity<TblCircumstance>(entity =>
            {
                entity.HasKey(e => e.PkCircumstanceid);

                entity.ToTable("tblCircumstance");

                entity.HasIndex(e => e.Circumstancecode)
                    .HasName("UQ_tblCircumstance_code")
                    .IsUnique();

                entity.HasIndex(e => e.CircumstancedescriptionL1)
                    .HasName("UQ_tblCircumstance_description")
                    .IsUnique();

                entity.Property(e => e.PkCircumstanceid).HasColumnName("pk_circumstanceid");

                entity.Property(e => e.Circumstancecode)
                    .IsRequired()
                    .HasColumnName("circumstancecode")
                    .HasMaxLength(50);

                entity.Property(e => e.CircumstancedescriptionL1)
                    .IsRequired()
                    .HasColumnName("circumstancedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.CircumstancedescriptionL2)
                    .HasColumnName("circumstancedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.CircumstancedescriptionL3)
                    .HasColumnName("circumstancedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.CircumstancedescriptionL4)
                    .HasColumnName("circumstancedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.CircumstancedescriptionL5)
                    .HasColumnName("circumstancedescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Circumstanceimage).HasColumnName("circumstanceimage");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCleanCode>(entity =>
            {
                entity.HasKey(e => e.PkCleancodeid);

                entity.ToTable("tblCleanCode");

                entity.Property(e => e.PkCleancodeid).HasColumnName("pk_cleancodeid");

                entity.Property(e => e.Cleancodedescription)
                    .IsRequired()
                    .HasColumnName("cleancodedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCleanEquipmentPart>(entity =>
            {
                entity.HasKey(e => e.PkCleanequipmentpartid);

                entity.ToTable("tblCleanEquipmentPart");

                entity.HasIndex(e => e.PkCleanequipmentpartid)
                    .HasName("UK_CLEANEQUIPMENTPART")
                    .IsUnique();

                entity.Property(e => e.PkCleanequipmentpartid).HasColumnName("pk_cleanequipmentpartid");

                entity.Property(e => e.Cleanequipmentpart)
                    .IsRequired()
                    .HasColumnName("cleanequipmentpart")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCleanIndex>(entity =>
            {
                entity.HasKey(e => e.PkCleanindexid);

                entity.ToTable("tblCleanIndex");

                entity.HasIndex(e => e.FkCleancodeid);

                entity.HasIndex(e => e.FkPoldegreeid);

                entity.HasIndex(e => e.FkPolgradeid);

                entity.HasIndex(e => e.FkPoltypeid);

                entity.HasIndex(e => e.FkProdtypeid);

                entity.Property(e => e.PkCleanindexid).HasColumnName("pk_cleanindexid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCleancodeid).HasColumnName("fk_cleancodeid");

                entity.Property(e => e.FkPoldegreeid).HasColumnName("fk_poldegreeid");

                entity.Property(e => e.FkPolgradeid).HasColumnName("fk_polgradeid");

                entity.Property(e => e.FkPoltypeid).HasColumnName("fk_poltypeid");

                entity.Property(e => e.FkProdtypeid).HasColumnName("fk_prodtypeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCleancode)
                    .WithMany(p => p.TblCleanIndex)
                    .HasForeignKey(d => d.FkCleancodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCleanIndex_tblCleanCode");

                entity.HasOne(d => d.FkPoldegree)
                    .WithMany(p => p.TblCleanIndex)
                    .HasForeignKey(d => d.FkPoldegreeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCleanIndex_tblPolDegree");

                entity.HasOne(d => d.FkPolgrade)
                    .WithMany(p => p.TblCleanIndex)
                    .HasForeignKey(d => d.FkPolgradeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCleanIndex_tblPolGrade");

                entity.HasOne(d => d.FkPoltype)
                    .WithMany(p => p.TblCleanIndex)
                    .HasForeignKey(d => d.FkPoltypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCleanIndex_tblPolType");

                entity.HasOne(d => d.FkProdtype)
                    .WithMany(p => p.TblCleanIndex)
                    .HasForeignKey(d => d.FkProdtypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCleanIndex_tblProdType");
            });

            modelBuilder.Entity<TblCleaningMethod>(entity =>
            {
                entity.HasKey(e => e.PkCleaningmethodid);

                entity.ToTable("tblCleaningMethod");

                entity.Property(e => e.PkCleaningmethodid).HasColumnName("pk_cleaningmethodid");

                entity.Property(e => e.Cleaningmethodcode)
                    .IsRequired()
                    .HasColumnName("cleaningmethodcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Cleaningmethoddescription)
                    .IsRequired()
                    .HasColumnName("cleaningmethoddescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblColumnDisplayFormat>(entity =>
            {
                entity.HasKey(e => e.PkColumndisplayformatid);

                entity.ToTable("tblColumnDisplayFormat");

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.Fieldname, e.FkUserid, e.Displayformattype })
                    .HasName("IX_tblColumnDisplayFormat_U1")
                    .IsUnique();

                entity.Property(e => e.PkColumndisplayformatid).HasColumnName("pk_columndisplayformatid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Displayformattype).HasColumnName("displayformattype");

                entity.Property(e => e.Fieldname)
                    .IsRequired()
                    .HasColumnName("fieldname")
                    .HasMaxLength(255);

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblColumnDisplayFormat)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblColumnDisplayFormat_tblUser");
            });

            modelBuilder.Entity<TblColumnDisplayFormatData>(entity =>
            {
                entity.HasKey(e => e.PkColumndisplayformatdataid);

                entity.ToTable("tblColumnDisplayFormatData");

                entity.HasIndex(e => e.FkColumndisplayformatid);

                entity.Property(e => e.PkColumndisplayformatdataid).HasColumnName("pk_columndisplayformatdataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkColumndisplayformatid).HasColumnName("fk_columndisplayformatid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value");

                entity.Property(e => e.Valuetype).HasColumnName("valuetype");

                entity.HasOne(d => d.FkColumndisplayformat)
                    .WithMany(p => p.TblColumnDisplayFormatData)
                    .HasForeignKey(d => d.FkColumndisplayformatid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblColumnDisplayFormatData_tblColumnDisplayFormat");
            });

            modelBuilder.Entity<TblComplexityItem>(entity =>
            {
                entity.HasKey(e => e.PkComplexityitemid);

                entity.ToTable("tblComplexityItem");

                entity.HasIndex(e => e.FkComplexityitemsubgroupid);

                entity.HasIndex(e => new { e.FkComplexityitemsubgroupid, e.Complexityitemdescription })
                    .HasName("UK_tblComplexityItem")
                    .IsUnique();

                entity.Property(e => e.PkComplexityitemid).HasColumnName("pk_complexityitemid");

                entity.Property(e => e.Complexityitemdescription)
                    .IsRequired()
                    .HasColumnName("complexityitemdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkComplexityitemsubgroupid).HasColumnName("fk_complexityitemsubgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Typeid).HasColumnName("typeid");

                entity.HasOne(d => d.FkComplexityitemsubgroup)
                    .WithMany(p => p.TblComplexityItem)
                    .HasForeignKey(d => d.FkComplexityitemsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblComplexityItem_tblComplexityItemSubGroup");
            });

            modelBuilder.Entity<TblComplexityItemDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkComplexityitemdocumentlabelid);

                entity.ToTable("tblComplexityItemDocumentLabel");

                entity.HasIndex(e => e.FkComplexityitemid);

                entity.HasIndex(e => e.FkDocumentcolumnsubgroupid);

                entity.HasIndex(e => new { e.FkComplexityitemid, e.FkDocumentcolumnsubgroupid })
                    .HasName("UK_tblComplexityItemDocumentLabel")
                    .IsUnique();

                entity.Property(e => e.PkComplexityitemdocumentlabelid).HasColumnName("pk_complexityitemdocumentlabelid");

                entity.Property(e => e.Complexityitemdocumentlabeldescription)
                    .HasColumnName("complexityitemdocumentlabeldescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkComplexityitemid).HasColumnName("fk_complexityitemid");

                entity.Property(e => e.FkDocumentcolumnsubgroupid).HasColumnName("fk_documentcolumnsubgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkComplexityitem)
                    .WithMany(p => p.TblComplexityItemDocumentLabel)
                    .HasForeignKey(d => d.FkComplexityitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblComplexityItemDocumentLabel_tblComplexityItem");

                entity.HasOne(d => d.FkDocumentcolumnsubgroup)
                    .WithMany(p => p.TblComplexityItemDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentcolumnsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblComplexityItemDocumentLabel_tblDocumentColumnSubGroup");
            });

            modelBuilder.Entity<TblComplexityItemMainGroup>(entity =>
            {
                entity.HasKey(e => e.PkComplexityitemmaingroupid);

                entity.ToTable("tblComplexityItemMainGroup");

                entity.HasIndex(e => e.Complexityitemmaingroupname)
                    .HasName("UK_tblComplexityItemMainGroup")
                    .IsUnique();

                entity.Property(e => e.PkComplexityitemmaingroupid).HasColumnName("pk_complexityitemmaingroupid");

                entity.Property(e => e.Complexityitemmaingroupname)
                    .IsRequired()
                    .HasColumnName("complexityitemmaingroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblComplexityItemReviewSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkComplexityitemreviewsubgroupid);

                entity.ToTable("tblComplexityItemReviewSubGroup");

                entity.HasIndex(e => e.FkComplexityitemid);

                entity.HasIndex(e => e.FkReviewsubgroupid);

                entity.HasIndex(e => new { e.FkComplexityitemid, e.FkReviewsubgroupid })
                    .HasName("UK_tblComplexityItemReviewSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkComplexityitemreviewsubgroupid).HasColumnName("pk_complexityitemreviewsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkComplexityitemid).HasColumnName("fk_complexityitemid");

                entity.Property(e => e.FkReviewsubgroupid).HasColumnName("fk_reviewsubgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkComplexityitem)
                    .WithMany(p => p.TblComplexityItemReviewSubGroup)
                    .HasForeignKey(d => d.FkComplexityitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblComplexityItemReviewSubGroup_tblComplexityItem");

                entity.HasOne(d => d.FkReviewsubgroup)
                    .WithMany(p => p.TblComplexityItemReviewSubGroup)
                    .HasForeignKey(d => d.FkReviewsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblComplexityItemReviewSubGroup_tblReviewSubGroup");
            });

            modelBuilder.Entity<TblComplexityItemSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkComplexityitemsubgroupid);

                entity.ToTable("tblComplexityItemSubGroup");

                entity.HasIndex(e => e.FkComplexityitemmaingroupid);

                entity.HasIndex(e => new { e.FkComplexityitemmaingroupid, e.Complexityitemsubgroupname })
                    .HasName("UK_tblComplexityItemSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkComplexityitemsubgroupid).HasColumnName("pk_complexityitemsubgroupid");

                entity.Property(e => e.Complexityitemsubgroupname)
                    .IsRequired()
                    .HasColumnName("complexityitemsubgroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkComplexityitemmaingroupid).HasColumnName("fk_complexityitemmaingroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkComplexityitemmaingroup)
                    .WithMany(p => p.TblComplexityItemSubGroup)
                    .HasForeignKey(d => d.FkComplexityitemmaingroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblComplexityItemSubGroup_tblComplexityItemMainGroup");
            });

            modelBuilder.Entity<TblConnection>(entity =>
            {
                entity.HasKey(e => e.PkConnectionid);

                entity.ToTable("tblConnection");

                entity.HasIndex(e => e.Connectioncode)
                    .HasName("UK_tblConnection_code")
                    .IsUnique();

                entity.HasIndex(e => e.Connectiondescription)
                    .HasName("UK_tblConnection_description")
                    .IsUnique();

                entity.Property(e => e.PkConnectionid).HasColumnName("pk_connectionid");

                entity.Property(e => e.Connectioncode)
                    .IsRequired()
                    .HasColumnName("connectioncode")
                    .HasMaxLength(50);

                entity.Property(e => e.Connectiondescription)
                    .IsRequired()
                    .HasColumnName("connectiondescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblConnectionType>(entity =>
            {
                entity.HasKey(e => e.PkConnectiontypeid);

                entity.ToTable("tblConnectionType");

                entity.Property(e => e.PkConnectiontypeid).HasColumnName("pk_connectiontypeid");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblContractor>(entity =>
            {
                entity.HasKey(e => e.PkContractorid);

                entity.ToTable("tblContractor");

                entity.HasIndex(e => e.Contractorname)
                    .HasName("UK_tblContractor_contractorname")
                    .IsUnique();

                entity.HasIndex(e => e.Contractornr)
                    .HasName("IX_tblContractor_contractornr")
                    .IsUnique();

                entity.HasIndex(e => e.FkCalendarid);

                entity.Property(e => e.PkContractorid).HasColumnName("pk_contractorid");

                entity.Property(e => e.Accountnr)
                    .HasColumnName("accountnr")
                    .HasMaxLength(25);

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(50);

                entity.Property(e => e.Contactperson)
                    .HasColumnName("contactperson")
                    .HasMaxLength(100);

                entity.Property(e => e.Contractorcolor).HasColumnName("contractorcolor");

                entity.Property(e => e.Contractorlogo)
                    .HasColumnName("contractorlogo")
                    .HasColumnType("image");

                entity.Property(e => e.Contractorname)
                    .IsRequired()
                    .HasColumnName("contractorname")
                    .HasMaxLength(100);

                entity.Property(e => e.Contractornr)
                    .IsRequired()
                    .HasColumnName("contractornr")
                    .HasMaxLength(5);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.Iscontractor).HasColumnName("iscontractor");

                entity.Property(e => e.Isndecompany).HasColumnName("isndecompany");

                entity.Property(e => e.Isnobo).HasColumnName("isnobo");

                entity.Property(e => e.Isvendor).HasColumnName("isvendor");

                entity.Property(e => e.Iswelditcontractor).HasColumnName("iswelditcontractor");

                entity.Property(e => e.Mobile)
                    .HasColumnName("mobile")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .HasColumnName("phone")
                    .HasMaxLength(50);

                entity.Property(e => e.Street)
                    .HasColumnName("street")
                    .HasMaxLength(50);

                entity.Property(e => e.Zipcode)
                    .HasColumnName("zipcode")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblContractor)
                    .HasForeignKey(d => d.FkCalendarid)
                    .HasConstraintName("FK_tblContractor_tblCalendar");
            });

            modelBuilder.Entity<TblContractorField>(entity =>
            {
                entity.HasKey(e => e.PkContractorfieldid);

                entity.ToTable("tblContractorField");

                entity.HasIndex(e => e.FkContractorid);

                entity.Property(e => e.PkContractorfieldid).HasColumnName("pk_contractorfieldid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fielddescription).HasColumnName("fielddescription");

                entity.Property(e => e.Fieldname)
                    .IsRequired()
                    .HasColumnName("fieldname")
                    .HasMaxLength(50);

                entity.Property(e => e.Fieldtypeenumvalue).HasColumnName("fieldtypeenumvalue");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblContractorField)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblContractorField_tblContractor");
            });

            modelBuilder.Entity<TblCostCenter>(entity =>
            {
                entity.HasKey(e => e.PkCostcenterid);

                entity.ToTable("tblCostCenter");

                entity.HasIndex(e => e.Costcentercode)
                    .HasName("UK_tblCostCenter_costcentercode")
                    .IsUnique();

                entity.Property(e => e.PkCostcenterid).HasColumnName("pk_costcenterid");

                entity.Property(e => e.Costcentercode)
                    .IsRequired()
                    .HasColumnName("costcentercode")
                    .HasMaxLength(10);

                entity.Property(e => e.Costcenterdescription)
                    .IsRequired()
                    .HasColumnName("costcenterdescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCostIndicationRange>(entity =>
            {
                entity.HasKey(e => e.PkCostindicationrangeid);

                entity.ToTable("tblCostIndicationRange");

                entity.Property(e => e.PkCostindicationrangeid).HasColumnName("pk_costindicationrangeid");

                entity.Property(e => e.Constindicationrangedescription)
                    .IsRequired()
                    .HasColumnName("constindicationrangedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ischangeitindicationrange).HasColumnName("ischangeitindicationrange");

                entity.Property(e => e.Isscopeitindicationrange).HasColumnName("isscopeitindicationrange");

                entity.Property(e => e.Maxvalue).HasColumnName("maxvalue");

                entity.Property(e => e.Minvalue).HasColumnName("minvalue");

                entity.Property(e => e.Moctype).HasColumnName("moctype");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCriticality>(entity =>
            {
                entity.HasKey(e => e.PkCriticalityid);

                entity.ToTable("tblCriticality");

                entity.HasIndex(e => e.Criticalitycode)
                    .HasName("UK_tblcriticality_code")
                    .IsUnique();

                entity.HasIndex(e => e.Criticalitydescription)
                    .HasName("UK_tblcriticality_description")
                    .IsUnique();

                entity.Property(e => e.PkCriticalityid).HasColumnName("pk_criticalityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Criticalitycode)
                    .IsRequired()
                    .HasColumnName("criticalitycode")
                    .HasMaxLength(50);

                entity.Property(e => e.Criticalitydescription)
                    .IsRequired()
                    .HasColumnName("criticalitydescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblCurveStyle>(entity =>
            {
                entity.HasKey(e => e.PkCurveid);

                entity.ToTable("tblCurveStyle");

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkCurveid).HasColumnName("pk_curveid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Curve).HasColumnName("curve");

                entity.Property(e => e.Curvecolor).HasColumnName("curvecolor");

                entity.Property(e => e.Curvestyle).HasColumnName("curvestyle");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblCurveStyle)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblCurveStyle_tblUser");
            });

            modelBuilder.Entity<TblCustomColumn>(entity =>
            {
                entity.HasKey(e => e.PkCustomcolumnid);

                entity.ToTable("tblCustomColumn");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Customcolumnpriority })
                    .HasName("IX_tblCustomColumn")
                    .IsUnique();

                entity.Property(e => e.PkCustomcolumnid).HasColumnName("pk_customcolumnid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customcolumnname)
                    .IsRequired()
                    .HasColumnName("customcolumnname")
                    .HasMaxLength(20);

                entity.Property(e => e.Customcolumnpriority).HasColumnName("customcolumnpriority");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblCustomColumn)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblCustomColumn_tblProject");
            });

            modelBuilder.Entity<TblDataExchangeImportMessage>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangeimportmessageid);

                entity.ToTable("tblDataExchangeImportMessage");

                entity.HasIndex(e => e.FkDataexchangeupdatestatusid);

                entity.Property(e => e.PkDataexchangeimportmessageid).HasColumnName("pk_dataexchangeimportmessageid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDataexchangeupdatestatusid).HasColumnName("fk_dataexchangeupdatestatusid");

                entity.Property(e => e.Messagedate)
                    .HasColumnName("messagedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Messagetext)
                    .IsRequired()
                    .HasColumnName("messagetext")
                    .HasMaxLength(255);

                entity.Property(e => e.Messagetype).HasColumnName("messagetype");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDataexchangeupdatestatus)
                    .WithMany(p => p.TblDataExchangeImportMessage)
                    .HasForeignKey(d => d.FkDataexchangeupdatestatusid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeImportMessage_tblDataExchangeUpdateStatus");
            });

            modelBuilder.Entity<TblDataExchangeLoadStatus>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangeloadstatus);

                entity.ToTable("tblDataExchangeLoadStatus");

                entity.HasIndex(e => new { e.PkDataexchangeloadstatus, e.FkDataexchangestagingtableid })
                    .HasName("idxDataExchangeLoadStatusStagingTable");

                entity.Property(e => e.PkDataexchangeloadstatus).HasColumnName("pk_dataexchangeloadstatus");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDataexchangestagingtableid).HasColumnName("fk_dataexchangestagingtableid");

                entity.Property(e => e.Loaddate)
                    .HasColumnName("loaddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Loaduser)
                    .HasColumnName("loaduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Numberofloadedrows).HasColumnName("numberofloadedrows");

                entity.HasOne(d => d.FkDataexchangestagingtable)
                    .WithMany(p => p.TblDataExchangeLoadStatus)
                    .HasForeignKey(d => d.FkDataexchangestagingtableid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeLoadStatus_tblDataExchangeStagingTable");
            });

            modelBuilder.Entity<TblDataExchangeObjectType>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangeobjecttypeid);

                entity.ToTable("tblDataExchangeObjectType");

                entity.HasIndex(e => e.Code)
                    .HasName("UK_tblDataExchangeObjectType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Dataexchangeobjecttypedescription)
                    .HasName("UK_tblDataExchangeObjectType_dataexchangeobjecttypedescription")
                    .IsUnique();

                entity.Property(e => e.PkDataexchangeobjecttypeid).HasColumnName("pk_dataexchangeobjecttypeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(1);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dataexchangeobjecttypedescription)
                    .IsRequired()
                    .HasColumnName("dataexchangeobjecttypedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Isvisible).HasColumnName("isvisible");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Spactive)
                    .HasColumnName("spactive")
                    .HasColumnType("datetime");

                entity.Property(e => e.Spname)
                    .IsRequired()
                    .HasColumnName("spname")
                    .HasMaxLength(250);

                entity.Property(e => e.Type).HasColumnName("type");
            });

            modelBuilder.Entity<TblDataExchangeObjectTypeUser>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangeobjecttypeuserid);

                entity.ToTable("tblDataExchangeObjectTypeUser");

                entity.HasIndex(e => e.FkDataexchangeobjecttypeid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkDataexchangeobjecttypeuserid).HasColumnName("pk_dataexchangeobjecttypeuserid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDataexchangeobjecttypeid).HasColumnName("fk_dataexchangeobjecttypeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDataexchangeobjecttype)
                    .WithMany(p => p.TblDataExchangeObjectTypeUser)
                    .HasForeignKey(d => d.FkDataexchangeobjecttypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeObjectTypeUser_tblDataExchangeObjectType");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblDataExchangeObjectTypeUser)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeObjectTypeUser_tblUser");
            });

            modelBuilder.Entity<TblDataExchangeSetting>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangesettingid);

                entity.ToTable("tblDataExchangeSetting");

                entity.Property(e => e.PkDataexchangesettingid).HasColumnName("pk_dataexchangesettingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Settingname)
                    .IsRequired()
                    .HasColumnName("settingname")
                    .HasMaxLength(50);

                entity.Property(e => e.Settingvalue)
                    .HasColumnName("settingvalue")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<TblDataExchangeStagingTable>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangestagingtableid);

                entity.ToTable("tblDataExchangeStagingTable");

                entity.HasIndex(e => e.FkDataexchangeobjecttypeid);

                entity.Property(e => e.PkDataexchangestagingtableid).HasColumnName("pk_dataexchangestagingtableid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDataexchangeobjecttypeid).HasColumnName("fk_dataexchangeobjecttypeid");

                entity.Property(e => e.Iseditable).HasColumnName("iseditable");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Stagingtablename)
                    .IsRequired()
                    .HasColumnName("stagingtablename")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkDataexchangeobjecttype)
                    .WithMany(p => p.TblDataExchangeStagingTable)
                    .HasForeignKey(d => d.FkDataexchangeobjecttypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeStagingTable_tblDataExchangeObjectType");
            });

            modelBuilder.Entity<TblDataExchangeStagingTableUser>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangestagingtableuserid);

                entity.ToTable("tblDataExchangeStagingTableUser");

                entity.HasIndex(e => e.FkDataexchangestagingtableid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkDataexchangestagingtableuserid).HasColumnName("pk_dataexchangestagingtableuserid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDataexchangestagingtableid).HasColumnName("fk_dataexchangestagingtableid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDataexchangestagingtable)
                    .WithMany(p => p.TblDataExchangeStagingTableUser)
                    .HasForeignKey(d => d.FkDataexchangestagingtableid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeStagingTableUser_tblDataExchangeStagingTable");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblDataExchangeStagingTableUser)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeStagingTableUser_tblUser");
            });

            modelBuilder.Entity<TblDataExchangeUpdateStatus>(entity =>
            {
                entity.HasKey(e => e.PkDataexchangeupdatestatusid);

                entity.ToTable("tblDataExchangeUpdateStatus");

                entity.HasIndex(e => e.FkDataexchangeobjecttypeid);

                entity.Property(e => e.PkDataexchangeupdatestatusid).HasColumnName("pk_dataexchangeupdatestatusid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Finishdatetime)
                    .HasColumnName("finishdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkDataexchangeobjecttypeid).HasColumnName("fk_dataexchangeobjecttypeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Numberoferrors).HasColumnName("numberoferrors");

                entity.Property(e => e.Numberofwarnings).HasColumnName("numberofwarnings");

                entity.Property(e => e.Numbersuccessful).HasColumnName("numbersuccessful");

                entity.Property(e => e.Sourceutcdatetime)
                    .HasColumnName("sourceutcdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Startdatetime)
                    .HasColumnName("startdatetime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Updatetype)
                    .HasColumnName("updatetype")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkDataexchangeobjecttype)
                    .WithMany(p => p.TblDataExchangeUpdateStatus)
                    .HasForeignKey(d => d.FkDataexchangeobjecttypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDataExchangeUpdateStatus_tblDataExchangeObjectType");
            });

            modelBuilder.Entity<TblDeadline>(entity =>
            {
                entity.HasKey(e => e.PkDeadlineid);

                entity.ToTable("tblDeadline");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Deadlinename })
                    .HasName("UQ_tblDeadline")
                    .IsUnique();

                entity.Property(e => e.PkDeadlineid).HasColumnName("pk_deadlineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Deadlinecolor).HasColumnName("deadlinecolor");

                entity.Property(e => e.Deadlinedate)
                    .HasColumnName("deadlinedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Deadlinename)
                    .IsRequired()
                    .HasColumnName("deadlinename")
                    .HasMaxLength(25);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Usedbypi).HasColumnName("usedbypi");

                entity.Property(e => e.Usedbyrs).HasColumnName("usedbyrs");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblDeadline)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDeadline_tblProject");
            });

            modelBuilder.Entity<TblDecision>(entity =>
            {
                entity.HasKey(e => e.PkDecisionid);

                entity.ToTable("tblDecision");

                entity.HasIndex(e => e.FkDecisionbyuserid);

                entity.HasIndex(e => e.FkMeetingid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkDecisionid).HasColumnName("pk_decisionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Decisiondescription)
                    .IsRequired()
                    .HasColumnName("decisiondescription")
                    .HasMaxLength(500);

                entity.Property(e => e.FkDecisionbyuserid).HasColumnName("fk_decisionbyuserid");

                entity.Property(e => e.FkMeetingid).HasColumnName("fk_meetingid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Meetingdate)
                    .HasColumnName("meetingdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDecisionbyuser)
                    .WithMany(p => p.TblDecision)
                    .HasForeignKey(d => d.FkDecisionbyuserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDecision_tblUser");

                entity.HasOne(d => d.FkMeeting)
                    .WithMany(p => p.TblDecision)
                    .HasForeignKey(d => d.FkMeetingid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDecision_tblMeeting");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblDecision)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDecision_tblScope");
            });

            modelBuilder.Entity<TblDecisionItem>(entity =>
            {
                entity.HasKey(e => e.PkDecisionitemid);

                entity.ToTable("tblDecisionItem");

                entity.Property(e => e.PkDecisionitemid).HasColumnName("pk_decisionitemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Decisionitemdescription)
                    .IsRequired()
                    .HasColumnName("decisionitemdescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDefaultAttachment>(entity =>
            {
                entity.HasKey(e => e.PkDefaultattachmentid);

                entity.ToTable("tblDefaultAttachment");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.Property(e => e.PkDefaultattachmentid).HasColumnName("pk_defaultattachmentid");

                entity.Property(e => e.Attachmentdescription)
                    .HasColumnName("attachmentdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Filename)
                    .HasColumnName("filename")
                    .HasMaxLength(750);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Friendlyfilename)
                    .HasColumnName("friendlyfilename")
                    .HasMaxLength(750);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblDefaultAttachment)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDefaultAttachment_tblDocumentLabel");
            });

            modelBuilder.Entity<TblDeliverable>(entity =>
            {
                entity.HasKey(e => e.PkDeliverableid);

                entity.ToTable("tblDeliverable", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Code })
                    .HasName("IX_tblDeliverable_U1")
                    .IsUnique();

                entity.Property(e => e.PkDeliverableid).HasColumnName("pk_deliverableid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(5);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblDeliverable)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDeliverable_fk_projectid");
            });

            modelBuilder.Entity<TblDepartment>(entity =>
            {
                entity.HasKey(e => e.PkDepartmentid);

                entity.ToTable("tblDepartment");

                entity.HasIndex(e => e.Departmentname)
                    .HasName("UK_tblDepartment")
                    .IsUnique();

                entity.Property(e => e.PkDepartmentid).HasColumnName("pk_departmentid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Departmentname)
                    .IsRequired()
                    .HasColumnName("departmentname")
                    .HasMaxLength(50);

                entity.Property(e => e.Ischangeitdepartment).HasColumnName("ischangeitdepartment");

                entity.Property(e => e.Isscopeitdepartment).HasColumnName("isscopeitdepartment");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDepartmentSection>(entity =>
            {
                entity.HasKey(e => e.PkDepartmentsectionid);

                entity.ToTable("tblDepartmentSection");

                entity.HasIndex(e => e.FkDepartmentid);

                entity.HasIndex(e => new { e.FkDepartmentid, e.Sectionname })
                    .HasName("UK_tblDepartmentSection")
                    .IsUnique();

                entity.Property(e => e.PkDepartmentsectionid).HasColumnName("pk_departmentsectionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDepartmentid).HasColumnName("fk_departmentid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sectionname)
                    .IsRequired()
                    .HasColumnName("sectionname")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDepartment)
                    .WithMany(p => p.TblDepartmentSection)
                    .HasForeignKey(d => d.FkDepartmentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDepartmentSection_tblDepartment");
            });

            modelBuilder.Entity<TblDia>(entity =>
            {
                entity.HasKey(e => e.PkDiaid);

                entity.ToTable("tblDia");

                entity.HasIndex(e => new { e.Diadescription, e.Diadntype })
                    .HasName("UK_tblDia_diadescription_diadntype")
                    .IsUnique();

                entity.Property(e => e.PkDiaid).HasColumnName("pk_diaid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Diadescription)
                    .IsRequired()
                    .HasColumnName("diadescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Diadntype).HasColumnName("diadntype");

                entity.Property(e => e.Diavalue)
                    .HasColumnName("diavalue")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDiaAlternative>(entity =>
            {
                entity.HasKey(e => e.PkDiaalternativeid);

                entity.ToTable("tblDiaAlternative");

                entity.HasIndex(e => e.Diaalternativedescription)
                    .HasName("UC_tblDiaAlternative_diaalternativedescription")
                    .IsUnique();

                entity.HasIndex(e => e.FkDiaid);

                entity.Property(e => e.PkDiaalternativeid).HasColumnName("pk_diaalternativeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Diaalternativedescription)
                    .IsRequired()
                    .HasColumnName("diaalternativedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblDiaAlternative)
                    .HasForeignKey(d => d.FkDiaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDiaAlternative_fk_diaid");
            });

            modelBuilder.Entity<TblDiaDnCoupling>(entity =>
            {
                entity.HasKey(e => e.PkDiadncouplingid);

                entity.ToTable("tblDiaDnCoupling");

                entity.HasIndex(e => e.FkDiaid)
                    .HasName("UK_tblDiaDnCoupling_fk_diaid")
                    .IsUnique();

                entity.HasIndex(e => e.FkDnid)
                    .HasName("UK_tblDiaDnCoupling_fk_dnid")
                    .IsUnique();

                entity.Property(e => e.PkDiadncouplingid).HasColumnName("pk_diadncouplingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDia)
                    .WithOne(p => p.TblDiaDnCoupling)
                    .HasForeignKey<TblDiaDnCoupling>(d => d.FkDiaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDiaDnCoupling_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithOne(p => p.TblDiaDnCoupling)
                    .HasForeignKey<TblDiaDnCoupling>(d => d.FkDnid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDiaDnCoupling_tblDn");
            });

            modelBuilder.Entity<TblDiaWthSchedCoupling>(entity =>
            {
                entity.HasKey(e => e.PkDiawthschedcouplingid);

                entity.ToTable("tblDiaWthSchedCoupling");

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkScheduleid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => new { e.FkDiaid, e.FkScheduleid })
                    .HasName("UK_tblDiaWthSchedCoupling_SchedulePerDia")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkDiaid, e.FkThicknessid })
                    .HasName("UK_tblDiaWthSchedCoupling_ThicknessPerDia")
                    .IsUnique();

                entity.Property(e => e.PkDiawthschedcouplingid).HasColumnName("pk_diawthschedcouplingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkScheduleid).HasColumnName("fk_scheduleid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblDiaWthSchedCoupling)
                    .HasForeignKey(d => d.FkDiaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDiaWthSchedCoupling_tblDia");

                entity.HasOne(d => d.FkSchedule)
                    .WithMany(p => p.TblDiaWthSchedCoupling)
                    .HasForeignKey(d => d.FkScheduleid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDiaWthSchedCoupling_tblSchedule");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblDiaWthSchedCoupling)
                    .HasForeignKey(d => d.FkThicknessid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDiaWthSchedCoupling_tblThickness");
            });

            modelBuilder.Entity<TblDigitalSignature>(entity =>
            {
                entity.HasKey(e => e.PkDigitalsignatureid);

                entity.ToTable("tblDigitalSignature");

                entity.HasIndex(e => e.FkPermititempartid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.PkDigitalsignatureid)
                    .HasName("IX_tblDigitalSignature_digitalsignaturetype");

                entity.Property(e => e.PkDigitalsignatureid).HasColumnName("pk_digitalsignatureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Digitalsignaturetype).HasColumnName("digitalsignaturetype");

                entity.Property(e => e.FkPermititempartid).HasColumnName("fk_permititempartid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Signaturedate)
                    .HasColumnName("signaturedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stamptype).HasColumnName("stamptype");

                entity.HasOne(d => d.FkPermititempart)
                    .WithMany(p => p.TblDigitalSignature)
                    .HasForeignKey(d => d.FkPermititempartid)
                    .HasConstraintName("FK_tblDigitalSignature_tblPermitItemPart");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblDigitalSignature)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDigitalSignature_tblUser");
            });

            modelBuilder.Entity<TblDisciplineCode>(entity =>
            {
                entity.HasKey(e => e.PkDisciplinecodeid);

                entity.ToTable("tblDisciplineCode");

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.Property(e => e.PkDisciplinecodeid).HasColumnName("pk_disciplinecodeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblDisciplineCode)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDisciplineCode_tblSubDiscipline");
            });

            modelBuilder.Entity<TblDisciplineType>(entity =>
            {
                entity.HasKey(e => e.PkDisciplinetypeid);

                entity.ToTable("tblDisciplineType");

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.Property(e => e.PkDisciplinetypeid).HasColumnName("pk_disciplinetypeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblDisciplineType)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDisciplineType_tblSubDiscipline");
            });

            modelBuilder.Entity<TblDn>(entity =>
            {
                entity.HasKey(e => e.PkDnid);

                entity.ToTable("tblDn");

                entity.HasIndex(e => new { e.Dndescription, e.Diadntype })
                    .HasName("UK_tblDn_dndescription_diadntype")
                    .IsUnique();

                entity.Property(e => e.PkDnid).HasColumnName("pk_dnid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Diadntype).HasColumnName("diadntype");

                entity.Property(e => e.Dndescription)
                    .IsRequired()
                    .HasColumnName("dndescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Dnvalue)
                    .HasColumnName("dnvalue")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDnAlternative>(entity =>
            {
                entity.HasKey(e => e.PkDnalternativeid);

                entity.ToTable("tblDnAlternative");

                entity.HasIndex(e => e.Dnalternativedescription)
                    .HasName("UC_tblDnAlternative_dnalternativedescription")
                    .IsUnique();

                entity.HasIndex(e => e.FkDnid);

                entity.Property(e => e.PkDnalternativeid).HasColumnName("pk_dnalternativeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dnalternativedescription)
                    .IsRequired()
                    .HasColumnName("dnalternativedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblDnAlternative)
                    .HasForeignKey(d => d.FkDnid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDnAlternative_fk_dnid");
            });

            modelBuilder.Entity<TblDocumentColumnMainGroup>(entity =>
            {
                entity.HasKey(e => e.PkDocumentcolumnmaingroupid);

                entity.ToTable("tblDocumentColumnMainGroup");

                entity.HasIndex(e => e.Documentcolumnmaingroupname)
                    .HasName("UK_tblDocumentColumnMainGroup")
                    .IsUnique();

                entity.Property(e => e.PkDocumentcolumnmaingroupid).HasColumnName("pk_documentcolumnmaingroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentcolumnmaingroupname)
                    .IsRequired()
                    .HasColumnName("documentcolumnmaingroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDocumentColumnSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkDocumentcolumnsubgroupid);

                entity.ToTable("tblDocumentColumnSubGroup");

                entity.HasIndex(e => e.FkDocumentcolumnmaingroupid);

                entity.HasIndex(e => new { e.FkDocumentcolumnmaingroupid, e.Documentcolumnsubgroupname })
                    .HasName("UK_tblDocumentColumnSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkDocumentcolumnsubgroupid).HasColumnName("pk_documentcolumnsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentcolumnsubgroupname)
                    .IsRequired()
                    .HasColumnName("documentcolumnsubgroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentcolumnmaingroupid).HasColumnName("fk_documentcolumnmaingroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentcolumnmaingroup)
                    .WithMany(p => p.TblDocumentColumnSubGroup)
                    .HasForeignKey(d => d.FkDocumentcolumnmaingroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentColumnSubGroup_tblDocumentColumnMainGroup");
            });

            modelBuilder.Entity<TblDocumentItem>(entity =>
            {
                entity.HasKey(e => e.PkDocumentitemid);

                entity.ToTable("tblDocumentItem");

                entity.HasIndex(e => e.FkDocumentitemsubgroupid);

                entity.HasIndex(e => new { e.FkDocumentitemsubgroupid, e.Documentitemdescription })
                    .HasName("UK_tblDocumentItem")
                    .IsUnique();

                entity.Property(e => e.PkDocumentitemid).HasColumnName("pk_documentitemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentitemdescription)
                    .IsRequired()
                    .HasColumnName("documentitemdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.FkDocumentitemsubgroupid).HasColumnName("fk_documentitemsubgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentitemsubgroup)
                    .WithMany(p => p.TblDocumentItem)
                    .HasForeignKey(d => d.FkDocumentitemsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentItem_tblDocumentItemSubGroup");
            });

            modelBuilder.Entity<TblDocumentItemDocumentColumnSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkDocumentitemdocumentcolumnsubgroupid);

                entity.ToTable("tblDocumentItemDocumentColumnSubGroup");

                entity.HasIndex(e => e.FkDocumentcolumnsubgroupid);

                entity.HasIndex(e => e.FkDocumentitemid);

                entity.HasIndex(e => new { e.FkDocumentitemid, e.FkDocumentcolumnsubgroupid })
                    .HasName("UK_tblDocumentItemDocumentColumnSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkDocumentitemdocumentcolumnsubgroupid).HasColumnName("pk_documentitemdocumentcolumnsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentcolumnsubgroupid).HasColumnName("fk_documentcolumnsubgroupid");

                entity.Property(e => e.FkDocumentitemid).HasColumnName("fk_documentitemid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentcolumnsubgroup)
                    .WithMany(p => p.TblDocumentItemDocumentColumnSubGroup)
                    .HasForeignKey(d => d.FkDocumentcolumnsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentItemDocumentColumnSubGroup_tblDocumentColumnSubGroup");

                entity.HasOne(d => d.FkDocumentitem)
                    .WithMany(p => p.TblDocumentItemDocumentColumnSubGroup)
                    .HasForeignKey(d => d.FkDocumentitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentItemDocumentColumnSubGroup_tblDocumentItem");
            });

            modelBuilder.Entity<TblDocumentItemMainGroup>(entity =>
            {
                entity.HasKey(e => e.PkDocumentitemmaingroupid);

                entity.ToTable("tblDocumentItemMainGroup");

                entity.HasIndex(e => e.Documentitemmaingroupname)
                    .HasName("UK_tblDocumentItemMainGroup")
                    .IsUnique();

                entity.Property(e => e.PkDocumentitemmaingroupid).HasColumnName("pk_documentitemmaingroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentitemmaingroupname)
                    .IsRequired()
                    .HasColumnName("documentitemmaingroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDocumentItemSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkDocumentitemsubgroupid);

                entity.ToTable("tblDocumentItemSubGroup");

                entity.HasIndex(e => e.FkDocumentitemmaingroupid);

                entity.HasIndex(e => new { e.FkDocumentitemmaingroupid, e.Documentitemsubgroupname })
                    .HasName("UK_tblDocumentItemSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkDocumentitemsubgroupid).HasColumnName("pk_documentitemsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentitemsubgroupname)
                    .IsRequired()
                    .HasColumnName("documentitemsubgroupname")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentitemmaingroupid).HasColumnName("fk_documentitemmaingroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentitemmaingroup)
                    .WithMany(p => p.TblDocumentItemSubGroup)
                    .HasForeignKey(d => d.FkDocumentitemmaingroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentItemSubGroup_tblDocumentItemMainGroup");
            });

            modelBuilder.Entity<TblDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkDocumentlabelid);

                entity.ToTable("tblDocumentLabel");

                entity.HasIndex(e => e.Documentlabelcode)
                    .HasName("UC_tblDocumentLabel_documentlabelcode")
                    .IsUnique();

                entity.HasIndex(e => e.Documentlabeldescription)
                    .HasName("UC_tblDocumentLabel_documentlabeldescription")
                    .IsUnique();

                entity.HasIndex(e => e.FkDocumentlabelgroupid);

                entity.Property(e => e.PkDocumentlabelid).HasColumnName("pk_documentlabelid");

                entity.Property(e => e.Blinditdocumentlabel).HasColumnName("blinditdocumentlabel");

                entity.Property(e => e.Changeitdocumentlabel).HasColumnName("changeitdocumentlabel");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentlabelcode)
                    .IsRequired()
                    .HasColumnName("documentlabelcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentlabeldescription)
                    .IsRequired()
                    .HasColumnName("documentlabeldescription")
                    .HasMaxLength(250);

                entity.Property(e => e.FkDocumentlabelgroupid).HasColumnName("fk_documentlabelgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permititdocumentlabel).HasColumnName("permititdocumentlabel");

                entity.Property(e => e.Scopeitrequestdocumentlabel).HasColumnName("scopeitrequestdocumentlabel");

                entity.Property(e => e.Welditrequestdocumentlabel).HasColumnName("welditrequestdocumentlabel");

                entity.HasOne(d => d.FkDocumentlabelgroup)
                    .WithMany(p => p.TblDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelgroupid)
                    .HasConstraintName("FK_tblDocumentLabel_tblDocumentLabelGroup");
            });

            modelBuilder.Entity<TblDocumentLabelDefault>(entity =>
            {
                entity.HasKey(e => e.PkDocumentlabeldefaultid);

                entity.ToTable("tblDocumentLabelDefault");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.Roserprogramattachmenttype)
                    .HasName("UK_tblDocumentLabelDefault")
                    .IsUnique();

                entity.Property(e => e.PkDocumentlabeldefaultid).HasColumnName("pk_documentlabeldefaultid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Roserprogramattachmenttype).HasColumnName("roserprogramattachmenttype");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblDocumentLabelDefault)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentLabelDefault_tblDocumentLabel");
            });

            modelBuilder.Entity<TblDocumentLabelGroup>(entity =>
            {
                entity.HasKey(e => e.PkDocumentlabelgroupid);

                entity.ToTable("tblDocumentLabelGroup");

                entity.Property(e => e.PkDocumentlabelgroupid).HasColumnName("pk_documentlabelgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentlabelgroup)
                    .IsRequired()
                    .HasColumnName("documentlabelgroup")
                    .HasMaxLength(150);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDocumentLabelShortcodeSubDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkDocumentlabelshortcodesubdisciplineid);

                entity.ToTable("tblDocumentLabelShortcodeSubDiscipline");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => new { e.FkDocumentlabelid, e.FkShortcodeid, e.FkSubdisciplineid })
                    .HasName("UC_tblDocumentLabel_Shortcode_SubDiscipline")
                    .IsUnique();

                entity.Property(e => e.PkDocumentlabelshortcodesubdisciplineid).HasColumnName("pk_documentlabelshortcodesubdisciplineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblDocumentLabelShortcodeSubDiscipline)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDocumentLabelShortcodeSubDiscipline_tblDocumentLabel");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblDocumentLabelShortcodeSubDiscipline)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .HasConstraintName("FK_tblDocumentLabelShortcodeSubDiscipline_tblShortcode");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblDocumentLabelShortcodeSubDiscipline)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .HasConstraintName("FK_tblDocumentLabelShortcodeSubDiscipline_tblSubDiscipline");
            });

            modelBuilder.Entity<TblDrawing>(entity =>
            {
                entity.HasKey(e => e.PkDrawingid);

                entity.ToTable("tblDrawing");

                entity.HasIndex(e => new { e.Enmdrawingtype, e.DkForeignkey })
                    .HasName("UQ_tblDrawing")
                    .IsUnique();

                entity.Property(e => e.PkDrawingid).HasColumnName("pk_drawingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkForeignkey).HasColumnName("dk_foreignkey");

                entity.Property(e => e.Enmdrawingtype).HasColumnName("enmdrawingtype");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblDrawingLayout>(entity =>
            {
                entity.HasKey(e => e.PkDrawinglayoutid);

                entity.ToTable("tblDrawingLayout");

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.HasIndex(e => e.FkWorkflowstatetransitionid);

                entity.Property(e => e.PkDrawinglayoutid).HasColumnName("pk_drawinglayoutid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.FkWorkflowstatetransitionid).HasColumnName("fk_workflowstatetransitionid");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Locationx).HasColumnName("locationx");

                entity.Property(e => e.Locationy).HasColumnName("locationy");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblDrawingLayout)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .HasConstraintName("FK_tblDrawingLayout_tblWorkflowState");

                entity.HasOne(d => d.FkWorkflowstatetransition)
                    .WithMany(p => p.TblDrawingLayout)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionid)
                    .HasConstraintName("FK_tblDrawingLayout_tblWorkflowStateTransition");
            });

            modelBuilder.Entity<TblDrawingObject>(entity =>
            {
                entity.HasKey(e => e.PkDrawingobjectid);

                entity.ToTable("tblDrawingObject");

                entity.HasIndex(e => e.FkDrawingid);

                entity.HasIndex(e => e.FkFromdrawingobjectid);

                entity.HasIndex(e => e.FkTodrawingobjectid);

                entity.Property(e => e.PkDrawingobjectid).HasColumnName("pk_drawingobjectid");

                entity.Property(e => e.Bordercolor).HasColumnName("bordercolor");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkForeignkey).HasColumnName("dk_foreignkey");

                entity.Property(e => e.Enmdrawingobjecttype).HasColumnName("enmdrawingobjecttype");

                entity.Property(e => e.Fillcolor).HasColumnName("fillcolor");

                entity.Property(e => e.FkDrawingid).HasColumnName("fk_drawingid");

                entity.Property(e => e.FkFromdrawingobjectid).HasColumnName("fk_fromdrawingobjectid");

                entity.Property(e => e.FkTodrawingobjectid).HasColumnName("fk_todrawingobjectid");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.HasOne(d => d.FkDrawing)
                    .WithMany(p => p.TblDrawingObject)
                    .HasForeignKey(d => d.FkDrawingid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDrawingObject_tblDrawing");

                entity.HasOne(d => d.FkFromdrawingobject)
                    .WithMany(p => p.InverseFkFromdrawingobject)
                    .HasForeignKey(d => d.FkFromdrawingobjectid)
                    .HasConstraintName("FK_tblDrawingObject_tblDrawingObject_from");

                entity.HasOne(d => d.FkTodrawingobject)
                    .WithMany(p => p.InverseFkTodrawingobject)
                    .HasForeignKey(d => d.FkTodrawingobjectid)
                    .HasConstraintName("FK_tblDrawingObject_tblDrawingObject_to");
            });

            modelBuilder.Entity<TblDrawingObjectPosition>(entity =>
            {
                entity.HasKey(e => e.PkDrawingobjectpositionid);

                entity.ToTable("tblDrawingObjectPosition");

                entity.HasIndex(e => e.FkDrawingobjectid);

                entity.Property(e => e.PkDrawingobjectpositionid).HasColumnName("pk_drawingobjectpositionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDrawingobjectid).HasColumnName("fk_drawingobjectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Posx).HasColumnName("posx");

                entity.Property(e => e.Posy).HasColumnName("posy");

                entity.HasOne(d => d.FkDrawingobject)
                    .WithMany(p => p.TblDrawingObjectPosition)
                    .HasForeignKey(d => d.FkDrawingobjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblDrawingObjectPosition_tblDrawingObject");
            });

            modelBuilder.Entity<TblEdge>(entity =>
            {
                entity.HasKey(e => e.PkEdgeid);

                entity.ToTable("tblEdge", "isolation");

                entity.Property(e => e.PkEdgeid).HasColumnName("pk_edgeid");

                entity.Property(e => e.FkIncomingnodeid).HasColumnName("fk_incomingnodeid");

                entity.Property(e => e.FkOutgoingnodeid).HasColumnName("fk_outgoingnodeid");

                entity.Property(e => e.FkTemplateblindpointgraphid).HasColumnName("fk_templateblindpointgraphid");

                entity.HasOne(d => d.FkIncomingnode)
                    .WithMany(p => p.TblEdgeFkIncomingnode)
                    .HasForeignKey(d => d.FkIncomingnodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Edge_IncomingNode");

                entity.HasOne(d => d.FkOutgoingnode)
                    .WithMany(p => p.TblEdgeFkOutgoingnode)
                    .HasForeignKey(d => d.FkOutgoingnodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Edge_OutgoingNode");

                entity.HasOne(d => d.FkTemplateblindpointgraph)
                    .WithMany(p => p.TblEdge)
                    .HasForeignKey(d => d.FkTemplateblindpointgraphid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Edge_TemplateBlindPointGraph");
            });

            modelBuilder.Entity<TblEffect>(entity =>
            {
                entity.HasKey(e => e.PkEffectid);

                entity.ToTable("tblEffect");

                entity.HasIndex(e => e.FkApplicationid);

                entity.Property(e => e.PkEffectid).HasColumnName("pk_effectid");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasColumnName("category")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500);

                entity.Property(e => e.Effectkey).HasColumnName("effectkey");

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblEffect)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblEffect_tblApplication");
            });

            modelBuilder.Entity<TblElevation>(entity =>
            {
                entity.HasKey(e => e.PkElevationid);

                entity.ToTable("tblElevation");

                entity.HasIndex(e => e.Elevationdescription)
                    .HasName("UK_tblElevation_description")
                    .IsUnique();

                entity.Property(e => e.PkElevationid).HasColumnName("pk_elevationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Elevationdescription)
                    .IsRequired()
                    .HasColumnName("elevationdescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblEquipmentCode>(entity =>
            {
                entity.HasKey(e => e.PkEquipmentcodeid);

                entity.ToTable("tblEquipmentCode");

                entity.HasIndex(e => e.Code)
                    .HasName("UK_tblEquipmentCode_code")
                    .IsUnique();

                entity.HasIndex(e => e.EquipmentcodedescriptionL1)
                    .HasName("UK_tblEquipmentCode_descr")
                    .IsUnique();

                entity.Property(e => e.PkEquipmentcodeid).HasColumnName("pk_equipmentcodeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.EquipmentcodedescriptionL1)
                    .IsRequired()
                    .HasColumnName("equipmentcodedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.EquipmentcodedescriptionL2)
                    .HasColumnName("equipmentcodedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.EquipmentcodedescriptionL3)
                    .HasColumnName("equipmentcodedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.EquipmentcodedescriptionL4)
                    .HasColumnName("equipmentcodedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.EquipmentcodedescriptionL5)
                    .HasColumnName("equipmentcodedescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblException>(entity =>
            {
                entity.HasKey(e => e.PkExceptionid);

                entity.ToTable("tblException");

                entity.Property(e => e.PkExceptionid).HasColumnName("pk_exceptionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Exceptiontype).HasColumnName("exceptiontype");

                entity.Property(e => e.Exceptionworkhours)
                    .HasColumnName("exceptionworkhours")
                    .HasMaxLength(168)
                    .IsUnicode(false);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Recurrencedayofmonth).HasColumnName("recurrencedayofmonth");

                entity.Property(e => e.Recurrenceend)
                    .HasColumnName("recurrenceend")
                    .HasColumnType("datetime");

                entity.Property(e => e.Recurrencemonth).HasColumnName("recurrencemonth");

                entity.Property(e => e.Recurrencenofoccurrences).HasColumnName("recurrencenofoccurrences");

                entity.Property(e => e.Recurrencepatterntype).HasColumnName("recurrencepatterntype");

                entity.Property(e => e.Recurrenceperiodday).HasColumnName("recurrenceperiodday");

                entity.Property(e => e.Recurrenceperiodmonth).HasColumnName("recurrenceperiodmonth");

                entity.Property(e => e.Recurrenceperiodtype).HasColumnName("recurrenceperiodtype");

                entity.Property(e => e.Recurrenceperiodweek).HasColumnName("recurrenceperiodweek");

                entity.Property(e => e.Recurrenceperiodyear).HasColumnName("recurrenceperiodyear");

                entity.Property(e => e.Recurrencestart)
                    .HasColumnName("recurrencestart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Recurrencetype).HasColumnName("recurrencetype");

                entity.Property(e => e.Recurrenceweekday).HasColumnName("recurrenceweekday");

                entity.Property(e => e.Recurrenceweekdayordinal).HasColumnName("recurrenceweekdayordinal");

                entity.Property(e => e.Validforallcalendars).HasColumnName("validforallcalendars");

                entity.Property(e => e.Validforallcontractors).HasColumnName("validforallcontractors");

                entity.Property(e => e.Validforallprojects).HasColumnName("validforallprojects");

                entity.Property(e => e.Validforallresources).HasColumnName("validforallresources");
            });

            modelBuilder.Entity<TblExceptionCalendar>(entity =>
            {
                entity.HasKey(e => e.PkExceptioncalendarid);

                entity.ToTable("tblExceptionCalendar");

                entity.HasIndex(e => e.FkCalendarid);

                entity.HasIndex(e => e.FkExceptionid);

                entity.Property(e => e.PkExceptioncalendarid).HasColumnName("pk_exceptioncalendarid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.FkExceptionid).HasColumnName("fk_exceptionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblExceptionCalendar)
                    .HasForeignKey(d => d.FkCalendarid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblExceptionCalendar_tblCalendar");

                entity.HasOne(d => d.FkException)
                    .WithMany(p => p.TblExceptionCalendar)
                    .HasForeignKey(d => d.FkExceptionid)
                    .HasConstraintName("FK_tblExceptionCalendar_tblException");
            });

            modelBuilder.Entity<TblExceptionContractor>(entity =>
            {
                entity.HasKey(e => e.PkExceptioncontractorid);

                entity.ToTable("tblExceptionContractor");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkExceptionid);

                entity.Property(e => e.PkExceptioncontractorid).HasColumnName("pk_exceptioncontractorid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkExceptionid).HasColumnName("fk_exceptionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblExceptionContractor)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblExceptionContractor_tblContractor");

                entity.HasOne(d => d.FkException)
                    .WithMany(p => p.TblExceptionContractor)
                    .HasForeignKey(d => d.FkExceptionid)
                    .HasConstraintName("FK_tblExceptionContractor_tblException");
            });

            modelBuilder.Entity<TblExceptionProject>(entity =>
            {
                entity.HasKey(e => e.PkExceptionprojectid);

                entity.ToTable("tblExceptionProject");

                entity.HasIndex(e => e.FkExceptionid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.FkExceptionid })
                    .HasName("UK_tblExceptionProject")
                    .IsUnique();

                entity.Property(e => e.PkExceptionprojectid).HasColumnName("pk_exceptionprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkExceptionid).HasColumnName("fk_exceptionid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkException)
                    .WithMany(p => p.TblExceptionProject)
                    .HasForeignKey(d => d.FkExceptionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblExceptionProject_tblException");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblExceptionProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblExceptionProject_tblProject");
            });

            modelBuilder.Entity<TblExceptionResource>(entity =>
            {
                entity.HasKey(e => e.PkExceptionresourceid);

                entity.ToTable("tblExceptionResource");

                entity.HasIndex(e => e.FkExceptionid);

                entity.HasIndex(e => e.FkResourceid);

                entity.Property(e => e.PkExceptionresourceid).HasColumnName("pk_exceptionresourceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkExceptionid).HasColumnName("fk_exceptionid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkException)
                    .WithMany(p => p.TblExceptionResource)
                    .HasForeignKey(d => d.FkExceptionid)
                    .HasConstraintName("FK_tblExceptionResource_tblException");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblExceptionResource)
                    .HasForeignKey(d => d.FkResourceid)
                    .HasConstraintName("FK_tblExceptionResource_tblResource");
            });

            modelBuilder.Entity<TblExecution>(entity =>
            {
                entity.HasKey(e => e.PkExecutionid);

                entity.ToTable("tblExecution");

                entity.HasIndex(e => e.Executioncode)
                    .HasName("UK_tblExecution")
                    .IsUnique();

                entity.Property(e => e.PkExecutionid).HasColumnName("pk_executionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Executioncode)
                    .IsRequired()
                    .HasColumnName("executioncode")
                    .HasMaxLength(50);

                entity.Property(e => e.Executiondescription)
                    .IsRequired()
                    .HasColumnName("executiondescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblFeatureScripts>(entity =>
            {
                entity.HasKey(e => e.PkFeaturescriptid);

                entity.ToTable("_tblFeatureScripts");

                entity.Property(e => e.PkFeaturescriptid).HasColumnName("pk_featurescriptid");

                entity.Property(e => e.Executed).HasColumnName("executed");

                entity.Property(e => e.Scriptname)
                    .IsRequired()
                    .HasColumnName("scriptname")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblFillerMaterial>(entity =>
            {
                entity.HasKey(e => e.PkFillermaterialid);

                entity.ToTable("tblFillerMaterial");

                entity.HasIndex(e => e.FkFillermaterialgroupid);

                entity.Property(e => e.PkFillermaterialid).HasColumnName("pk_fillermaterialid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fillermaterialdescription)
                    .IsRequired()
                    .HasColumnName("fillermaterialdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.FkFillermaterialgroupid).HasColumnName("fk_fillermaterialgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkFillermaterialgroup)
                    .WithMany(p => p.TblFillerMaterial)
                    .HasForeignKey(d => d.FkFillermaterialgroupid)
                    .HasConstraintName("FK_tblFillerMaterial_tblFillerMaterialGroup");
            });

            modelBuilder.Entity<TblFillerMaterialGroup>(entity =>
            {
                entity.HasKey(e => e.PkFillermaterialgroupid);

                entity.ToTable("tblFillerMaterialGroup");

                entity.HasIndex(e => e.Fillermaterialgroupcode)
                    .HasName("UK_tblFillerMaterialGroupCode")
                    .IsUnique();

                entity.Property(e => e.PkFillermaterialgroupid).HasColumnName("pk_fillermaterialgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fillermaterialgroupcode)
                    .IsRequired()
                    .HasColumnName("fillermaterialgroupcode")
                    .HasMaxLength(25);

                entity.Property(e => e.Fillermaterialgroupdescription)
                    .IsRequired()
                    .HasColumnName("fillermaterialgroupdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblFlangePicture>(entity =>
            {
                entity.HasKey(e => e.PkFlangepictureid);

                entity.ToTable("tblFlangePicture");

                entity.HasIndex(e => e.FkFlangesubtypeid);

                entity.HasIndex(e => e.FkFlangetypeid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => e.FkTorqtypeid);

                entity.HasIndex(e => new { e.FkFlangetypeid, e.FkFlangesubtypeid, e.FkTorqtypeid, e.FkTemplateblindpointid })
                    .HasName("UK_tblFlangePicture")
                    .IsUnique();

                entity.Property(e => e.PkFlangepictureid).HasColumnName("pk_flangepictureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkFlangesubtypeid).HasColumnName("fk_flangesubtypeid");

                entity.Property(e => e.FkFlangetypeid).HasColumnName("fk_flangetypeid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.FkTorqtypeid).HasColumnName("fk_torqtypeid");

                entity.Property(e => e.Flangeimage).HasColumnName("flangeimage");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkFlangesubtype)
                    .WithMany(p => p.TblFlangePicture)
                    .HasForeignKey(d => d.FkFlangesubtypeid)
                    .HasConstraintName("FK_tblFlangePicture_tblFlangeSubType");

                entity.HasOne(d => d.FkFlangetype)
                    .WithMany(p => p.TblFlangePicture)
                    .HasForeignKey(d => d.FkFlangetypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblFlangePicture_tblFlangeType");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblFlangePicture)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .HasConstraintName("FK_tblFlangePicture_tblTemplateBlindPoint");

                entity.HasOne(d => d.FkTorqtype)
                    .WithMany(p => p.TblFlangePicture)
                    .HasForeignKey(d => d.FkTorqtypeid)
                    .HasConstraintName("FK_tblFlangePicture_tblTorqType");
            });

            modelBuilder.Entity<TblFlangeSubType>(entity =>
            {
                entity.HasKey(e => e.PkFlangesubtypeid);

                entity.ToTable("tblFlangeSubType");

                entity.HasIndex(e => e.FkFlangetypeid);

                entity.HasIndex(e => new { e.FkFlangetypeid, e.Flangesubtypecode })
                    .HasName("UK_tblFlangeSubType_code")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkFlangetypeid, e.Flangesubtypedescription })
                    .HasName("UK_tblFlangeSubType_description")
                    .IsUnique();

                entity.Property(e => e.PkFlangesubtypeid).HasColumnName("pk_flangesubtypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkFlangetypeid).HasColumnName("fk_flangetypeid");

                entity.Property(e => e.Flangesubtypecode)
                    .IsRequired()
                    .HasColumnName("flangesubtypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Flangesubtypedescription)
                    .IsRequired()
                    .HasColumnName("flangesubtypedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkFlangetype)
                    .WithMany(p => p.TblFlangeSubType)
                    .HasForeignKey(d => d.FkFlangetypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblFlangeSubType_tblFlangeType");
            });

            modelBuilder.Entity<TblFlangeType>(entity =>
            {
                entity.HasKey(e => e.PkFlangetypeid);

                entity.ToTable("tblFlangeType");

                entity.HasIndex(e => e.Flangetypecode)
                    .HasName("UK_tblFlangeType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Flangetypedescription)
                    .HasName("UK_tblFlangeType_description")
                    .IsUnique();

                entity.Property(e => e.PkFlangetypeid).HasColumnName("pk_flangetypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Flangetypecode)
                    .IsRequired()
                    .HasColumnName("flangetypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Flangetypedescription)
                    .IsRequired()
                    .HasColumnName("flangetypedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblForecastUsersHrsWeek>(entity =>
            {
                entity.HasKey(e => e.PkForecastusershrsweekid);

                entity.ToTable("tblForecastUsersHrsWeek", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkForecastusershrsweekid).HasColumnName("pk_forecastusershrsweekid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Hrs).HasColumnName("hrs");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Yearweekdate)
                    .HasColumnName("yearweekdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblForecastUsersHrsWeek)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastUsersHrsWeek_fk_projectid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblForecastUsersHrsWeek)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastUsersHrsWeek_fk_userid");
            });

            modelBuilder.Entity<TblForecastUsersQtyWeek>(entity =>
            {
                entity.HasKey(e => e.PkForecastusersqtyweekid);

                entity.ToTable("tblForecastUsersQtyWeek", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkpreparationphaseid)
                    .HasName("IX_tblForecastUsersQtyWeek_fk_wpphaseid");

                entity.Property(e => e.PkForecastusersqtyweekid).HasColumnName("pk_forecastusersqtyweekid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkpreparationphaseid).HasColumnName("fk_workpreparationphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Yearweekdate)
                    .HasColumnName("yearweekdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblForecastUsersQtyWeek)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastUsersQtyWeek_fk_projectid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblForecastUsersQtyWeek)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastUsersQtyWeek_fk_userid");

                entity.HasOne(d => d.FkWorkpreparationphase)
                    .WithMany(p => p.TblForecastUsersQtyWeek)
                    .HasForeignKey(d => d.FkWorkpreparationphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastUsersQtyWeek_fk_workpreparationphaseid");
            });

            modelBuilder.Entity<TblForecastWpphases>(entity =>
            {
                entity.HasKey(e => e.PkForecastwpphasesid);

                entity.ToTable("tblForecastWpphases", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkWorkpreparationphaseid)
                    .HasName("IX_tblForecastWpphases_fk_wpphaseid");

                entity.Property(e => e.PkForecastwpphasesid).HasColumnName("pk_forecastwpphasesid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkWorkpreparationphaseid).HasColumnName("fk_workpreparationphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Yearweekdate)
                    .HasColumnName("yearweekdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblForecastWpphases)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastWpphases_fk_projectid");

                entity.HasOne(d => d.FkWorkpreparationphase)
                    .WithMany(p => p.TblForecastWpphases)
                    .HasForeignKey(d => d.FkWorkpreparationphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblForecastWpphases_fk_workpreparationphaseid");
            });

            modelBuilder.Entity<TblFormula>(entity =>
            {
                entity.HasKey(e => e.PkFormulaid);

                entity.ToTable("tblFormula");

                entity.HasIndex(e => e.Formulaname)
                    .HasName("UK_tblFormula")
                    .IsUnique();

                entity.Property(e => e.PkFormulaid).HasColumnName("pk_formulaid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Formula)
                    .IsRequired()
                    .HasColumnName("formula")
                    .HasMaxLength(100);

                entity.Property(e => e.Formulaname)
                    .IsRequired()
                    .HasColumnName("formulaname")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblFormulaParameter>(entity =>
            {
                entity.HasKey(e => e.PkFormulaparameterid);

                entity.ToTable("tblFormulaParameter");

                entity.HasIndex(e => e.FkFormulaid);

                entity.HasIndex(e => new { e.FkFormulaid, e.Formulaparameterid })
                    .HasName("UK_tblFormulaParameter")
                    .IsUnique();

                entity.Property(e => e.PkFormulaparameterid).HasColumnName("pk_formulaparameterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkFormulaid).HasColumnName("fk_formulaid");

                entity.Property(e => e.Formulaparameterid).HasColumnName("formulaparameterid");

                entity.Property(e => e.Formulaparametername)
                    .IsRequired()
                    .HasColumnName("formulaparametername")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkFormula)
                    .WithMany(p => p.TblFormulaParameter)
                    .HasForeignKey(d => d.FkFormulaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblFormulaParameter_tblFormula");
            });

            modelBuilder.Entity<TblFriction>(entity =>
            {
                entity.HasKey(e => e.PkFrictionid);

                entity.ToTable("tblFriction");

                entity.HasIndex(e => e.Frictioncode)
                    .HasName("UK_tblfriction_code")
                    .IsUnique();

                entity.HasIndex(e => e.Frictiondescription)
                    .HasName("UK_tblfriction_description")
                    .IsUnique();

                entity.Property(e => e.PkFrictionid).HasColumnName("pk_frictionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Frictioncode)
                    .IsRequired()
                    .HasColumnName("frictioncode")
                    .HasMaxLength(50);

                entity.Property(e => e.Frictiondescription)
                    .IsRequired()
                    .HasColumnName("frictiondescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblGasketType>(entity =>
            {
                entity.HasKey(e => e.PkGaskettypeid);

                entity.ToTable("tblGasketType");

                entity.HasIndex(e => e.Gaskettypecode)
                    .HasName("UK_tblGasketType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Gaskettypedescription)
                    .HasName("UK_tblGasketType_description")
                    .IsUnique();

                entity.Property(e => e.PkGaskettypeid).HasColumnName("pk_gaskettypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Gaskettypecode)
                    .IsRequired()
                    .HasColumnName("gaskettypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Gaskettypedescription)
                    .IsRequired()
                    .HasColumnName("gaskettypedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblGrid>(entity =>
            {
                entity.HasKey(e => e.PkGridid);

                entity.ToTable("tblGrid");

                entity.HasIndex(e => e.Gridcode)
                    .HasName("UK_tblGrid_code")
                    .IsUnique();

                entity.HasIndex(e => e.Griddescription)
                    .HasName("UK_tblGrid_description")
                    .IsUnique();

                entity.Property(e => e.PkGridid).HasColumnName("pk_gridid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Gridcode)
                    .IsRequired()
                    .HasColumnName("gridcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Griddescription)
                    .IsRequired()
                    .HasColumnName("griddescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblGridAdvViewinfo>(entity =>
            {
                entity.HasKey(e => e.PkGridadvviewinfoid);

                entity.ToTable("tblGridAdvViewinfo");

                entity.HasIndex(e => e.FkGridviewinfoid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkGridadvviewinfoid).HasColumnName("pk_gridadvviewinfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkGridviewinfoid).HasColumnName("fk_gridviewinfoid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Keyfield)
                    .IsRequired()
                    .HasColumnName("keyfield")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value");

                entity.HasOne(d => d.FkGridviewinfo)
                    .WithMany(p => p.TblGridAdvViewinfo)
                    .HasForeignKey(d => d.FkGridviewinfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblgridadvviewinfogridviewinfoid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblGridAdvViewinfo)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblGridAdvViewinfo_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblGridAdvViewinfo)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblGridAdvViewinfo_tblUser");
            });

            modelBuilder.Entity<TblGridFilterinfo>(entity =>
            {
                entity.HasKey(e => e.PkGridfilterinfoid);

                entity.ToTable("tblGridFilterinfo");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.Keyfield, e.FkProjectid, e.FkUserid, e.Name })
                    .HasName("IX_tblGridFilterinfo_U1")
                    .IsUnique();

                entity.Property(e => e.PkGridfilterinfoid).HasColumnName("pk_gridfilterinfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Keyfield)
                    .IsRequired()
                    .HasColumnName("keyfield")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblGridFilterinfo)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblGridFilterinfo_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblGridFilterinfo)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblGridFilterinfo_tblUser");
            });

            modelBuilder.Entity<TblGridSummary>(entity =>
            {
                entity.HasKey(e => e.PkGridsummaryid);

                entity.ToTable("tblGridSummary");

                entity.HasIndex(e => new { e.FkGridviewinfoid, e.Fieldname, e.Summarylocation, e.Summarytype })
                    .HasName("UK_tblGridViewInfo")
                    .IsUnique();

                entity.Property(e => e.PkGridsummaryid).HasColumnName("pk_gridsummaryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Displayformat)
                    .HasColumnName("displayformat")
                    .HasMaxLength(150);

                entity.Property(e => e.Fieldname)
                    .IsRequired()
                    .HasColumnName("fieldname")
                    .HasMaxLength(128);

                entity.Property(e => e.FkGridviewinfoid).HasColumnName("fk_gridviewinfoid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.Property(e => e.Summarylocation).HasColumnName("summarylocation");

                entity.Property(e => e.Summarytype).HasColumnName("summarytype");

                entity.HasOne(d => d.FkGridviewinfo)
                    .WithMany(p => p.TblGridSummary)
                    .HasForeignKey(d => d.FkGridviewinfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblGridViewInfo_tblGridSummary");
            });

            modelBuilder.Entity<TblGridViewinfo>(entity =>
            {
                entity.HasKey(e => e.PkGridviewinfoid);

                entity.ToTable("tblGridViewinfo");

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.Keyfield, e.FkUserid, e.Roserviewname })
                    .HasName("IX_tblGridViewinfo_U1")
                    .IsUnique();

                entity.Property(e => e.PkGridviewinfoid).HasColumnName("pk_gridviewinfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Keyfield)
                    .IsRequired()
                    .HasColumnName("keyfield")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Readonlyview).HasColumnName("readonlyview");

                entity.Property(e => e.Roserviewname)
                    .IsRequired()
                    .HasColumnName("roserviewname")
                    .HasMaxLength(50);

                entity.Property(e => e.Roserviewvalue)
                    .IsRequired()
                    .HasColumnName("roserviewvalue");

                entity.Property(e => e.Viewtype)
                    .IsRequired()
                    .HasColumnName("viewtype")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblGridViewinfo)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblGridViewinfo_tblUser");
            });

            modelBuilder.Entity<TblGridViewInfoActiveGridFilterInfo>(entity =>
            {
                entity.HasKey(e => e.PkGridviewinfoactivegridfilterinfoid);

                entity.ToTable("tblGridViewInfoActiveGridFilterInfo");

                entity.HasIndex(e => e.FkGridfilterinfoid);

                entity.HasIndex(e => e.FkGridviewinfoid);

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkGridviewinfoactivegridfilterinfoid).HasColumnName("pk_gridviewinfoactivegridfilterinfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkGridfilterinfoid).HasColumnName("fk_gridfilterinfoid");

                entity.Property(e => e.FkGridviewinfoid).HasColumnName("fk_gridviewinfoid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkGridfilterinfo)
                    .WithMany(p => p.TblGridViewInfoActiveGridFilterInfo)
                    .HasForeignKey(d => d.FkGridfilterinfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblgridviewinfogridfilterinfofilterinfoid");

                entity.HasOne(d => d.FkGridviewinfo)
                    .WithMany(p => p.TblGridViewInfoActiveGridFilterInfo)
                    .HasForeignKey(d => d.FkGridviewinfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblgridviewinfogridfilterinfogridviewinfoid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblGridViewInfoActiveGridFilterInfo)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblGridViewInfoActiveGridFilterInfo_tblProject");
            });

            modelBuilder.Entity<TblHandoverGroupMain>(entity =>
            {
                entity.HasKey(e => e.PkHandovergroupmainid);

                entity.ToTable("tblHandoverGroupMain");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Handovermaincode })
                    .HasName("UC_tblHandoverGroupMain")
                    .IsUnique();

                entity.Property(e => e.PkHandovergroupmainid).HasColumnName("pk_handovergroupmainid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Handovermaincode)
                    .IsRequired()
                    .HasColumnName("handovermaincode")
                    .HasMaxLength(10);

                entity.Property(e => e.HandovermaindescriptionL1)
                    .HasColumnName("handovermaindescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.HandovermaindescriptionL2)
                    .HasColumnName("handovermaindescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.HandovermaindescriptionL3)
                    .HasColumnName("handovermaindescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.HandovermaindescriptionL4)
                    .HasColumnName("handovermaindescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.HandovermaindescriptionL5)
                    .HasColumnName("handovermaindescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblHandoverGroupMain)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHandoverGroupMain_tblProject");
            });

            modelBuilder.Entity<TblHandoverGroupSub>(entity =>
            {
                entity.HasKey(e => e.PkHandovergroupsubid);

                entity.ToTable("tblHandoverGroupSub");

                entity.HasIndex(e => e.FkHandovergroupmainid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => new { e.FkHandovergroupmainid, e.Handoversubcode })
                    .HasName("UC_tblHandoverGroupSub")
                    .IsUnique();

                entity.Property(e => e.PkHandovergroupsubid).HasColumnName("pk_handovergroupsubid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHandovergroupmainid).HasColumnName("fk_handovergroupmainid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.Handoversubcode)
                    .IsRequired()
                    .HasColumnName("handoversubcode")
                    .HasMaxLength(10);

                entity.Property(e => e.HandoversubdescriptionL1)
                    .HasColumnName("handoversubdescription_l1")
                    .HasMaxLength(200);

                entity.Property(e => e.HandoversubdescriptionL2)
                    .HasColumnName("handoversubdescription_l2")
                    .HasMaxLength(200);

                entity.Property(e => e.HandoversubdescriptionL3)
                    .HasColumnName("handoversubdescription_l3")
                    .HasMaxLength(200);

                entity.Property(e => e.HandoversubdescriptionL4)
                    .HasColumnName("handoversubdescription_l4")
                    .HasMaxLength(200);

                entity.Property(e => e.HandoversubdescriptionL5)
                    .HasColumnName("handoversubdescription_l5")
                    .HasMaxLength(200);

                entity.Property(e => e.Hrs)
                    .HasColumnName("hrs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkHandovergroupmain)
                    .WithMany(p => p.TblHandoverGroupSub)
                    .HasForeignKey(d => d.FkHandovergroupmainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHandoverGroupSub_tblHandoverGroupMain");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblHandoverGroupSub)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHandoverGroupSub_tblResourceid");
            });

            modelBuilder.Entity<TblHazard>(entity =>
            {
                entity.HasKey(e => e.PkHazardid);

                entity.ToTable("tblHazard");

                entity.HasIndex(e => e.Hazardcode)
                    .HasName("UQ_tblHazard_code")
                    .IsUnique();

                entity.HasIndex(e => e.Hazarddescription)
                    .HasName("UQ_tblHazard_description")
                    .IsUnique();

                entity.Property(e => e.PkHazardid).HasColumnName("pk_hazardid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Hazardcode)
                    .IsRequired()
                    .HasColumnName("hazardcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Hazarddescription)
                    .IsRequired()
                    .HasColumnName("hazarddescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblHazardSymbol>(entity =>
            {
                entity.HasKey(e => e.PkHazardsymbolid);

                entity.ToTable("tblHazardSymbol");

                entity.HasIndex(e => e.FkHazardid);

                entity.HasIndex(e => e.FkSymbolid);

                entity.HasIndex(e => new { e.FkHazardid, e.FkSymbolid })
                    .HasName("UK_tblHazardSymbol")
                    .IsUnique();

                entity.Property(e => e.PkHazardsymbolid).HasColumnName("pk_hazardsymbolid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHazardid).HasColumnName("fk_hazardid");

                entity.Property(e => e.FkSymbolid).HasColumnName("fk_symbolid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkHazard)
                    .WithMany(p => p.TblHazardSymbol)
                    .HasForeignKey(d => d.FkHazardid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHazardSymbol_tblHazard");

                entity.HasOne(d => d.FkSymbol)
                    .WithMany(p => p.TblHazardSymbol)
                    .HasForeignKey(d => d.FkSymbolid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblHazardSymbol_tblSymbol");
            });

            ////modelBuilder.Entity<TblImportlog>(entity =>
            //{
            //    entity.HasKey(e => e.PkImportlogid);

            //    entity.ToTable("tblImportlog", "rsy");

            //    entity.Property(e => e.PkImportlogid).HasColumnName("pk_importlogid");

            //    entity.Property(e => e.Createcomputer)
            //        .IsRequired()
            //        .HasColumnName("createcomputer")
            //        .HasMaxLength(50);

            //    entity.Property(e => e.Createdate)
            //        .HasColumnName("createdate")
            //        .HasColumnType("datetime");

            //    entity.Property(e => e.Createuser)
            //        .IsRequired()
            //        .HasColumnName("createuser")
            //        .HasMaxLength(50);

            //    entity.Property(e => e.Importguid)
            //        .IsRequired()
            //        .HasColumnName("importguid")
            //        .HasColumnType("char(38)");

            //    entity.Property(e => e.Modifycomputer)
            //        .IsRequired()
            //        .HasColumnName("modifycomputer")
            //        .HasMaxLength(50);

            //    entity.Property(e => e.Modifydate)
            //        .HasColumnName("modifydate")
            //        .HasColumnType("datetime");

            //    entity.Property(e => e.Modifyuser)
            //        .IsRequired()
            //        .HasColumnName("modifyuser")
            //        .HasMaxLength(50);

            //    entity.Property(e => e.Olddb)
            //        .HasColumnName("olddb")
            //        .HasMaxLength(100);

            //    entity.Property(e => e.Oldid).HasColumnName("oldid");

            //    entity.Property(e => e.Roseruser)
            //        .IsRequired()
            //        .HasColumnName("roseruser")
            //        .HasMaxLength(100);
            //});

            modelBuilder.Entity<TblImportLog>(entity =>
            {
                entity.HasKey(e => e.PkImportlogid);

                entity.ToTable("tblImportLog");

                entity.HasIndex(e => e.FkImportuserid);

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkImportlogid).HasColumnName("pk_importlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkImportuserid).HasColumnName("fk_importuserid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Importguid)
                    .IsRequired()
                    .HasColumnName("importguid")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkImportuser)
                    .WithMany(p => p.TblImportLog)
                    .HasForeignKey(d => d.FkImportuserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblImportLog_tblUser");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblImportLog)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblImportLog_tblProject");
            });

            modelBuilder.Entity<TblIsolationActivityRevertReason>(entity =>
            {
                entity.HasKey(e => e.PkIsolationactivityrevertreasonid);

                entity.ToTable("tblIsolationActivityRevertReason");

                entity.HasIndex(e => e.FkBlindpointactivityid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkIsolationactivityrevertreasonid).HasColumnName("pk_isolationactivityrevertreasonid");

                entity.Property(e => e.Activitystatus).HasColumnName("activitystatus");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindpointactivityid).HasColumnName("fk_blindpointactivityid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revertreason)
                    .IsRequired()
                    .HasColumnName("revertreason")
                    .HasMaxLength(500);

                entity.HasOne(d => d.FkBlindpointactivity)
                    .WithMany(p => p.TblIsolationActivityRevertReason)
                    .HasForeignKey(d => d.FkBlindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIsolationActivityRevertReason_tblBlindPointActivity");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblIsolationActivityRevertReason)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblIsolationActivityRevertReason_tblUser");
            });

            modelBuilder.Entity<TblJfactorEffect>(entity =>
            {
                entity.HasKey(e => e.PkJfactoreffectid);

                entity.ToTable("tblJFactorEffect");

                entity.Property(e => e.PkJfactoreffectid).HasColumnName("pk_jfactoreffectid");

                entity.Property(e => e.Costs).HasColumnName("costs");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Damagedescription)
                    .IsRequired()
                    .HasColumnName("damagedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Environmentdescription)
                    .IsRequired()
                    .HasColumnName("environmentdescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Personeldescription)
                    .IsRequired()
                    .HasColumnName("personeldescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Reputationdescription)
                    .IsRequired()
                    .HasColumnName("reputationdescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblJfactorExposure>(entity =>
            {
                entity.HasKey(e => e.PkJfactorexposureid);

                entity.ToTable("tblJFactorExposure");

                entity.Property(e => e.PkJfactorexposureid).HasColumnName("pk_jfactorexposureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Jfactorexposuredescription)
                    .IsRequired()
                    .HasColumnName("jfactorexposuredescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("decimal(3, 2)");
            });

            modelBuilder.Entity<TblJfactorProbability>(entity =>
            {
                entity.HasKey(e => e.PkJfactorprobabilityid);

                entity.ToTable("tblJFactorProbability");

                entity.Property(e => e.PkJfactorprobabilityid).HasColumnName("pk_jfactorprobabilityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Jfactorprobabilitydescription)
                    .IsRequired()
                    .HasColumnName("jfactorprobabilitydescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Jfactorprobabilitypercentage).HasColumnName("jfactorprobabilitypercentage");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("decimal(3, 2)");
            });

            modelBuilder.Entity<TblJob>(entity =>
            {
                entity.HasKey(e => e.PkJobid);

                entity.ToTable("tblJob");

                entity.HasIndex(e => e.FkJobdataid);

                entity.Property(e => e.PkJobid).HasColumnName("pk_jobid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobdataid).HasColumnName("fk_jobdataid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkJobdata)
                    .WithMany(p => p.TblJob)
                    .HasForeignKey(d => d.FkJobdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJob_tblJobData");
            });

            modelBuilder.Entity<TblJobCustom>(entity =>
            {
                entity.HasKey(e => e.PkJobcustomid);

                entity.ToTable("tblJobCustom", "rsy");

                entity.HasIndex(e => e.Customjobcode)
                    .HasName("IX_tblJobCustom_U1")
                    .IsUnique();

                entity.Property(e => e.PkJobcustomid).HasColumnName("pk_jobcustomid");

                entity.Property(e => e.Customjobcode)
                    .IsRequired()
                    .HasColumnName("customjobcode")
                    .HasMaxLength(4);
            });

            modelBuilder.Entity<TblJobData>(entity =>
            {
                entity.HasKey(e => e.PkJobdataid);

                entity.ToTable("tblJobData");

                entity.HasIndex(e => e.FkCalendarid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.Property(e => e.PkJobdataid).HasColumnName("pk_jobdataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.Jobdatacalupdate)
                    .HasColumnName("jobdatacalupdate")
                    .HasMaxLength(100);

                entity.Property(e => e.JobdescriptionL1)
                    .IsRequired()
                    .HasColumnName("jobdescription_l1")
                    .HasMaxLength(250);

                entity.Property(e => e.JobdescriptionL2)
                    .HasColumnName("jobdescription_l2")
                    .HasMaxLength(250);

                entity.Property(e => e.JobdescriptionL3)
                    .HasColumnName("jobdescription_l3")
                    .HasMaxLength(250);

                entity.Property(e => e.JobdescriptionL4)
                    .HasColumnName("jobdescription_l4")
                    .HasMaxLength(250);

                entity.Property(e => e.JobdescriptionL5)
                    .HasColumnName("jobdescription_l5")
                    .HasMaxLength(250);

                entity.Property(e => e.Jobduration)
                    .HasColumnName("jobduration")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Jobhours)
                    .HasColumnName("jobhours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.JobmemoL1).HasColumnName("jobmemo_l1");

                entity.Property(e => e.JobmemoL2).HasColumnName("jobmemo_l2");

                entity.Property(e => e.JobmemoL3).HasColumnName("jobmemo_l3");

                entity.Property(e => e.JobmemoL4).HasColumnName("jobmemo_l4");

                entity.Property(e => e.JobmemoL5).HasColumnName("jobmemo_l5");

                entity.Property(e => e.Jobnotapplicableforpermit).HasColumnName("jobnotapplicableforpermit");

                entity.Property(e => e.Joboperation)
                    .HasColumnName("joboperation")
                    .HasMaxLength(4);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblJobData)
                    .HasForeignKey(d => d.FkCalendarid)
                    .HasConstraintName("FK_tblJobData_tblCalendar");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblJobData)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobData_tblMainPhase");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblJobData)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobData_tblSubDiscipline");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblJobData)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobData_tblSubPhase");
            });

            modelBuilder.Entity<TblJobDetail>(entity =>
            {
                entity.HasKey(e => e.PkJobdetailid);

                entity.ToTable("tblJobDetail");

                entity.HasIndex(e => e.FkJobdetaildataid);

                entity.HasIndex(e => e.FkJobid);

                entity.Property(e => e.PkJobdetailid).HasColumnName("pk_jobdetailid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobdetaildataid).HasColumnName("fk_jobdetaildataid");

                entity.Property(e => e.FkJobid).HasColumnName("fk_jobid");

                entity.Property(e => e.Jobdetailsortorder).HasColumnName("jobdetailsortorder");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkJobdetaildata)
                    .WithMany(p => p.TblJobDetail)
                    .HasForeignKey(d => d.FkJobdetaildataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetail_tblJobDetailData");

                entity.HasOne(d => d.FkJob)
                    .WithMany(p => p.TblJobDetail)
                    .HasForeignKey(d => d.FkJobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetail_tblJob");
            });

            modelBuilder.Entity<TblJobDetailData>(entity =>
            {
                entity.HasKey(e => e.PkJobdetaildataid);

                entity.ToTable("tblJobDetailData");

                entity.HasIndex(e => e.FkAreacodeid);

                entity.HasIndex(e => e.FkBuildingid);

                entity.HasIndex(e => e.FkElevationunitofmeasurementid)
                    .HasName("IX_tblJobDetailData_fk_elevationuomid");

                entity.Property(e => e.PkJobdetaildataid).HasColumnName("pk_jobdetaildataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkAreacodeid).HasColumnName("fk_areacodeid");

                entity.Property(e => e.FkBuildingid).HasColumnName("fk_buildingid");

                entity.Property(e => e.FkElevationunitofmeasurementid).HasColumnName("fk_elevationunitofmeasurementid");

                entity.Property(e => e.Jobdetailelevation)
                    .HasColumnName("jobdetailelevation")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Jobdetaillocation)
                    .HasColumnName("jobdetaillocation")
                    .HasMaxLength(500);

                entity.Property(e => e.Jobdetailmemo).HasColumnName("jobdetailmemo");

                entity.Property(e => e.Jobdetailname)
                    .HasColumnName("jobdetailname")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkAreacode)
                    .WithMany(p => p.TblJobDetailData)
                    .HasForeignKey(d => d.FkAreacodeid)
                    .HasConstraintName("FK_tblJobDetailData_tblAreaCode");

                entity.HasOne(d => d.FkBuilding)
                    .WithMany(p => p.TblJobDetailData)
                    .HasForeignKey(d => d.FkBuildingid)
                    .HasConstraintName("FK_tblJobDetailData_tblBuilding");

                entity.HasOne(d => d.FkElevationunitofmeasurement)
                    .WithMany(p => p.TblJobDetailData)
                    .HasForeignKey(d => d.FkElevationunitofmeasurementid)
                    .HasConstraintName("FK_tblJobDetailData_tblUnitOfMeasurement");
            });

            modelBuilder.Entity<TblJobDetailResource>(entity =>
            {
                entity.HasKey(e => e.PkJobdetailresourceid);

                entity.ToTable("tblJobDetailResource");

                entity.HasIndex(e => e.FkJobdetailid);

                entity.HasIndex(e => e.FkJobdetailresourcedataid);

                entity.HasIndex(e => e.FkLibraryprocurementcontractid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => new { e.FkJobdetailid, e.FkResourceid })
                    .HasName("UK_tblJobDetailResource")
                    .IsUnique();

                entity.Property(e => e.PkJobdetailresourceid).HasColumnName("pk_jobdetailresourceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobdetailid).HasColumnName("fk_jobdetailid");

                entity.Property(e => e.FkJobdetailresourcedataid).HasColumnName("fk_jobdetailresourcedataid");

                entity.Property(e => e.FkLibraryprocurementcontractid).HasColumnName("fk_libraryprocurementcontractid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.Jobdetailresourcehours)
                    .HasColumnName("jobdetailresourcehours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Jobdetailresourcesortorder).HasColumnName("jobdetailresourcesortorder");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkJobdetail)
                    .WithMany(p => p.TblJobDetailResource)
                    .HasForeignKey(d => d.FkJobdetailid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetailResource_tblJobDetail");

                entity.HasOne(d => d.FkJobdetailresourcedata)
                    .WithMany(p => p.TblJobDetailResource)
                    .HasForeignKey(d => d.FkJobdetailresourcedataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetailResource_tblJobDetailResourceData");

                entity.HasOne(d => d.FkLibraryprocurementcontract)
                    .WithMany(p => p.TblJobDetailResource)
                    .HasForeignKey(d => d.FkLibraryprocurementcontractid)
                    .HasConstraintName("FK_tblJobDetailResource_tblLibraryProcurementContract");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblJobDetailResource)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetailResource_tblResource");
            });

            modelBuilder.Entity<TblJobDetailResourceData>(entity =>
            {
                entity.HasKey(e => e.PkJobdetailresourcedataid);

                entity.ToTable("tblJobDetailResourceData");

                entity.Property(e => e.PkJobdetailresourcedataid).HasColumnName("pk_jobdetailresourcedataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Jobdetailresourcecrew).HasColumnName("jobdetailresourcecrew");

                entity.Property(e => e.Jobdetailresourcememo).HasColumnName("jobdetailresourcememo");

                entity.Property(e => e.Jobdetailresourcequalitycontrol)
                    .HasColumnName("jobdetailresourcequalitycontrol")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblJobDetailResourceSmartCalculation>(entity =>
            {
                entity.HasKey(e => e.PkJobdetailresourcesmartcalculationid);

                entity.ToTable("tblJobDetailResourceSmartCalculation");

                entity.HasIndex(e => e.FkCalcgroupmainid);

                entity.HasIndex(e => e.FkCalcgroupsubid);

                entity.HasIndex(e => e.FkJobdetailresourceid);

                entity.HasIndex(e => e.FkPlantcustomdiaid);

                entity.HasIndex(e => e.FkPlantcustomdnid);

                entity.HasIndex(e => e.FkPlantcustomid);

                entity.HasIndex(e => e.FkPlantcustomlbsid);

                entity.HasIndex(e => e.FkPlantcustompnid);

                entity.HasIndex(e => e.FkPlantcustomquantityid);

                entity.Property(e => e.PkJobdetailresourcesmartcalculationid).HasColumnName("pk_jobdetailresourcesmartcalculationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalcgroupmainid).HasColumnName("fk_calcgroupmainid");

                entity.Property(e => e.FkCalcgroupsubid).HasColumnName("fk_calcgroupsubid");

                entity.Property(e => e.FkJobdetailresourceid).HasColumnName("fk_jobdetailresourceid");

                entity.Property(e => e.FkPlantcustomdiaid).HasColumnName("fk_plantcustomdiaid");

                entity.Property(e => e.FkPlantcustomdnid).HasColumnName("fk_plantcustomdnid");

                entity.Property(e => e.FkPlantcustomid).HasColumnName("fk_plantcustomid");

                entity.Property(e => e.FkPlantcustomlbsid).HasColumnName("fk_plantcustomlbsid");

                entity.Property(e => e.FkPlantcustompnid).HasColumnName("fk_plantcustompnid");

                entity.Property(e => e.FkPlantcustomquantityid).HasColumnName("fk_plantcustomquantityid");

                entity.Property(e => e.Jobdetailresourcesmartcalculationquantity)
                    .HasColumnName("jobdetailresourcesmartcalculationquantity")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalcgroupmain)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculation)
                    .HasForeignKey(d => d.FkCalcgroupmainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblCalcGroupMain");

                entity.HasOne(d => d.FkCalcgroupsub)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculation)
                    .HasForeignKey(d => d.FkCalcgroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblCalcGroupSub");

                entity.HasOne(d => d.FkJobdetailresource)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculation)
                    .HasForeignKey(d => d.FkJobdetailresourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblJobDetailResource");

                entity.HasOne(d => d.FkPlantcustomdia)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculationFkPlantcustomdia)
                    .HasForeignKey(d => d.FkPlantcustomdiaid)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblPlantCustom_dia");

                entity.HasOne(d => d.FkPlantcustomdn)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculationFkPlantcustomdn)
                    .HasForeignKey(d => d.FkPlantcustomdnid)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblPlantCustom_dn");

                entity.HasOne(d => d.FkPlantcustom)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculationFkPlantcustom)
                    .HasForeignKey(d => d.FkPlantcustomid)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblPlantCustom");

                entity.HasOne(d => d.FkPlantcustomlbs)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculationFkPlantcustomlbs)
                    .HasForeignKey(d => d.FkPlantcustomlbsid)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblPlantCustom_lbs");

                entity.HasOne(d => d.FkPlantcustompn)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculationFkPlantcustompn)
                    .HasForeignKey(d => d.FkPlantcustompnid)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblPlantCustom_pn");

                entity.HasOne(d => d.FkPlantcustomquantity)
                    .WithMany(p => p.TblJobDetailResourceSmartCalculationFkPlantcustomquantity)
                    .HasForeignKey(d => d.FkPlantcustomquantityid)
                    .HasConstraintName("FK_tblJobDetailResourceSmartCalculation_tblPlantCustom_quantity");
            });

            modelBuilder.Entity<TblJustificationCaption>(entity =>
            {
                entity.HasKey(e => e.PkJustificationcaptionid);

                entity.ToTable("tblJustificationCaption");

                entity.HasIndex(e => e.Checkboxnr)
                    .HasName("UK_CheckboxNr")
                    .IsUnique();

                entity.Property(e => e.PkJustificationcaptionid).HasColumnName("pk_justificationcaptionid");

                entity.Property(e => e.Checkboxnr).HasColumnName("checkboxnr");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Justificationcaptiondescription)
                    .IsRequired()
                    .HasColumnName("justificationcaptiondescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblJustificationCombo>(entity =>
            {
                entity.HasKey(e => e.PkJustificationcomboid);

                entity.ToTable("tblJustificationCombo");

                entity.Property(e => e.PkJustificationcomboid).HasColumnName("pk_justificationcomboid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Justificationshortcode)
                    .IsRequired()
                    .HasColumnName("justificationshortcode")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblKpisetting>(entity =>
            {
                entity.HasKey(e => e.PkKpisettingid);

                entity.ToTable("tblKPISetting");

                entity.HasIndex(e => e.FkEndworkflowstateid);

                entity.HasIndex(e => e.FkStartworkflowstateid);

                entity.HasIndex(e => e.Settingdescription)
                    .HasName("UK_tblKPISetting")
                    .IsUnique();

                entity.Property(e => e.PkKpisettingid).HasColumnName("pk_kpisettingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkEndworkflowstateid).HasColumnName("fk_endworkflowstateid");

                entity.Property(e => e.FkStartworkflowstateid).HasColumnName("fk_startworkflowstateid");

                entity.Property(e => e.Kpimeasurevalue).HasColumnName("kpimeasurevalue");

                entity.Property(e => e.Kpitype).HasColumnName("kpitype");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Settingdescription)
                    .IsRequired()
                    .HasColumnName("settingdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Settingvaluered).HasColumnName("settingvaluered");

                entity.Property(e => e.Settingvalueyellow).HasColumnName("settingvalueyellow");

                entity.HasOne(d => d.FkEndworkflowstate)
                    .WithMany(p => p.TblKpisettingFkEndworkflowstate)
                    .HasForeignKey(d => d.FkEndworkflowstateid)
                    .HasConstraintName("FK_tblKPISetting_tblWorkflowState_End");

                entity.HasOne(d => d.FkStartworkflowstate)
                    .WithMany(p => p.TblKpisettingFkStartworkflowstate)
                    .HasForeignKey(d => d.FkStartworkflowstateid)
                    .HasConstraintName("FK_tblKPISetting_tblWorkflowState_Start");
            });

            modelBuilder.Entity<TblLabel>(entity =>
            {
                entity.HasKey(e => e.PkLabelid);

                entity.ToTable("tblLabel");

                entity.HasIndex(e => e.FkApplicationid)
                    .HasName("IX_tblLabel_Fk_tblLabel_tblApplication");

                entity.HasIndex(e => new { e.Labeldescription, e.FkApplicationid, e.FkProjectid })
                    .HasName("uc_tblLabel_labeldescription")
                    .IsUnique();

                entity.Property(e => e.PkLabelid).HasColumnName("pk_labelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Labeldescription)
                    .IsRequired()
                    .HasColumnName("labeldescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblLabel)
                    .HasForeignKey(d => d.FkApplicationid)
                    .HasConstraintName("FK_tblLabel_tblApplication");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblLabel)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblLabel_tblProject");
            });

            modelBuilder.Entity<TblLabels>(entity =>
            {
                entity.HasKey(e => e.PkLabelsid);

                entity.ToTable("tblLabels");

                entity.HasIndex(e => e.Description)
                    .HasName("IX_tblLabels")
                    .IsUnique();

                entity.Property(e => e.PkLabelsid).HasColumnName("pk_labelsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLanguage>(entity =>
            {
                entity.HasKey(e => e.PkLanguageid);

                entity.ToTable("tblLanguage");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ_tblLanguage")
                    .IsUnique();

                entity.Property(e => e.PkLanguageid).HasColumnName("pk_languageid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(20);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Fontfamily)
                    .HasColumnName("fontfamily")
                    .HasMaxLength(150);

                entity.Property(e => e.Image).HasColumnName("image");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLbs>(entity =>
            {
                entity.HasKey(e => e.PkLbsid);

                entity.ToTable("tblLbs");

                entity.HasIndex(e => e.Lbsdescription)
                    .HasName("UK_tblLbs_lbsdescription")
                    .IsUnique();

                entity.Property(e => e.PkLbsid).HasColumnName("pk_lbsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Lbsdescription)
                    .IsRequired()
                    .HasColumnName("lbsdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Lbsvalue)
                    .HasColumnName("lbsvalue")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLbsAlternative>(entity =>
            {
                entity.HasKey(e => e.PkLbsalternativeid);

                entity.ToTable("tblLbsAlternative");

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.Lbsalternativedescription)
                    .HasName("UC_tblLbsAlternative_lbsalternativedescription")
                    .IsUnique();

                entity.Property(e => e.PkLbsalternativeid).HasColumnName("pk_lbsalternativeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.Lbsalternativedescription)
                    .IsRequired()
                    .HasColumnName("lbsalternativedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblLbsAlternative)
                    .HasForeignKey(d => d.FkLbsid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLbsAlternative_fk_lbsid");
            });

            modelBuilder.Entity<TblLibraryActiveJob>(entity =>
            {
                entity.HasKey(e => e.PkLibraryactivejobid);

                entity.ToTable("tblLibraryActiveJob");

                entity.HasIndex(e => e.FkLibraryjobid)
                    .HasName("UK_tblLibraryActiveJob_fk_libraryjobid")
                    .IsUnique();

                entity.Property(e => e.PkLibraryactivejobid).HasColumnName("pk_libraryactivejobid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryjobid).HasColumnName("fk_libraryjobid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryjob)
                    .WithOne(p => p.TblLibraryActiveJob)
                    .HasForeignKey<TblLibraryActiveJob>(d => d.FkLibraryjobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryActiveJob_tblLibraryJob");
            });

            modelBuilder.Entity<TblLibraryActiveProcurementContract>(entity =>
            {
                entity.HasKey(e => e.PkLibraryactiveprocurementcontractid);

                entity.ToTable("tblLibraryActiveProcurementContract");

                entity.HasIndex(e => e.FkLibraryprocurementcontractid)
                    .HasName("UK_tblLibraryActiveProcurementContract_fk_libraryprocurementcontractid")
                    .IsUnique();

                entity.Property(e => e.PkLibraryactiveprocurementcontractid).HasColumnName("pk_libraryactiveprocurementcontractid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryprocurementcontractid).HasColumnName("fk_libraryprocurementcontractid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryprocurementcontract)
                    .WithOne(p => p.TblLibraryActiveProcurementContract)
                    .HasForeignKey<TblLibraryActiveProcurementContract>(d => d.FkLibraryprocurementcontractid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryActiveProcurementContract_tblLibraryProcurementContract");
            });

            modelBuilder.Entity<TblLibraryActiveScopeTemplate>(entity =>
            {
                entity.HasKey(e => e.PkLibraryactivescopetemplateid);

                entity.ToTable("tblLibraryActiveScopeTemplate");

                entity.HasIndex(e => e.FkLibraryscopetemplateid)
                    .HasName("UK_newLibraryActiveScopeTemplate_fk_libraryscopetemplateid")
                    .IsUnique();

                entity.Property(e => e.PkLibraryactivescopetemplateid).HasColumnName("pk_libraryactivescopetemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryscopetemplateid).HasColumnName("fk_libraryscopetemplateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryscopetemplate)
                    .WithOne(p => p.TblLibraryActiveScopeTemplate)
                    .HasForeignKey<TblLibraryActiveScopeTemplate>(d => d.FkLibraryscopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryActiveScopeTemplate_tblLibraryScopeTemlate");
            });

            modelBuilder.Entity<TblLibraryActiveScopeTemplateActive>(entity =>
            {
                entity.HasKey(e => e.PkLibraryactivescopetemplateactiveid);

                entity.ToTable("tblLibraryActiveScopeTemplateActive");

                entity.HasIndex(e => e.FkLibraryactivescopetemplateid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkLibraryactivescopetemplateid, e.FkProjectid })
                    .HasName("UK_tblLibraryActiveScopeTemplateActive")
                    .IsUnique();

                entity.Property(e => e.PkLibraryactivescopetemplateactiveid).HasColumnName("pk_libraryactivescopetemplateactiveid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactivescopetemplateid).HasColumnName("fk_libraryactivescopetemplateid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryactivescopetemplate)
                    .WithMany(p => p.TblLibraryActiveScopeTemplateActive)
                    .HasForeignKey(d => d.FkLibraryactivescopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryActiveScopeTemplateActive_tblLibraryActiveScopeTemplate");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblLibraryActiveScopeTemplateActive)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryActiveScopeTemplateActive_tblProject");
            });

            modelBuilder.Entity<TblLibraryActiveScopeTemplateTasklist>(entity =>
            {
                entity.HasKey(e => e.PkLibraryactivescopetemplatetasklistid);

                entity.ToTable("tblLibraryActiveScopeTemplateTasklist");

                entity.HasIndex(e => e.FkLibraryactivescopetemplateid)
                    .HasName("UK_tblLibraryActiveScopeTemplateTasklist_fk_libraryactivescopetemplateid")
                    .IsUnique();

                entity.HasIndex(e => e.Tasklist)
                    .HasName("UK_tblLibraryActiveScopeTemplateTasklist_tasklist")
                    .IsUnique();

                entity.Property(e => e.PkLibraryactivescopetemplatetasklistid).HasColumnName("pk_libraryactivescopetemplatetasklistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactivescopetemplateid).HasColumnName("fk_libraryactivescopetemplateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Tasklist)
                    .IsRequired()
                    .HasColumnName("tasklist")
                    .HasMaxLength(75);

                entity.HasOne(d => d.FkLibraryactivescopetemplate)
                    .WithOne(p => p.TblLibraryActiveScopeTemplateTasklist)
                    .HasForeignKey<TblLibraryActiveScopeTemplateTasklist>(d => d.FkLibraryactivescopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryActiveScopeTemplateTasklist_tblLibraryActiveScopeTemplate");
            });

            modelBuilder.Entity<TblLibraryJob>(entity =>
            {
                entity.HasKey(e => e.PkLibraryjobid);

                entity.ToTable("tblLibraryJob");

                entity.HasIndex(e => e.FkJobid);

                entity.HasIndex(e => e.FkLibraryjobrevisioninfoid);

                entity.HasIndex(e => e.Libraryjobcode);

                entity.HasIndex(e => new { e.FkLibraryjobrevisioninfoid, e.Libraryjobcode })
                    .HasName("UK_tblLibraryJob")
                    .IsUnique();

                entity.Property(e => e.PkLibraryjobid).HasColumnName("pk_libraryjobid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobid).HasColumnName("fk_jobid");

                entity.Property(e => e.FkLibraryjobrevisioninfoid).HasColumnName("fk_libraryjobrevisioninfoid");

                entity.Property(e => e.Libraryjobcode)
                    .IsRequired()
                    .HasColumnName("libraryjobcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Publishedcomputer)
                    .HasColumnName("publishedcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Publisheddate)
                    .HasColumnName("publisheddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Publisheduser)
                    .HasColumnName("publisheduser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkJob)
                    .WithMany(p => p.TblLibraryJob)
                    .HasForeignKey(d => d.FkJobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryJob_tblJob");

                entity.HasOne(d => d.FkLibraryjobrevisioninfo)
                    .WithMany(p => p.TblLibraryJob)
                    .HasForeignKey(d => d.FkLibraryjobrevisioninfoid)
                    .HasConstraintName("FK_tblLibraryJob_tblLibraryJobRevisionInfo");
            });

            modelBuilder.Entity<TblLibraryJobRevisionInfo>(entity =>
            {
                entity.HasKey(e => e.PkLibraryjobrevisioninfoid);

                entity.ToTable("tblLibraryJobRevisionInfo");

                entity.HasIndex(e => e.FkLibraryactivejobid);

                entity.HasIndex(e => e.FkRevisioninfoid)
                    .HasName("UK_tblLibraryJobRevisionInfo_fk_revisioninfoid")
                    .IsUnique();

                entity.Property(e => e.PkLibraryjobrevisioninfoid).HasColumnName("pk_libraryjobrevisioninfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactivejobid).HasColumnName("fk_libraryactivejobid");

                entity.Property(e => e.FkRevisioninfoid).HasColumnName("fk_revisioninfoid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryactivejob)
                    .WithMany(p => p.TblLibraryJobRevisionInfo)
                    .HasForeignKey(d => d.FkLibraryactivejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryJobRevisionInfo_tblLibraryActiveJob");

                entity.HasOne(d => d.FkRevisioninfo)
                    .WithOne(p => p.TblLibraryJobRevisionInfo)
                    .HasForeignKey<TblLibraryJobRevisionInfo>(d => d.FkRevisioninfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryJobRevisionInfo_tblRevisionInfo");
            });

            modelBuilder.Entity<TblLibraryJobXref>(entity =>
            {
                entity.HasKey(e => e.PkLibraryjobxrefid);

                entity.ToTable("tblLibraryJobXref");

                entity.HasIndex(e => e.FkLibraryactivejobid1)
                    .HasName("UK_tblLibraryJobXref_fk_libraryactivejobid1")
                    .IsUnique();

                entity.HasIndex(e => e.FkLibraryactivejobid2)
                    .HasName("UK_tblLibraryJobXref_fk_libraryactivejobid2")
                    .IsUnique();

                entity.Property(e => e.PkLibraryjobxrefid).HasColumnName("pk_libraryjobxrefid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactivejobid1).HasColumnName("fk_libraryactivejobid1");

                entity.Property(e => e.FkLibraryactivejobid2).HasColumnName("fk_libraryactivejobid2");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryactivejobid1Navigation)
                    .WithOne(p => p.TblLibraryJobXrefFkLibraryactivejobid1Navigation)
                    .HasForeignKey<TblLibraryJobXref>(d => d.FkLibraryactivejobid1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryJobXref_tblLibraryActiveJob_1");

                entity.HasOne(d => d.FkLibraryactivejobid2Navigation)
                    .WithOne(p => p.TblLibraryJobXrefFkLibraryactivejobid2Navigation)
                    .HasForeignKey<TblLibraryJobXref>(d => d.FkLibraryactivejobid2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryJobXref_tblLibraryActiveJob_2");
            });

            modelBuilder.Entity<TblLibraryProcurementContract>(entity =>
            {
                entity.HasKey(e => e.PkLibraryprocurementcontractid);

                entity.ToTable("tblLibraryProcurementContract");

                entity.HasIndex(e => e.Contractnumber);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkLibraryprocurementcontractrevisioninfoid);

                entity.HasIndex(e => e.FkProcurementaccountcodeid);

                entity.HasIndex(e => e.FkProcurementcodeid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => new { e.FkLibraryprocurementcontractrevisioninfoid, e.FkUniquecheckprojectid, e.Contractnumber })
                    .HasName("UK_tblLibraryProcurementContract_2")
                    .IsUnique();

                entity.HasIndex(e => new { e.PkLibraryprocurementcontractid, e.Contractcorrectionfactor, e.FkUniquecheckprojectid })
                    .HasName("IX_tblLibraryProcurementContract_fk_uniquecheckprojectid_with_includes");

                entity.HasIndex(e => new { e.FkLibraryprocurementcontractrevisioninfoid, e.FkUniquecheckprojectid, e.FkSubdisciplineid, e.FkContractorid })
                    .HasName("UK_tblLibraryProcurementContract_1")
                    .IsUnique();

                entity.Property(e => e.PkLibraryprocurementcontractid).HasColumnName("pk_libraryprocurementcontractid");

                entity.Property(e => e.Contractcorrectionfactor)
                    .HasColumnName("contractcorrectionfactor")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Contractdescription).HasColumnName("contractdescription");

                entity.Property(e => e.Contractisprojectcustom).HasColumnName("contractisprojectcustom");

                entity.Property(e => e.Contractnumber).HasColumnName("contractnumber");

                entity.Property(e => e.Contractprefix)
                    .IsRequired()
                    .HasColumnName("contractprefix")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkLibraryprocurementcontractrevisioninfoid).HasColumnName("fk_libraryprocurementcontractrevisioninfoid");

                entity.Property(e => e.FkProcurementaccountcodeid).HasColumnName("fk_procurementaccountcodeid");

                entity.Property(e => e.FkProcurementcodeid).HasColumnName("fk_procurementcodeid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkUniquecheckprojectid).HasColumnName("fk_uniquecheckprojectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Publishedcomputer)
                    .HasColumnName("publishedcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Publisheddate)
                    .HasColumnName("publisheddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Publisheduser)
                    .HasColumnName("publisheduser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblLibraryProcurementContract)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContract_tblContractor");

                entity.HasOne(d => d.FkLibraryprocurementcontractrevisioninfo)
                    .WithMany(p => p.TblLibraryProcurementContract)
                    .HasForeignKey(d => d.FkLibraryprocurementcontractrevisioninfoid)
                    .HasConstraintName("FK_tblLibraryProcurementContract_tblLibraryProcurementContractRevisionInfo");

                entity.HasOne(d => d.FkProcurementaccountcode)
                    .WithMany(p => p.TblLibraryProcurementContract)
                    .HasForeignKey(d => d.FkProcurementaccountcodeid)
                    .HasConstraintName("FK_tblLibraryProcurementContract_tblProcurementAccountCode");

                entity.HasOne(d => d.FkProcurementcode)
                    .WithMany(p => p.TblLibraryProcurementContract)
                    .HasForeignKey(d => d.FkProcurementcodeid)
                    .HasConstraintName("FK_tblLibraryProcurementContract_tblProcurementCode");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblLibraryProcurementContract)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContract_tblSubDiscipline");

                entity.HasOne(d => d.FkUniquecheckproject)
                    .WithMany(p => p.TblLibraryProcurementContract)
                    .HasForeignKey(d => d.FkUniquecheckprojectid)
                    .HasConstraintName("FK_tblLibraryProcurementContract_tblProject");
            });

            modelBuilder.Entity<TblLibraryProcurementContractPricelist>(entity =>
            {
                entity.HasKey(e => e.PkLibraryprocurementcontractpricelistid);

                entity.ToTable("tblLibraryProcurementContractPricelist");

                entity.HasIndex(e => e.FkLibraryprocurementcontractid);

                entity.HasIndex(e => e.FkPricelistrateunitofmeasurementid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => e.Pricelistidentifier);

                entity.HasIndex(e => new { e.FkLibraryprocurementcontractid, e.Pricelistsortorder })
                    .HasName("UK_tblLibraryProcurementContractPricelist")
                    .IsUnique();

                entity.HasIndex(e => new { e.PkLibraryprocurementcontractpricelistid, e.FkLibraryprocurementcontractid, e.FkPricelistrateunitofmeasurementid, e.Pricelistsortorder, e.Pricelistdescription, e.Pricelistrate, e.FkResourceid, e.Pricelistrowtype, e.Inactivedate })
                    .HasName("IX_tblLibraryProcurementContractPricelist_fk_resourceid_pricelistrowtype_inactivedate_with_includes");

                entity.Property(e => e.PkLibraryprocurementcontractpricelistid).HasColumnName("pk_libraryprocurementcontractpricelistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryprocurementcontractid).HasColumnName("fk_libraryprocurementcontractid");

                entity.Property(e => e.FkPricelistrateunitofmeasurementid).HasColumnName("fk_pricelistrateunitofmeasurementid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.Inactivecomputer)
                    .HasColumnName("inactivecomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Inactivedate)
                    .HasColumnName("inactivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inactiveuser)
                    .HasColumnName("inactiveuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pricelistcorrectionfactor)
                    .HasColumnName("pricelistcorrectionfactor")
                    .HasColumnType("decimal(9, 3)");

                entity.Property(e => e.Pricelistdescription)
                    .HasColumnName("pricelistdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Pricelistidentifier).HasColumnName("pricelistidentifier");

                entity.Property(e => e.Pricelistnotes).HasColumnName("pricelistnotes");

                entity.Property(e => e.Pricelistrate)
                    .HasColumnName("pricelistrate")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Pricelistrowtype)
                    .IsRequired()
                    .HasColumnName("pricelistrowtype")
                    .HasMaxLength(1);

                entity.Property(e => e.Pricelistsortorder).HasColumnName("pricelistsortorder");

                entity.HasOne(d => d.FkLibraryprocurementcontract)
                    .WithMany(p => p.TblLibraryProcurementContractPricelist)
                    .HasForeignKey(d => d.FkLibraryprocurementcontractid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContractPricelist_tblLibraryProcurementContract");

                entity.HasOne(d => d.FkPricelistrateunitofmeasurement)
                    .WithMany(p => p.TblLibraryProcurementContractPricelist)
                    .HasForeignKey(d => d.FkPricelistrateunitofmeasurementid)
                    .HasConstraintName("FK_tblLibraryProcurementContractPricelist_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblLibraryProcurementContractPricelist)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContractPricelist_tblResource");
            });

            modelBuilder.Entity<TblLibraryProcurementContractProject>(entity =>
            {
                entity.HasKey(e => e.PkLibraryprocurementcontractprojectid);

                entity.ToTable("tblLibraryProcurementContractProject");

                entity.HasIndex(e => e.FkLibraryprocurementcontractid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkLibraryprocurementcontractid, e.FkProjectid })
                    .HasName("UK_tblLibraryProcurementContractProject")
                    .IsUnique();

                entity.Property(e => e.PkLibraryprocurementcontractprojectid).HasColumnName("pk_libraryprocurementcontractprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryprocurementcontractid).HasColumnName("fk_libraryprocurementcontractid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryprocurementcontract)
                    .WithMany(p => p.TblLibraryProcurementContractProject)
                    .HasForeignKey(d => d.FkLibraryprocurementcontractid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContractProject_tblLibraryProcurementContract");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblLibraryProcurementContractProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContractProject_tblProject");
            });

            modelBuilder.Entity<TblLibraryProcurementContractRevisionInfo>(entity =>
            {
                entity.HasKey(e => e.PkLibraryprocurementcontractrevisioninfoid);

                entity.ToTable("tblLibraryProcurementContractRevisionInfo");

                entity.HasIndex(e => e.FkLibraryactiveprocurementcontractid);

                entity.HasIndex(e => e.FkRevisioninfoid)
                    .HasName("UK_tblLibraryProcurementContractRevisionInfo_fk_revisioninfoid")
                    .IsUnique();

                entity.Property(e => e.PkLibraryprocurementcontractrevisioninfoid).HasColumnName("pk_libraryprocurementcontractrevisioninfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactiveprocurementcontractid).HasColumnName("fk_libraryactiveprocurementcontractid");

                entity.Property(e => e.FkRevisioninfoid).HasColumnName("fk_revisioninfoid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryactiveprocurementcontract)
                    .WithMany(p => p.TblLibraryProcurementContractRevisionInfo)
                    .HasForeignKey(d => d.FkLibraryactiveprocurementcontractid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContractRevisionInfo_tblLibraryActiveProcurementContract");

                entity.HasOne(d => d.FkRevisioninfo)
                    .WithOne(p => p.TblLibraryProcurementContractRevisionInfo)
                    .HasForeignKey<TblLibraryProcurementContractRevisionInfo>(d => d.FkRevisioninfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryProcurementContractRevisionInfo_tblRevisionInfo");
            });

            modelBuilder.Entity<TblLibraryScopeTemplate>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplateid);

                entity.ToTable("tblLibraryScopeTemplate");

                entity.HasIndex(e => e.FkLibraryscopetemplaterevisioninfoid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => e.FkUniquecheckprojectid);

                entity.HasIndex(e => e.Scopetemplatecode);

                entity.HasIndex(e => new { e.FkLibraryscopetemplaterevisioninfoid, e.FkUniquecheckprojectid, e.Scopetemplatecode })
                    .HasName("UK_tblLibraryScopeTemplate")
                    .IsUnique();

                entity.Property(e => e.PkLibraryscopetemplateid).HasColumnName("pk_libraryscopetemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryscopetemplaterevisioninfoid).HasColumnName("fk_libraryscopetemplaterevisioninfoid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkUniquecheckprojectid).HasColumnName("fk_uniquecheckprojectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Publishedcomputer)
                    .HasColumnName("publishedcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Publisheddate)
                    .HasColumnName("publisheddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Publisheduser)
                    .HasColumnName("publisheduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopetemplatecode)
                    .IsRequired()
                    .HasColumnName("scopetemplatecode")
                    .HasMaxLength(10);

                entity.Property(e => e.ScopetemplatedescriptionL1)
                    .IsRequired()
                    .HasColumnName("scopetemplatedescription_l1")
                    .HasMaxLength(250);

                entity.Property(e => e.ScopetemplatedescriptionL2)
                    .HasColumnName("scopetemplatedescription_l2")
                    .HasMaxLength(250);

                entity.Property(e => e.ScopetemplatedescriptionL3)
                    .HasColumnName("scopetemplatedescription_l3")
                    .HasMaxLength(250);

                entity.Property(e => e.ScopetemplatedescriptionL4)
                    .HasColumnName("scopetemplatedescription_l4")
                    .HasMaxLength(250);

                entity.Property(e => e.ScopetemplatedescriptionL5)
                    .HasColumnName("scopetemplatedescription_l5")
                    .HasMaxLength(250);

                entity.Property(e => e.Scopetemplateisprojectcustom).HasColumnName("scopetemplateisprojectcustom");

                entity.HasOne(d => d.FkLibraryscopetemplaterevisioninfo)
                    .WithMany(p => p.TblLibraryScopeTemplate)
                    .HasForeignKey(d => d.FkLibraryscopetemplaterevisioninfoid)
                    .HasConstraintName("FK_tblLibraryScopeTemplate_tblLibraryScopeTemplateRevisionInfo");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblLibraryScopeTemplate)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .HasConstraintName("FK_tblLibraryScopeTemplate_tblShortCode");

                entity.HasOne(d => d.FkUniquecheckproject)
                    .WithMany(p => p.TblLibraryScopeTemplate)
                    .HasForeignKey(d => d.FkUniquecheckprojectid)
                    .HasConstraintName("FK_tblLibraryScopeTemplate_tblProject");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateJob>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplatejobid);

                entity.ToTable("tblLibraryScopeTemplateJob");

                entity.HasIndex(e => e.FkJobid);

                entity.HasIndex(e => e.FkLibraryjobid);

                entity.HasIndex(e => e.FkLibraryscopetemplateid);

                entity.HasIndex(e => e.Scopetemplatejobcode);

                entity.HasIndex(e => new { e.FkLibraryscopetemplateid, e.Scopetemplatejobcode })
                    .HasName("UK_tblLibraryScopeTemplateJob")
                    .IsUnique();

                entity.Property(e => e.PkLibraryscopetemplatejobid).HasColumnName("pk_libraryscopetemplatejobid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobid).HasColumnName("fk_jobid");

                entity.Property(e => e.FkLibraryjobid).HasColumnName("fk_libraryjobid");

                entity.Property(e => e.FkLibraryscopetemplateid).HasColumnName("fk_libraryscopetemplateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisionaccepteddate)
                    .HasColumnName("revisionaccepteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopetemplatejobcode)
                    .IsRequired()
                    .HasColumnName("scopetemplatejobcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Scopetemplatejobsortorder).HasColumnName("scopetemplatejobsortorder");

                entity.HasOne(d => d.FkJob)
                    .WithMany(p => p.TblLibraryScopeTemplateJob)
                    .HasForeignKey(d => d.FkJobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateJob_tblJob");

                entity.HasOne(d => d.FkLibraryjob)
                    .WithMany(p => p.TblLibraryScopeTemplateJob)
                    .HasForeignKey(d => d.FkLibraryjobid)
                    .HasConstraintName("FK_tblLibraryScopeTemplateJob_tblLibraryJob");

                entity.HasOne(d => d.FkLibraryscopetemplate)
                    .WithMany(p => p.TblLibraryScopeTemplateJob)
                    .HasForeignKey(d => d.FkLibraryscopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateJob_tblLibraryScopeTemplate");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateJobBasePermit>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplatejobbasepermitid);

                entity.ToTable("tblLibraryScopeTemplateJobBasePermit");

                entity.HasIndex(e => e.FkBasepermitid);

                entity.HasIndex(e => e.FkLibraryscopetemplatejobid);

                entity.HasIndex(e => new { e.FkLibraryscopetemplatejobid, e.FkBasepermitid })
                    .HasName("UK_tblLibraryScopeTemplateJobBasePermit")
                    .IsUnique();

                entity.Property(e => e.PkLibraryscopetemplatejobbasepermitid).HasColumnName("pk_libraryscopetemplatejobbasepermitid");

                entity.Property(e => e.Basepermitidentifier)
                    .IsRequired()
                    .HasColumnName("basepermitidentifier")
                    .HasMaxLength(50);

                entity.Property(e => e.Basepermitjobname)
                    .IsRequired()
                    .HasColumnName("basepermitjobname")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.FkLibraryscopetemplatejobid).HasColumnName("fk_libraryscopetemplatejobid");

                entity.Property(e => e.Isparentjob).HasColumnName("isparentjob");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblLibraryScopeTemplateJobBasePermit)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateJobBasePermit_tblBasePermit");

                entity.HasOne(d => d.FkLibraryscopetemplatejob)
                    .WithMany(p => p.TblLibraryScopeTemplateJobBasePermit)
                    .HasForeignKey(d => d.FkLibraryscopetemplatejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateJobBasePermit_tblLibraryScopeTemplateJob");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateMilestoneTemplate>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplatemilestonetemplateid);

                entity.ToTable("tblLibraryScopeTemplateMilestoneTemplate");

                entity.HasIndex(e => e.FkLibraryscopetemplateid);

                entity.HasIndex(e => e.FkTemplatemilestoneid);

                entity.HasIndex(e => e.PkLibraryscopetemplatemilestonetemplateid);

                entity.Property(e => e.PkLibraryscopetemplatemilestonetemplateid).HasColumnName("pk_libraryscopetemplatemilestonetemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryscopetemplateid).HasColumnName("fk_libraryscopetemplateid");

                entity.Property(e => e.FkTemplatemilestoneid).HasColumnName("fk_templatemilestoneid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryscopetemplate)
                    .WithMany(p => p.TblLibraryScopeTemplateMilestoneTemplate)
                    .HasForeignKey(d => d.FkLibraryscopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_libraryscopetemplateid_tblLibraryScopeTemplate");

                entity.HasOne(d => d.FkTemplatemilestone)
                    .WithMany(p => p.TblLibraryScopeTemplateMilestoneTemplate)
                    .HasForeignKey(d => d.FkTemplatemilestoneid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_templatemilestoneid_tblTemplateMilestone");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateProject>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplateprojectid);

                entity.ToTable("tblLibraryScopeTemplateProject");

                entity.HasIndex(e => e.FkLibraryscopetemplateid);

                entity.HasIndex(e => e.FkProjectid)
                    .HasName("IX_tblLibraryScopeTemplateProject_fk_linkedprojectid");

                entity.HasIndex(e => new { e.FkLibraryscopetemplateid, e.FkProjectid })
                    .HasName("UK_tblLibraryScopeTemplateProject")
                    .IsUnique();

                entity.Property(e => e.PkLibraryscopetemplateprojectid).HasColumnName("pk_libraryscopetemplateprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryscopetemplateid).HasColumnName("fk_libraryscopetemplateid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryscopetemplate)
                    .WithMany(p => p.TblLibraryScopeTemplateProject)
                    .HasForeignKey(d => d.FkLibraryscopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateProject_tblLibraryScopeTemplate");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblLibraryScopeTemplateProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateProject_tblProject");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateRelation>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplaterelationid);

                entity.ToTable("tblLibraryScopeTemplateRelation");

                entity.HasIndex(e => e.FkLibraryscopetemplatejobid1);

                entity.HasIndex(e => e.FkLibraryscopetemplatejobid2);

                entity.HasIndex(e => e.FkLibraryscopetemplatemilestonetemplateid1);

                entity.HasIndex(e => e.FkLibraryscopetemplatemilestonetemplateid2);

                entity.HasIndex(e => e.Gcrecord)
                    .HasName("tblLibraryScopeTemplateRelation_iGCRecord");

                entity.Property(e => e.PkLibraryscopetemplaterelationid).HasColumnName("pk_libraryscopetemplaterelationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryscopetemplatejobid1).HasColumnName("fk_libraryscopetemplatejobid1");

                entity.Property(e => e.FkLibraryscopetemplatejobid2).HasColumnName("fk_libraryscopetemplatejobid2");

                entity.Property(e => e.FkLibraryscopetemplatemilestonetemplateid1).HasColumnName("fk_libraryscopetemplatemilestonetemplateid1");

                entity.Property(e => e.FkLibraryscopetemplatemilestonetemplateid2).HasColumnName("fk_libraryscopetemplatemilestonetemplateid2");

                entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopetemplaterelationtype)
                    .IsRequired()
                    .HasColumnName("scopetemplaterelationtype")
                    .HasMaxLength(2);

                entity.HasOne(d => d.FkLibraryscopetemplatejobid1Navigation)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationFkLibraryscopetemplatejobid1Navigation)
                    .HasForeignKey(d => d.FkLibraryscopetemplatejobid1)
                    .HasConstraintName("FK_tblLibraryScopeTemplateRelation_tblLibraryScopeTemplateJob_1");

                entity.HasOne(d => d.FkLibraryscopetemplatejobid2Navigation)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationFkLibraryscopetemplatejobid2Navigation)
                    .HasForeignKey(d => d.FkLibraryscopetemplatejobid2)
                    .HasConstraintName("FK_tblLibraryScopeTemplateRelation_tblLibraryScopeTemplateJob_2");

                entity.HasOne(d => d.FkLibraryscopetemplatemilestonetemplateid1Navigation)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationFkLibraryscopetemplatemilestonetemplateid1Navigation)
                    .HasForeignKey(d => d.FkLibraryscopetemplatemilestonetemplateid1)
                    .HasConstraintName("fk_libraryscopetemplatemilestonetemplateid1_tblLibraryScopeTemplateRelation");

                entity.HasOne(d => d.FkLibraryscopetemplatemilestonetemplateid2Navigation)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationFkLibraryscopetemplatemilestonetemplateid2Navigation)
                    .HasForeignKey(d => d.FkLibraryscopetemplatemilestonetemplateid2)
                    .HasConstraintName("fk_libraryscopetemplatemilestonetemplateid2_tblLibraryScopeTemplateRelation");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateRelationPosition>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplaterelationpositionid);

                entity.ToTable("tblLibraryScopeTemplateRelationPosition");

                entity.HasIndex(e => e.FkLibraryscopetemplatejobid);

                entity.HasIndex(e => e.FkLibraryscopetemplatemilestonetemplateid);

                entity.HasIndex(e => e.FkLibraryscopetemplaterelationid);

                entity.HasIndex(e => e.Gcrecord)
                    .HasName("tblLibraryScopeTemplateRelationPosition_iGCRecord");

                entity.Property(e => e.PkLibraryscopetemplaterelationpositionid).HasColumnName("pk_libraryscopetemplaterelationpositionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryscopetemplatejobid).HasColumnName("fk_libraryscopetemplatejobid");

                entity.Property(e => e.FkLibraryscopetemplatemilestonetemplateid).HasColumnName("fk_libraryscopetemplatemilestonetemplateid");

                entity.Property(e => e.FkLibraryscopetemplaterelationid).HasColumnName("fk_libraryscopetemplaterelationid");

                entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopetemplaterelationpositionx).HasColumnName("scopetemplaterelationpositionx");

                entity.Property(e => e.Scopetemplaterelationpositiony).HasColumnName("scopetemplaterelationpositiony");

                entity.HasOne(d => d.FkLibraryscopetemplatejob)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationPosition)
                    .HasForeignKey(d => d.FkLibraryscopetemplatejobid)
                    .HasConstraintName("FK_tblLibraryScopeTemplateRelationPosition_tblLibraryScopeTemplateJob");

                entity.HasOne(d => d.FkLibraryscopetemplatemilestonetemplate)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationPosition)
                    .HasForeignKey(d => d.FkLibraryscopetemplatemilestonetemplateid)
                    .HasConstraintName("fk_libraryscopetemplatemilestonetemplate_tblLibraryScopeTemplateRelationPosition");

                entity.HasOne(d => d.FkLibraryscopetemplaterelation)
                    .WithMany(p => p.TblLibraryScopeTemplateRelationPosition)
                    .HasForeignKey(d => d.FkLibraryscopetemplaterelationid)
                    .HasConstraintName("FK_tblLibraryScopeTemplateRelationPosition_tblLibraryScopeTemplateRelation");
            });

            modelBuilder.Entity<TblLibraryScopeTemplateRevisionInfo>(entity =>
            {
                entity.HasKey(e => e.PkLibraryscopetemplaterevisioninfoid);

                entity.ToTable("tblLibraryScopeTemplateRevisionInfo");

                entity.HasIndex(e => e.FkLibraryactivescopetemplateid);

                entity.HasIndex(e => e.FkRevisioninfoid)
                    .HasName("UK_tblLibraryScopeTemplateRevisionInfo_fk_revisioninfoid")
                    .IsUnique();

                entity.Property(e => e.PkLibraryscopetemplaterevisioninfoid).HasColumnName("pk_libraryscopetemplaterevisioninfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactivescopetemplateid).HasColumnName("fk_libraryactivescopetemplateid");

                entity.Property(e => e.FkRevisioninfoid).HasColumnName("fk_revisioninfoid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLibraryactivescopetemplate)
                    .WithMany(p => p.TblLibraryScopeTemplateRevisionInfo)
                    .HasForeignKey(d => d.FkLibraryactivescopetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateRevisionInfo_tblLibraryActiveScopeTemplate");

                entity.HasOne(d => d.FkRevisioninfo)
                    .WithOne(p => p.TblLibraryScopeTemplateRevisionInfo)
                    .HasForeignKey<TblLibraryScopeTemplateRevisionInfo>(d => d.FkRevisioninfoid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLibraryScopeTemplateRevisionInfo_tblRevisionInfo");
            });

            modelBuilder.Entity<TblLicense>(entity =>
            {
                entity.HasKey(e => e.PkLicenseid);

                entity.ToTable("tblLicense");

                entity.Property(e => e.PkLicenseid).HasColumnName("pk_licenseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Licensekey)
                    .IsRequired()
                    .HasColumnName("licensekey");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLisl>(entity =>
            {
                entity.HasKey(e => e.PkLislid);

                entity.ToTable("tblLISL");

                entity.HasIndex(e => e.FkCategoryid);

                entity.HasIndex(e => e.FkMaincontractorid);

                entity.HasIndex(e => e.FkMaterialpipespecid);

                entity.HasIndex(e => e.FkNobocontractorid)
                    .HasName("IX_tblLisl_tblContractor_Nobo");

                entity.HasIndex(e => e.FkPipelineid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkRequestorid);

                entity.HasIndex(e => e.FkScopechangeuserid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkTestsystemid);

                entity.HasIndex(e => e.FkWeldprocedureid);

                entity.Property(e => e.PkLislid).HasColumnName("pk_lislid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Deleteuser)
                    .HasColumnName("deleteuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Designcode)
                    .HasColumnName("designcode")
                    .HasMaxLength(100);

                entity.Property(e => e.Drawingnr)
                    .HasColumnName("drawingnr")
                    .HasMaxLength(30);

                entity.Property(e => e.Drawingrevnr)
                    .HasColumnName("drawingrevnr")
                    .HasMaxLength(30);

                entity.Property(e => e.Eqptagnr)
                    .HasColumnName("eqptagnr")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCategoryid).HasColumnName("fk_categoryid");

                entity.Property(e => e.FkMaincontractorid).HasColumnName("fk_maincontractorid");

                entity.Property(e => e.FkMaterialpipespecid).HasColumnName("fk_materialpipespecid");

                entity.Property(e => e.FkNobocontractorid).HasColumnName("fk_nobocontractorid");

                entity.Property(e => e.FkPipelineid).HasColumnName("fk_pipelineid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkRequestorid).HasColumnName("fk_requestorid");

                entity.Property(e => e.FkScopechangeuserid).HasColumnName("fk_scopechangeuserid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkTestsystemid).HasColumnName("fk_testsystemid");

                entity.Property(e => e.FkWeldprocedureid).HasColumnName("fk_weldprocedureid");

                entity.Property(e => e.Isdeleted)
                    .HasColumnName("isdeleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isometricnr)
                    .HasColumnName("isometricnr")
                    .HasMaxLength(50);

                entity.Property(e => e.Isometricrevnr)
                    .HasColumnName("isometricrevnr")
                    .HasMaxLength(30);

                entity.Property(e => e.Isometricsheetnr)
                    .HasColumnName("isometricsheetnr")
                    .HasMaxLength(30);

                entity.Property(e => e.Lislnr)
                    .HasColumnName("lislnr")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pwht).HasColumnName("pwht");

                entity.Property(e => e.Regnr)
                    .HasColumnName("regnr")
                    .HasMaxLength(50);

                entity.Property(e => e.Testsystemfreezedate)
                    .HasColumnName("testsystemfreezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Testsystemfreezeuser)
                    .HasColumnName("testsystemfreezeuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Wregnr)
                    .HasColumnName("wregnr")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCategory)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkCategoryid)
                    .HasConstraintName("FK_tblLISL_tblCategory");

                entity.HasOne(d => d.FkMaincontractor)
                    .WithMany(p => p.TblLislFkMaincontractor)
                    .HasForeignKey(d => d.FkMaincontractorid)
                    .HasConstraintName("FK_tblLISL_tblContractor");

                entity.HasOne(d => d.FkMaterialpipespec)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkMaterialpipespecid)
                    .HasConstraintName("FK_tblLISL_tblMaterialPipeSpec");

                entity.HasOne(d => d.FkNobocontractor)
                    .WithMany(p => p.TblLislFkNobocontractor)
                    .HasForeignKey(d => d.FkNobocontractorid)
                    .HasConstraintName("FK_tblLisl_tblContractor_Nobo");

                entity.HasOne(d => d.FkPipeline)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkPipelineid)
                    .HasConstraintName("FK_tblLISL_tblPipeline");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblLISL_tblProject");

                entity.HasOne(d => d.FkRequestor)
                    .WithMany(p => p.TblLislFkRequestor)
                    .HasForeignKey(d => d.FkRequestorid)
                    .HasConstraintName("FK_tblLISL_tblUser_Requestor");

                entity.HasOne(d => d.FkScopechangeuser)
                    .WithMany(p => p.TblLislFkScopechangeuser)
                    .HasForeignKey(d => d.FkScopechangeuserid)
                    .HasConstraintName("FK_tblLISL_tblUser_ScopeChangeUser");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLISL_tblScope");

                entity.HasOne(d => d.FkTestsystem)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkTestsystemid)
                    .HasConstraintName("FK_tblLISL_tblTestSystem");

                entity.HasOne(d => d.FkWeldprocedure)
                    .WithMany(p => p.TblLisl)
                    .HasForeignKey(d => d.FkWeldprocedureid)
                    .HasConstraintName("FK_tblLISL_tblWeldProcedure");
            });

            modelBuilder.Entity<TblLislDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkLisldocumentlabelid);

                entity.ToTable("tblLislDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkLislid);

                entity.HasIndex(e => new { e.FkLislid, e.FkDocumentlabelid })
                    .HasName("UK_tblLislDocumentLabel_fk_lislid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkLisldocumentlabelid).HasColumnName("pk_lisldocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkLislid).HasColumnName("fk_lislid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblLislDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkLisl)
                    .WithMany(p => p.TblLislDocumentLabel)
                    .HasForeignKey(d => d.FkLislid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislDocumentLabel_tblLisl");
            });

            modelBuilder.Entity<TblLislLislRemark>(entity =>
            {
                entity.HasKey(e => e.PkLisllislremarkid);

                entity.ToTable("tblLislLislRemark");

                entity.HasIndex(e => e.FkLislid);

                entity.HasIndex(e => e.FkLislremarkid);

                entity.Property(e => e.PkLisllislremarkid).HasColumnName("pk_lisllislremarkid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLislid).HasColumnName("fk_lislid");

                entity.Property(e => e.FkLislremarkid).HasColumnName("fk_lislremarkid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLisl)
                    .WithMany(p => p.TblLislLislRemark)
                    .HasForeignKey(d => d.FkLislid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislLislRemark_tblLisl");

                entity.HasOne(d => d.FkLislremark)
                    .WithMany(p => p.TblLislLislRemark)
                    .HasForeignKey(d => d.FkLislremarkid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislLislRemark_tblLislRemark");
            });

            modelBuilder.Entity<TblLislNdeInspectionPlan>(entity =>
            {
                entity.HasKey(e => e.PkLislndeinspectionplanid);

                entity.ToTable("tblLislNdeInspectionPlan");

                entity.HasIndex(e => e.FkFreezeuserid);

                entity.HasIndex(e => e.FkInspectionvalueunitofmeasurementid);

                entity.HasIndex(e => e.FkLislid);

                entity.HasIndex(e => e.FkNdedeadlineid);

                entity.HasIndex(e => e.FkNdemainid);

                entity.Property(e => e.PkLislndeinspectionplanid).HasColumnName("pk_lislndeinspectionplanid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkFreezeuserid).HasColumnName("fk_freezeuserid");

                entity.Property(e => e.FkInspectionvalueunitofmeasurementid).HasColumnName("fk_inspectionvalueunitofmeasurementid");

                entity.Property(e => e.FkLislid).HasColumnName("fk_lislid");

                entity.Property(e => e.FkNdedeadlineid).HasColumnName("fk_ndedeadlineid");

                entity.Property(e => e.FkNdemainid).HasColumnName("fk_ndemainid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inspectionvalue)
                    .HasColumnName("inspectionvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Locationenumvalue).HasColumnName("locationenumvalue");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(250);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkFreezeuser)
                    .WithMany(p => p.TblLislNdeInspectionPlan)
                    .HasForeignKey(d => d.FkFreezeuserid)
                    .HasConstraintName("FK_tblLislNdeInspectionPlan_tblUser");

                entity.HasOne(d => d.FkInspectionvalueunitofmeasurement)
                    .WithMany(p => p.TblLislNdeInspectionPlan)
                    .HasForeignKey(d => d.FkInspectionvalueunitofmeasurementid)
                    .HasConstraintName("FK_tblLislNdeInspectionPlan_tblInspectionValueUOM");

                entity.HasOne(d => d.FkLisl)
                    .WithMany(p => p.TblLislNdeInspectionPlan)
                    .HasForeignKey(d => d.FkLislid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislNdeInspectionPlan_tblLisl");

                entity.HasOne(d => d.FkNdedeadline)
                    .WithMany(p => p.TblLislNdeInspectionPlan)
                    .HasForeignKey(d => d.FkNdedeadlineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislNdeInspectionPlan_tblNdeDeadline");

                entity.HasOne(d => d.FkNdemain)
                    .WithMany(p => p.TblLislNdeInspectionPlan)
                    .HasForeignKey(d => d.FkNdemainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislNdeInspectionPlan_tblNdeMain");
            });

            modelBuilder.Entity<TblLislProgress>(entity =>
            {
                entity.HasKey(e => e.PkLislprogressid);

                entity.ToTable("tblLislProgress");

                entity.HasIndex(e => e.FkLislid);

                entity.HasIndex(e => e.FkLislprogressphaseid);

                entity.HasIndex(e => new { e.FkLislid, e.FkLislprogressphaseid })
                    .HasName("UQ_tblLislProgress")
                    .IsUnique();

                entity.Property(e => e.PkLislprogressid).HasColumnName("pk_lislprogressid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.CustomNotApplicable).HasColumnName("custom_not_applicable");

                entity.Property(e => e.FkLislid).HasColumnName("fk_lislid");

                entity.Property(e => e.FkLislprogressphaseid).HasColumnName("fk_lislprogressphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLisl)
                    .WithMany(p => p.TblLislProgress)
                    .HasForeignKey(d => d.FkLislid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislProgress_tblLisl");

                entity.HasOne(d => d.FkLislprogressphase)
                    .WithMany(p => p.TblLislProgress)
                    .HasForeignKey(d => d.FkLislprogressphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLislProgress_tblLislProgressPhase");
            });

            modelBuilder.Entity<TblLislProgressPhase>(entity =>
            {
                entity.HasKey(e => e.PkLislprogressphaseid);

                entity.ToTable("tblLislProgressPhase");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ_tblLislProgressPhase")
                    .IsUnique();

                entity.Property(e => e.PkLislprogressphaseid).HasColumnName("pk_lislprogressphaseid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(4);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Isfield).HasColumnName("isfield");

                entity.Property(e => e.Isprefab).HasColumnName("isprefab");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLislRemark>(entity =>
            {
                entity.HasKey(e => e.PkLislremarkid);

                entity.ToTable("tblLislRemark");

                entity.Property(e => e.PkLislremarkid).HasColumnName("pk_lislremarkid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Lislremark)
                    .IsRequired()
                    .HasColumnName("lislremark")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.ToTable("tblLog");

                entity.Property(e => e.Assembly).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Exception).HasMaxLength(2000);

                entity.Property(e => e.Level).HasMaxLength(50);

                entity.Property(e => e.Logger).HasMaxLength(255);

                entity.Property(e => e.Message).HasMaxLength(4000);

                entity.Property(e => e.Session).HasMaxLength(50);

                entity.Property(e => e.Thread).HasMaxLength(255);

                entity.Property(e => e.UserName).HasMaxLength(50);
            });

            modelBuilder.Entity<TblLogging>(entity =>
            {
                entity.HasKey(e => e.PkLoggingid);

                entity.ToTable("tblLogging");

                entity.HasIndex(e => e.FkWeldituser);

                entity.Property(e => e.PkLoggingid).HasColumnName("pk_loggingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWeldituser).HasColumnName("fk_weldituser");

                entity.Property(e => e.Form)
                    .IsRequired()
                    .HasColumnName("form")
                    .HasMaxLength(150);

                entity.Property(e => e.Functionname)
                    .IsRequired()
                    .HasColumnName("functionname")
                    .HasMaxLength(150);

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction")
                    .HasMaxLength(250);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkWeldituserNavigation)
                    .WithMany(p => p.TblLogging)
                    .HasForeignKey(d => d.FkWeldituser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLogging_tblUser_weldituser");
            });

            modelBuilder.Entity<TblLogo>(entity =>
            {
                entity.HasKey(e => e.PkLogoid);

                entity.ToTable("tblLogo");

                entity.Property(e => e.PkLogoid).HasColumnName("pk_logoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Logo)
                    .IsRequired()
                    .HasColumnName("logo")
                    .HasColumnType("image");

                entity.Property(e => e.Logodescription)
                    .IsRequired()
                    .HasColumnName("logodescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblLubricant>(entity =>
            {
                entity.HasKey(e => e.PkLubricantid);

                entity.ToTable("tblLubricant");

                entity.HasIndex(e => e.Lubricantcode)
                    .HasName("UK_tbllubricant_code")
                    .IsUnique();

                entity.HasIndex(e => e.Lubricantdescription)
                    .HasName("UK_tbllubricant_description")
                    .IsUnique();

                entity.Property(e => e.PkLubricantid).HasColumnName("pk_lubricantid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Lubricantcode)
                    .IsRequired()
                    .HasColumnName("lubricantcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Lubricantdescription)
                    .IsRequired()
                    .HasColumnName("lubricantdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMail>(entity =>
            {
                entity.HasKey(e => e.PkMailid);

                entity.ToTable("tblMail");

                entity.HasIndex(e => e.Mailname)
                    .HasName("UK_tblMail")
                    .IsUnique();

                entity.Property(e => e.PkMailid).HasColumnName("pk_mailid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Mailbody)
                    .IsRequired()
                    .HasColumnName("mailbody");

                entity.Property(e => e.Mailname)
                    .IsRequired()
                    .HasColumnName("mailname")
                    .HasMaxLength(100);

                entity.Property(e => e.Mailsubject)
                    .IsRequired()
                    .HasColumnName("mailsubject")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Systemmail).HasColumnName("systemmail");
            });

            modelBuilder.Entity<TblMainDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkMaindisciplineid);

                entity.ToTable("tblMainDiscipline");

                entity.HasIndex(e => e.Maindisciplinecode)
                    .HasName("uc_maindisciplinecode")
                    .IsUnique();

                entity.HasIndex(e => e.MaindisciplinedescriptionL1)
                    .HasName("uc_maindisciplinedescription")
                    .IsUnique();

                entity.Property(e => e.PkMaindisciplineid).HasColumnName("pk_maindisciplineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Maindisciplinecode)
                    .IsRequired()
                    .HasColumnName("maindisciplinecode")
                    .HasMaxLength(50);

                entity.Property(e => e.MaindisciplinedescriptionL1)
                    .IsRequired()
                    .HasColumnName("maindisciplinedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.MaindisciplinedescriptionL2)
                    .HasColumnName("maindisciplinedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.MaindisciplinedescriptionL3)
                    .HasColumnName("maindisciplinedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.MaindisciplinedescriptionL4)
                    .HasColumnName("maindisciplinedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.MaindisciplinedescriptionL5)
                    .HasColumnName("maindisciplinedescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMainMaterialGroup>(entity =>
            {
                entity.HasKey(e => e.PkMainmaterialgroupid);

                entity.ToTable("tblMainMaterialGroup");

                entity.HasIndex(e => e.Mainmatgroupcode)
                    .HasName("IX_tblMainMaterialGroup_Code")
                    .IsUnique();

                entity.Property(e => e.PkMainmaterialgroupid).HasColumnName("pk_mainmaterialgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.MainmaterialgroupdescriptionL1)
                    .IsRequired()
                    .HasColumnName("mainmaterialgroupdescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.MainmaterialgroupdescriptionL2)
                    .HasColumnName("mainmaterialgroupdescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.MainmaterialgroupdescriptionL3)
                    .HasColumnName("mainmaterialgroupdescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.MainmaterialgroupdescriptionL4)
                    .HasColumnName("mainmaterialgroupdescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.MainmaterialgroupdescriptionL5)
                    .HasColumnName("mainmaterialgroupdescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Mainmatgroupcode)
                    .IsRequired()
                    .HasColumnName("mainmatgroupcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMainPhase>(entity =>
            {
                entity.HasKey(e => e.PkMainphaseid);

                entity.ToTable("tblMainPhase");

                entity.HasIndex(e => e.Mainphasecode)
                    .HasName("uc_mainphasecode")
                    .IsUnique();

                entity.HasIndex(e => e.MainphasedescriptionL1)
                    .HasName("uc_mainphasedescription")
                    .IsUnique();

                entity.Property(e => e.PkMainphaseid).HasColumnName("pk_mainphaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Mainphasecode)
                    .IsRequired()
                    .HasColumnName("mainphasecode")
                    .HasMaxLength(2);

                entity.Property(e => e.Mainphasecolor).HasColumnName("mainphasecolor");

                entity.Property(e => e.MainphasedescriptionL1)
                    .IsRequired()
                    .HasColumnName("mainphasedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.MainphasedescriptionL2)
                    .HasColumnName("mainphasedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.MainphasedescriptionL3)
                    .HasColumnName("mainphasedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.MainphasedescriptionL4)
                    .HasColumnName("mainphasedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.MainphasedescriptionL5)
                    .HasColumnName("mainphasedescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Phaserastype).HasColumnName("phaserastype");
            });

            modelBuilder.Entity<TblMainSbs>(entity =>
            {
                entity.HasKey(e => e.PkMainsbsid);

                entity.ToTable("tblMainSBS");

                entity.HasIndex(e => e.FkProcessareaid);

                entity.HasIndex(e => new { e.FkProcessareaid, e.Mainsbscode })
                    .HasName("UK_tblMainSBS_code")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProcessareaid, e.Mainsbsdescription })
                    .HasName("UK_tblMainSBS_description")
                    .IsUnique();

                entity.Property(e => e.PkMainsbsid).HasColumnName("pk_mainsbsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProcessareaid).HasColumnName("fk_processareaid");

                entity.Property(e => e.Mainsbscode)
                    .IsRequired()
                    .HasColumnName("mainsbscode")
                    .HasMaxLength(100);

                entity.Property(e => e.Mainsbsdescription)
                    .IsRequired()
                    .HasColumnName("mainsbsdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProcessarea)
                    .WithMany(p => p.TblMainSbs)
                    .HasForeignKey(d => d.FkProcessareaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMainSBS_tblProcessArea");
            });

            modelBuilder.Entity<TblMainToolsAndConsumablesGroup>(entity =>
            {
                entity.HasKey(e => e.PkMaintoolsandconsumablesgroupid);

                entity.ToTable("tblMainToolsAndConsumablesGroup");

                entity.Property(e => e.PkMaintoolsandconsumablesgroupid).HasColumnName("pk_maintoolsandconsumablesgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Maintoolsandconsumablesgroupcode)
                    .IsRequired()
                    .HasColumnName("maintoolsandconsumablesgroupcode")
                    .HasMaxLength(10);

                entity.Property(e => e.MaintoolsandconsumablesgroupdescriptionL1)
                    .IsRequired()
                    .HasColumnName("maintoolsandconsumablesgroupdescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.MaintoolsandconsumablesgroupdescriptionL2)
                    .HasColumnName("maintoolsandconsumablesgroupdescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.MaintoolsandconsumablesgroupdescriptionL3)
                    .HasColumnName("maintoolsandconsumablesgroupdescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.MaintoolsandconsumablesgroupdescriptionL4)
                    .HasColumnName("maintoolsandconsumablesgroupdescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.MaintoolsandconsumablesgroupdescriptionL5)
                    .HasColumnName("maintoolsandconsumablesgroupdescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMaterial>(entity =>
            {
                entity.HasKey(e => e.PkMaterialid);

                entity.ToTable("tblMaterial");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkMainmaterialgroupid);

                entity.HasIndex(e => e.FkSubmaterialgroupid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.Articlenumber, e.Legacyarticlenumber1, e.Legacyarticlenumber2 });

                entity.Property(e => e.PkMaterialid).HasColumnName("pk_materialid");

                entity.Property(e => e.Actualdeliverydate)
                    .HasColumnName("actualdeliverydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Additionalcost)
                    .HasColumnName("additionalcost")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Articledescription)
                    .IsRequired()
                    .HasColumnName("articledescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Articlenumber)
                    .HasColumnName("articlenumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Certificate)
                    .HasColumnName("certificate")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Custompurchaseordertext)
                    .HasColumnName("custompurchaseordertext")
                    .HasMaxLength(500);

                entity.Property(e => e.Dia)
                    .HasColumnName("dia")
                    .HasMaxLength(50);

                entity.Property(e => e.Dn)
                    .HasColumnName("dn")
                    .HasMaxLength(50);

                entity.Property(e => e.Estimateddeliverydate)
                    .HasColumnName("estimateddeliverydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Exportnumber)
                    .HasColumnName("exportnumber")
                    .HasMaxLength(20);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkFollowupuserid).HasColumnName("fk_followupuserid");

                entity.Property(e => e.FkMainmaterialgroupid).HasColumnName("fk_mainmaterialgroupid");

                entity.Property(e => e.FkSubmaterialgroupid).HasColumnName("fk_submaterialgroupid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Goodsrecipient)
                    .HasColumnName("goodsrecipient")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Heatnumber)
                    .HasColumnName("heatnumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Isexpediting).HasColumnName("isexpediting");

                entity.Property(e => e.Ismaterialslongdelivery).HasColumnName("ismaterialslongdelivery");

                entity.Property(e => e.Isstock).HasColumnName("isstock");

                entity.Property(e => e.Lbs)
                    .HasColumnName("lbs")
                    .HasMaxLength(50);

                entity.Property(e => e.Legacyarticlenumber1)
                    .HasColumnName("legacyarticlenumber1")
                    .HasMaxLength(20);

                entity.Property(e => e.Legacyarticlenumber2)
                    .HasColumnName("legacyarticlenumber2")
                    .HasMaxLength(20);

                entity.Property(e => e.Length)
                    .HasColumnName("length")
                    .HasMaxLength(50);

                entity.Property(e => e.Material)
                    .HasColumnName("material")
                    .HasMaxLength(50);

                entity.Property(e => e.Materialmemo)
                    .HasColumnName("materialmemo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pn)
                    .HasColumnName("pn")
                    .HasMaxLength(50);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Purchaseordernumber)
                    .HasColumnName("purchaseordernumber")
                    .HasMaxLength(100);

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Quotationrequestnumber)
                    .HasColumnName("quotationrequestnumber")
                    .HasMaxLength(20);

                entity.Property(e => e.Requestnumber).HasColumnName("requestnumber");

                entity.Property(e => e.Requestordate)
                    .HasColumnName("requestordate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Requestorname)
                    .HasColumnName("requestorname")
                    .HasMaxLength(100);

                entity.Property(e => e.Requiredatsitedate)
                    .HasColumnName("requiredatsitedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Requiredatsitetype)
                    .HasColumnName("requiredatsitetype")
                    .HasMaxLength(1);

                entity.Property(e => e.Rowtype)
                    .IsRequired()
                    .HasColumnName("rowtype")
                    .HasMaxLength(1);

                entity.Property(e => e.Sched)
                    .HasColumnName("sched")
                    .HasMaxLength(50);

                entity.Property(e => e.Size)
                    .HasColumnName("size")
                    .HasMaxLength(50);

                entity.Property(e => e.Specreq)
                    .HasColumnName("specreq")
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Stockcode)
                    .HasColumnName("stockcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Storagelocation)
                    .HasColumnName("storagelocation")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Trackingnumber)
                    .HasColumnName("trackingnumber")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Unit)
                    .HasColumnName("unit")
                    .HasMaxLength(10);

                entity.Property(e => e.Unloadingpoint)
                    .HasColumnName("unloadingpoint")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Width)
                    .HasColumnName("width")
                    .HasMaxLength(50);

                entity.Property(e => e.Wt)
                    .HasColumnName("wt")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblMaterial)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblMaterial_tblContractor");

                entity.HasOne(d => d.FkFollowupuser)
                    .WithMany(p => p.TblMaterialFkFollowupuser)
                    .HasForeignKey(d => d.FkFollowupuserid)
                    .HasConstraintName("FK_tblMaterial_followupuser_tblUser");

                entity.HasOne(d => d.FkMainmaterialgroup)
                    .WithMany(p => p.TblMaterial)
                    .HasForeignKey(d => d.FkMainmaterialgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterial_tblMainMaterialGroup");

                entity.HasOne(d => d.FkSubmaterialgroup)
                    .WithMany(p => p.TblMaterial)
                    .HasForeignKey(d => d.FkSubmaterialgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterial_tblSubMaterialGroup");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblMaterialFkUser)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblMaterial_tblUser");
            });

            modelBuilder.Entity<TblMaterialBom>(entity =>
            {
                entity.HasKey(e => e.PkMaterialbomid);

                entity.ToTable("tblMaterialBom");

                entity.HasIndex(e => e.FkMateriallibraryid);

                entity.Property(e => e.PkMaterialbomid).HasColumnName("pk_materialbomid");

                entity.Property(e => e.Articleminquantity)
                    .HasColumnName("articleminquantity")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Assemblyarticledescription)
                    .HasColumnName("assemblyarticledescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Equipmenttag)
                    .HasColumnName("equipmenttag")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMateriallibraryid).HasColumnName("fk_materiallibraryid");

                entity.Property(e => e.Functionallocation)
                    .HasColumnName("functionallocation")
                    .HasMaxLength(50);

                entity.Property(e => e.Isstock).HasColumnName("isstock");

                entity.Property(e => e.Lngtxt).HasColumnName("lngtxt");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Positiontxt1)
                    .HasColumnName("positiontxt1")
                    .HasMaxLength(100);

                entity.Property(e => e.Positiontxt2)
                    .HasColumnName("positiontxt2")
                    .HasMaxLength(100);

                entity.Property(e => e.Sortordernr)
                    .HasColumnName("sortordernr")
                    .HasMaxLength(10);

                entity.HasOne(d => d.FkMateriallibrary)
                    .WithMany(p => p.TblMaterialBom)
                    .HasForeignKey(d => d.FkMateriallibraryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterialBom_tblMaterialLibrary");
            });

            modelBuilder.Entity<TblMaterialCustom>(entity =>
            {
                entity.HasKey(e => e.PkMaterialcustomid);

                entity.ToTable("tblMaterialCustom");

                entity.Property(e => e.PkMaterialcustomid).HasColumnName("pk_materialcustomid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(1200);

                entity.Property(e => e.Goodsrecipient)
                    .HasColumnName("goodsrecipient")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Storagelocation)
                    .HasColumnName("storagelocation")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Trackingnumber)
                    .HasColumnName("trackingnumber")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Unloadingpoint)
                    .HasColumnName("unloadingpoint")
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TblMaterialDistribution>(entity =>
            {
                entity.HasKey(e => e.PkMaterialdistributionid);

                entity.ToTable("tblMaterialDistribution");

                entity.HasIndex(e => e.FkMaterialsourceid);

                entity.Property(e => e.PkMaterialdistributionid).HasColumnName("pk_materialdistributionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Distributed).HasColumnName("distributed");

                entity.Property(e => e.FkMaterialsourceid).HasColumnName("fk_materialsourceid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.Handoutbyuser)
                    .HasColumnName("handoutbyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Handoutdate)
                    .HasColumnName("handoutdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Handouttouser)
                    .HasColumnName("handouttouser")
                    .HasMaxLength(50);

                entity.Property(e => e.Memo).HasColumnName("memo");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMaterialsource)
                    .WithMany(p => p.TblMaterialDistribution)
                    .HasForeignKey(d => d.FkMaterialsourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblmaterialdistribution_tblMaterialSource");
            });

            modelBuilder.Entity<TblMaterialGroupBi>(entity =>
            {
                entity.HasKey(e => e.PkMaterialgroupbi);

                entity.ToTable("tblMaterialGroupBI");

                entity.Property(e => e.PkMaterialgroupbi).HasColumnName("pk_materialgroupbi");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Materialgroupid).HasColumnName("materialgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMaterialLibrary>(entity =>
            {
                entity.HasKey(e => e.PkMateriallibraryid);

                entity.ToTable("tblMaterialLibrary");

                entity.HasIndex(e => e.FkBasematerialid);

                entity.HasIndex(e => e.FkBoltdiameterdiaid);

                entity.HasIndex(e => e.FkBoltdiameterdnid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkPipetypeid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkScheduleid);

                entity.HasIndex(e => e.FkSubmaterialgroupid);

                entity.HasIndex(e => e.FkThicknessid1);

                entity.HasIndex(e => e.FkThicknessid2);

                entity.HasIndex(e => e.FkUnitofmeasurementid);

                entity.HasIndex(e => new { e.Articlenr, e.Legacyarticlenr1, e.Legacyarticlenr2 })
                    .HasName("UK_tblMaterialLibrary_articlenr_legacyart1_legacyart2")
                    .IsUnique();

                entity.Property(e => e.PkMateriallibraryid).HasColumnName("pk_materiallibraryid");

                entity.Property(e => e.Articledescription)
                    .IsRequired()
                    .HasColumnName("articledescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Articlenr)
                    .HasColumnName("articlenr")
                    .HasMaxLength(20);

                entity.Property(e => e.Boltlengthinch)
                    .HasColumnName("boltlengthinch")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltlengthmm)
                    .HasColumnName("boltlengthmm")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dimension)
                    .HasColumnName("dimension")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasematerialid).HasColumnName("fk_basematerialid");

                entity.Property(e => e.FkBoltdiameterdiaid).HasColumnName("fk_boltdiameterdiaid");

                entity.Property(e => e.FkBoltdiameterdnid).HasColumnName("fk_boltdiameterdnid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkPipetypeid).HasColumnName("fk_pipetypeid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkScheduleid).HasColumnName("fk_scheduleid");

                entity.Property(e => e.FkSubmaterialgroupid).HasColumnName("fk_submaterialgroupid");

                entity.Property(e => e.FkThicknessid1).HasColumnName("fk_thicknessid1");

                entity.Property(e => e.FkThicknessid2).HasColumnName("fk_thicknessid2");

                entity.Property(e => e.FkUnitofmeasurementid).HasColumnName("fk_unitofmeasurementid");

                entity.Property(e => e.Inspectionrequired).HasColumnName("inspectionrequired");

                entity.Property(e => e.Isstock).HasColumnName("isstock");

                entity.Property(e => e.Legacyarticlenr1)
                    .HasColumnName("legacyarticlenr1")
                    .HasMaxLength(20);

                entity.Property(e => e.Legacyarticlenr2)
                    .HasColumnName("legacyarticlenr2")
                    .HasMaxLength(20);

                entity.Property(e => e.Length).HasColumnName("length");

                entity.Property(e => e.Lngtxt).HasColumnName("lngtxt");

                entity.Property(e => e.Material)
                    .HasColumnName("material")
                    .HasMaxLength(50);

                entity.Property(e => e.Mattype)
                    .HasColumnName("mattype")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.FkBasematerial)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkBasematerialid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblBaseMaterial");

                entity.HasOne(d => d.FkBoltdiameterdia)
                    .WithMany(p => p.TblMaterialLibraryFkBoltdiameterdia)
                    .HasForeignKey(d => d.FkBoltdiameterdiaid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblboltdiameterDia");

                entity.HasOne(d => d.FkBoltdiameterdn)
                    .WithMany(p => p.TblMaterialLibraryFkBoltdiameterdn)
                    .HasForeignKey(d => d.FkBoltdiameterdnid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblboltdiameterDn");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblContractor");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblMaterialLibraryFkDia)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblMaterialLibraryFkDn)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblDn");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblLbs");

                entity.HasOne(d => d.FkPipetype)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkPipetypeid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblPipeType");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblPn");

                entity.HasOne(d => d.FkSchedule)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkScheduleid)
                    .HasConstraintName("FK_tblMaterialLibrary_tblSchedule");

                entity.HasOne(d => d.FkSubmaterialgroup)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkSubmaterialgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterialLibrary_tblMaterialGroup");

                entity.HasOne(d => d.FkThicknessid1Navigation)
                    .WithMany(p => p.TblMaterialLibraryFkThicknessid1Navigation)
                    .HasForeignKey(d => d.FkThicknessid1)
                    .HasConstraintName("FK_tblMaterialLibrary_tblThickness1");

                entity.HasOne(d => d.FkThicknessid2Navigation)
                    .WithMany(p => p.TblMaterialLibraryFkThicknessid2Navigation)
                    .HasForeignKey(d => d.FkThicknessid2)
                    .HasConstraintName("FK_tblMaterialLibrary_tblThickness2");

                entity.HasOne(d => d.FkUnitofmeasurement)
                    .WithMany(p => p.TblMaterialLibrary)
                    .HasForeignKey(d => d.FkUnitofmeasurementid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterialLibrary_tblUnitOfMeasurement");
            });

            modelBuilder.Entity<TblMaterialPipeSpec>(entity =>
            {
                entity.HasKey(e => e.PkMaterialpipespecid);

                entity.ToTable("tblMaterialPipeSpec");

                entity.HasIndex(e => e.FkBolttypeid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkGaskettypeid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.Pipespeccode)
                    .HasName("UK_tblMaterialPipeSpec_code")
                    .IsUnique();

                entity.Property(e => e.PkMaterialpipespecid).HasColumnName("pk_materialpipespecid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBolttypeid).HasColumnName("fk_bolttypeid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkGaskettypeid).HasColumnName("fk_gaskettypeid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pipespeccode)
                    .IsRequired()
                    .HasColumnName("pipespeccode")
                    .HasMaxLength(50);

                entity.Property(e => e.Pipespecdescription)
                    .HasColumnName("pipespecdescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkBolttype)
                    .WithMany(p => p.TblMaterialPipeSpec)
                    .HasForeignKey(d => d.FkBolttypeid)
                    .HasConstraintName("FK_tblMaterialPipeSpec_tblBoltType");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblMaterialPipeSpec)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblMaterialPipeSpec_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblMaterialPipeSpec)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblMaterialPipeSpec_tblDn");

                entity.HasOne(d => d.FkGaskettype)
                    .WithMany(p => p.TblMaterialPipeSpec)
                    .HasForeignKey(d => d.FkGaskettypeid)
                    .HasConstraintName("FK_tblMaterialPipeSpec_tblGasketType");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblMaterialPipeSpec)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblMaterialPipeSpec_tblLbs");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblMaterialPipeSpec)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblMaterialPipeSpec_tblPn");
            });

            modelBuilder.Entity<TblMaterialPipeSpecLibrary>(entity =>
            {
                entity.HasKey(e => e.PkMaterialpipespeclibraryid);

                entity.ToTable("tblMaterialPipeSpecLibrary");

                entity.HasIndex(e => e.FkMateriallibraryid);

                entity.HasIndex(e => e.FkMaterialpipespecid);

                entity.Property(e => e.PkMaterialpipespeclibraryid).HasColumnName("pk_materialpipespeclibraryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMateriallibraryid).HasColumnName("fk_materiallibraryid");

                entity.Property(e => e.FkMaterialpipespecid).HasColumnName("fk_materialpipespecid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMateriallibrary)
                    .WithMany(p => p.TblMaterialPipeSpecLibrary)
                    .HasForeignKey(d => d.FkMateriallibraryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterialPipeSpecLibrary_tblMaterialLibrary");

                entity.HasOne(d => d.FkMaterialpipespec)
                    .WithMany(p => p.TblMaterialPipeSpecLibrary)
                    .HasForeignKey(d => d.FkMaterialpipespecid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterialPipeSpecLibrary_tblMaterialPipeSpec");
            });

            modelBuilder.Entity<TblMaterialReceived>(entity =>
            {
                entity.HasKey(e => e.PkMaterialreceivedid);

                entity.ToTable("tblMaterialReceived");

                entity.HasIndex(e => e.FkMaterialsourceid);

                entity.Property(e => e.PkMaterialreceivedid).HasColumnName("pk_materialreceivedid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaterialsourceid).HasColumnName("fk_materialsourceid");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.Memo).HasColumnName("memo");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Received).HasColumnName("received");

                entity.Property(e => e.Receiveduser)
                    .IsRequired()
                    .HasColumnName("receiveduser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMaterialsource)
                    .WithMany(p => p.TblMaterialReceived)
                    .HasForeignKey(d => d.FkMaterialsourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMaterialReceived_tblMaterialSource");
            });

            modelBuilder.Entity<TblMaterialSource>(entity =>
            {
                entity.HasKey(e => e.PkMaterialsourceid);

                entity.ToTable("tblMaterialSource");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.Articlenumber, e.Materialrequestnumber, e.Legacyarticlenumber1, e.Legacyarticlenumber2 })
                    .HasName("uctblmaterialsource")
                    .IsUnique();

                entity.Property(e => e.PkMaterialsourceid).HasColumnName("pk_materialsourceid");

                entity.Property(e => e.Articlenumber)
                    .HasColumnName("articlenumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Legacyarticlenumber1)
                    .HasColumnName("legacyarticlenumber1")
                    .HasMaxLength(50);

                entity.Property(e => e.Legacyarticlenumber2)
                    .HasColumnName("legacyarticlenumber2")
                    .HasMaxLength(50);

                entity.Property(e => e.Materialrequestnumber).HasColumnName("materialrequestnumber");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblMaterialSource)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblmaterialsource_tblProject");
            });

            modelBuilder.Entity<TblMaxOffsetFlangeFaces>(entity =>
            {
                entity.HasKey(e => e.PkMaxoffsetflangefacesid);

                entity.ToTable("tblMaxOffsetFlangeFaces");

                entity.HasIndex(e => e.Maxoffsetflangefacescode)
                    .HasName("UK_tblmaxoffsetflangefaces_code")
                    .IsUnique();

                entity.HasIndex(e => e.Maxoffsetflangefacesdescription)
                    .HasName("UK_tblmaxoffsetflangefaces_description")
                    .IsUnique();

                entity.Property(e => e.PkMaxoffsetflangefacesid).HasColumnName("pk_maxoffsetflangefacesid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Maxoffsetflangefacescode)
                    .IsRequired()
                    .HasColumnName("maxoffsetflangefacescode")
                    .HasMaxLength(50);

                entity.Property(e => e.Maxoffsetflangefacesdescription)
                    .IsRequired()
                    .HasColumnName("maxoffsetflangefacesdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMeeting>(entity =>
            {
                entity.HasKey(e => e.PkMeetingid);

                entity.ToTable("tblMeeting");

                entity.Property(e => e.PkMeetingid).HasColumnName("pk_meetingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Meetingdescription)
                    .IsRequired()
                    .HasColumnName("meetingdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblMilestone>(entity =>
            {
                entity.HasKey(e => e.PkMilestoneid);

                entity.ToTable("tblMilestone");

                entity.HasIndex(e => e.FkCalendarid);

                entity.HasIndex(e => e.FkCbsid);

                entity.HasIndex(e => e.FkObsid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkSubsbsid);

                entity.HasIndex(e => e.FkTemplatemilestoneid);

                entity.HasIndex(e => e.FkUnitid);

                entity.HasIndex(e => e.FkWbsid);

                entity.Property(e => e.PkMilestoneid).HasColumnName("pk_milestoneid");

                entity.Property(e => e.Asdate)
                    .HasColumnName("asdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customactivityid)
                    .HasColumnName("customactivityid")
                    .HasMaxLength(25);

                entity.Property(e => e.Customdescription)
                    .HasColumnName("customdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Esdate)
                    .HasColumnName("esdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.FkCbsid).HasColumnName("fk_cbsid");

                entity.Property(e => e.FkObsid).HasColumnName("fk_obsid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkSubsbsid).HasColumnName("fk_subsbsid");

                entity.Property(e => e.FkTemplatemilestoneid).HasColumnName("fk_templatemilestoneid");

                entity.Property(e => e.FkUnitid).HasColumnName("fk_unitid");

                entity.Property(e => e.FkWbsid).HasColumnName("fk_wbsid");

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Lsdate)
                    .HasColumnName("lsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Milestoneconstraintdate1)
                    .HasColumnName("milestoneconstraintdate1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Milestoneconstraintdate2)
                    .HasColumnName("milestoneconstraintdate2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Milestoneconstrainttype).HasColumnName("milestoneconstrainttype");

                entity.Property(e => e.Milestonefreefloat).HasColumnName("milestonefreefloat");

                entity.Property(e => e.Milestonetotalfloat).HasColumnName("milestonetotalfloat");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Psdate)
                    .HasColumnName("psdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schedulestatus).HasColumnName("schedulestatus");

                entity.Property(e => e.Schedulestatusdescription).HasColumnName("schedulestatusdescription");

                entity.Property(e => e.Scopejobignoreconstraint).HasColumnName("scopejobignoreconstraint");

                entity.Property(e => e.Startfinish).HasColumnName("startfinish");

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkCalendarid)
                    .HasConstraintName("FK_tblMilestone_tblCalendar");

                entity.HasOne(d => d.FkCbs)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkCbsid)
                    .HasConstraintName("FK_tblMilestone_tblCbs");

                entity.HasOne(d => d.FkObs)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkObsid)
                    .HasConstraintName("FK_tblMilestone_tblObs");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMilestone_tblProject");

                entity.HasOne(d => d.FkSubsbs)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkSubsbsid)
                    .HasConstraintName("FK_tblMilestone_tblSubSBS");

                entity.HasOne(d => d.FkTemplatemilestone)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkTemplatemilestoneid)
                    .HasConstraintName("FK_tblMilestone_tblTemplateMilestone");

                entity.HasOne(d => d.FkUnit)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkUnitid)
                    .HasConstraintName("FK_tblMilestone_tblUnit");

                entity.HasOne(d => d.FkWbs)
                    .WithMany(p => p.TblMilestone)
                    .HasForeignKey(d => d.FkWbsid)
                    .HasConstraintName("FK_tblMilestone_tblWbs");
            });

            modelBuilder.Entity<TblMilestoneTarget>(entity =>
            {
                entity.HasKey(e => e.PkMilestonetargetid);

                entity.ToTable("tblMilestoneTarget");

                entity.HasIndex(e => e.FkCalendarid);

                entity.HasIndex(e => e.FkMilestoneid);

                entity.HasIndex(e => e.FkTargetid);

                entity.Property(e => e.PkMilestonetargetid).HasColumnName("pk_milestonetargetid");

                entity.Property(e => e.Afdate)
                    .HasColumnName("afdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Asdate)
                    .HasColumnName("asdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Esdate)
                    .HasColumnName("esdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.FkMilestoneid).HasColumnName("fk_milestoneid");

                entity.Property(e => e.FkTargetid).HasColumnName("fk_targetid");

                entity.Property(e => e.Lsdate)
                    .HasColumnName("lsdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Milestonetargetfreefloat).HasColumnName("milestonetargetfreefloat");

                entity.Property(e => e.Milestonetargettotalfloat).HasColumnName("milestonetargettotalfloat");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Psdate)
                    .HasColumnName("psdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblMilestoneTarget)
                    .HasForeignKey(d => d.FkCalendarid)
                    .HasConstraintName("FK_tblMilestoneTarget_tblCalendar");

                entity.HasOne(d => d.FkMilestone)
                    .WithMany(p => p.TblMilestoneTarget)
                    .HasForeignKey(d => d.FkMilestoneid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMilestoneTarget_tblMilestone");

                entity.HasOne(d => d.FkTarget)
                    .WithMany(p => p.TblMilestoneTarget)
                    .HasForeignKey(d => d.FkTargetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblMilestoneTarget_tblTarget");
            });

            modelBuilder.Entity<TblMyIsolationlist>(entity =>
            {
                entity.HasKey(e => e.PkMyisolationlistid);

                entity.ToTable("tblMyIsolationlist");

                entity.Property(e => e.PkMyisolationlistid).HasColumnName("pk_myisolationlistid");

                entity.Property(e => e.FkIsolationlistid).HasColumnName("fk_isolationlistid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Visible).HasColumnName("visible");

                entity.HasOne(d => d.FkIsolationlist)
                    .WithMany(p => p.TblMyIsolationlist)
                    .HasForeignKey(d => d.FkIsolationlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MyIsolationlist_Isolationlist");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblMyIsolationlist)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MyIsolationlist_User");
            });

            modelBuilder.Entity<TblNdeBatch>(entity =>
            {
                entity.HasKey(e => e.PkNdebatchid);

                entity.ToTable("tblNdeBatch");

                entity.HasIndex(e => e.FkFreezeuserid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Batchnr })
                    .HasName("UK_tblNdeBatch_ProjectBatchNr")
                    .IsUnique();

                entity.Property(e => e.PkNdebatchid).HasColumnName("pk_ndebatchid");

                entity.Property(e => e.Batchname)
                    .IsRequired()
                    .HasColumnName("batchname")
                    .HasMaxLength(50);

                entity.Property(e => e.Batchnr)
                    .IsRequired()
                    .HasColumnName("batchnr")
                    .HasMaxLength(25);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkFreezeuserid).HasColumnName("fk_freezeuserid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkFreezeuser)
                    .WithMany(p => p.TblNdeBatch)
                    .HasForeignKey(d => d.FkFreezeuserid)
                    .HasConstraintName("FK_tblNdeBatch_tblUser");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblNdeBatch)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNdeBatch_tblProject");
            });

            modelBuilder.Entity<TblNdeClass>(entity =>
            {
                entity.HasKey(e => e.PkNdeclassid);

                entity.ToTable("tblNdeClass");

                entity.Property(e => e.PkNdeclassid).HasColumnName("pk_ndeclassid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblNdeDeadline>(entity =>
            {
                entity.HasKey(e => e.PkNdedeadline);

                entity.ToTable("tblNdeDeadline");

                entity.Property(e => e.PkNdedeadline).HasColumnName("pk_ndedeadline");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Isweldinspection).HasColumnName("isweldinspection");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ndedeadlinecode)
                    .IsRequired()
                    .HasColumnName("ndedeadlinecode")
                    .HasMaxLength(25);

                entity.Property(e => e.Ndedeadlinedescription)
                    .IsRequired()
                    .HasColumnName("ndedeadlinedescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Ndedeadlinesequencenumber).HasColumnName("ndedeadlinesequencenumber");
            });

            modelBuilder.Entity<TblNdeMain>(entity =>
            {
                entity.HasKey(e => e.PkNdemainid);

                entity.ToTable("tblNdeMain");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.Property(e => e.PkNdemainid).HasColumnName("pk_ndemainid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.De)
                    .HasColumnName("de")
                    .HasMaxLength(50);

                entity.Property(e => e.En)
                    .HasColumnName("en")
                    .HasMaxLength(50);

                entity.Property(e => e.Es)
                    .HasColumnName("es")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.Fr)
                    .HasColumnName("fr")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nl)
                    .HasColumnName("nl")
                    .HasMaxLength(50);

                entity.Property(e => e.Spec)
                    .HasColumnName("spec")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblNdeMain)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .HasConstraintName("FK_tblNdeMain_tblDocumentLabel");
            });

            modelBuilder.Entity<TblNdePipeLocationLink>(entity =>
            {
                entity.HasKey(e => e.PkNdepipelocationlinkid);

                entity.ToTable("tblNdePipeLocationLink");

                entity.HasIndex(e => e.FkMaterialpipespecid);

                entity.HasIndex(e => e.FkNdeclassid);

                entity.Property(e => e.PkNdepipelocationlinkid).HasColumnName("pk_ndepipelocationlinkid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaterialpipespecid).HasColumnName("fk_materialpipespecid");

                entity.Property(e => e.FkNdeclassid).HasColumnName("fk_ndeclassid");

                entity.Property(e => e.Locationenumvalue).HasColumnName("locationenumvalue");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Percentage).HasColumnName("percentage");

                entity.HasOne(d => d.FkMaterialpipespec)
                    .WithMany(p => p.TblNdePipeLocationLink)
                    .HasForeignKey(d => d.FkMaterialpipespecid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNdePipeLocationLink_tblMaterialPipeSpec");

                entity.HasOne(d => d.FkNdeclass)
                    .WithMany(p => p.TblNdePipeLocationLink)
                    .HasForeignKey(d => d.FkNdeclassid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNdePipeLocationLink_tblNdeClass");
            });

            modelBuilder.Entity<TblNdeRequest>(entity =>
            {
                entity.HasKey(e => e.PkNderequestid);

                entity.ToTable("tblNdeRequest");

                entity.HasIndex(e => e.FkAcknowledgebyuserid);

                entity.HasIndex(e => e.FkBasematerialid);

                entity.HasIndex(e => e.FkCancelbyuserid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkFillermaterialid);

                entity.HasIndex(e => e.FkInspectionvalueuomid);

                entity.HasIndex(e => e.FkNdebatchid);

                entity.HasIndex(e => e.FkNdecontractorid);

                entity.HasIndex(e => e.FkNdedeadlineid);

                entity.HasIndex(e => e.FkNdemainid);

                entity.HasIndex(e => e.FkNderesultid);

                entity.HasIndex(e => e.FkNdesubid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkReadybyuserid);

                entity.HasIndex(e => e.FkRequestbyuserid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkWeldconnectionid);

                entity.HasIndex(e => e.FkWelderid);

                entity.HasIndex(e => e.FkWeldprocessid);

                entity.HasIndex(e => new { e.FkProjectid, e.Nderequestnr, e.Reexaminationnr })
                    .HasName("UK_tblNdeRequest_Requestnr")
                    .IsUnique();

                entity.Property(e => e.PkNderequestid).HasColumnName("pk_nderequestid");

                entity.Property(e => e.Acknowledgedate)
                    .HasColumnName("acknowledgedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Canceldate)
                    .HasColumnName("canceldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkAcknowledgebyuserid).HasColumnName("fk_acknowledgebyuserid");

                entity.Property(e => e.FkBasematerialid).HasColumnName("fk_basematerialid");

                entity.Property(e => e.FkCancelbyuserid).HasColumnName("fk_cancelbyuserid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkFillermaterialid).HasColumnName("fk_fillermaterialid");

                entity.Property(e => e.FkInspectionvalueuomid).HasColumnName("fk_inspectionvalueuomid");

                entity.Property(e => e.FkNdebatchid).HasColumnName("fk_ndebatchid");

                entity.Property(e => e.FkNdecontractorid).HasColumnName("fk_ndecontractorid");

                entity.Property(e => e.FkNdedeadlineid).HasColumnName("fk_ndedeadlineid");

                entity.Property(e => e.FkNdemainid).HasColumnName("fk_ndemainid");

                entity.Property(e => e.FkNderesultid).HasColumnName("fk_nderesultid");

                entity.Property(e => e.FkNdesubid).HasColumnName("fk_ndesubid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkReadybyuserid).HasColumnName("fk_readybyuserid");

                entity.Property(e => e.FkRequestbyuserid).HasColumnName("fk_requestbyuserid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkWeldconnectionid).HasColumnName("fk_weldconnectionid");

                entity.Property(e => e.FkWelderid).HasColumnName("fk_welderid");

                entity.Property(e => e.FkWeldprocessid).HasColumnName("fk_weldprocessid");

                entity.Property(e => e.Inspectionvalue)
                    .HasColumnName("inspectionvalue")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Isreexaminated).HasColumnName("isreexaminated");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nderequestnr)
                    .IsRequired()
                    .HasColumnName("nderequestnr")
                    .HasMaxLength(20);

                entity.Property(e => e.Plannedarealoc)
                    .HasColumnName("plannedarealoc")
                    .HasMaxLength(25);

                entity.Property(e => e.Plannedexedate)
                    .HasColumnName("plannedexedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plannedprio).HasColumnName("plannedprio");

                entity.Property(e => e.Plannedteam).HasColumnName("plannedteam");

                entity.Property(e => e.Readydate)
                    .HasColumnName("readydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reexaminationnr).HasColumnName("reexaminationnr");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(250);

                entity.Property(e => e.Requestdate)
                    .HasColumnName("requestdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Requesttypeenumvalue).HasColumnName("requesttypeenumvalue");

                entity.Property(e => e.Resultdefectlengthansi)
                    .HasColumnName("resultdefectlengthansi")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Resultdefectlengthdin)
                    .HasColumnName("resultdefectlengthdin")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Resultfilmnr)
                    .HasColumnName("resultfilmnr")
                    .HasMaxLength(50);

                entity.Property(e => e.Resultmemo)
                    .HasColumnName("resultmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Resultreportnr)
                    .HasColumnName("resultreportnr")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkAcknowledgebyuser)
                    .WithMany(p => p.TblNdeRequestFkAcknowledgebyuser)
                    .HasForeignKey(d => d.FkAcknowledgebyuserid)
                    .HasConstraintName("FK_tblNdeRequest_tblUser_Acknowledgedby");

                entity.HasOne(d => d.FkBasematerial)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkBasematerialid)
                    .HasConstraintName("FK_tblNdeRequest_tblBaseMaterial");

                entity.HasOne(d => d.FkCancelbyuser)
                    .WithMany(p => p.TblNdeRequestFkCancelbyuser)
                    .HasForeignKey(d => d.FkCancelbyuserid)
                    .HasConstraintName("FK_tblNdeRequest_tblUser_CancelUser");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblNdeRequestFkContractor)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblNdeRequest_tblContractor");

                entity.HasOne(d => d.FkFillermaterial)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkFillermaterialid)
                    .HasConstraintName("FK_tblNdeRequest_tblFillerMaterial");

                entity.HasOne(d => d.FkInspectionvalueuom)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkInspectionvalueuomid)
                    .HasConstraintName("FK_tblNdeRequest_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkNdebatch)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkNdebatchid)
                    .HasConstraintName("FK_tblNdeRequest_tblNdeBatch");

                entity.HasOne(d => d.FkNdecontractor)
                    .WithMany(p => p.TblNdeRequestFkNdecontractor)
                    .HasForeignKey(d => d.FkNdecontractorid)
                    .HasConstraintName("FK_tblNdeRequest_tblContractor_NdeCompany");

                entity.HasOne(d => d.FkNdedeadline)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkNdedeadlineid)
                    .HasConstraintName("FK_tblNdeRequest_tblNdeDeadline");

                entity.HasOne(d => d.FkNdemain)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkNdemainid)
                    .HasConstraintName("FK_tblNdeRequest_tblNdeMain");

                entity.HasOne(d => d.FkNderesult)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkNderesultid)
                    .HasConstraintName("FK_tblNdeRequest_tblNdeResults");

                entity.HasOne(d => d.FkNdesub)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkNdesubid)
                    .HasConstraintName("FK_tblNdeRequest_tblNdeSub");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblNdeRequest_tblProject");

                entity.HasOne(d => d.FkReadybyuser)
                    .WithMany(p => p.TblNdeRequestFkReadybyuser)
                    .HasForeignKey(d => d.FkReadybyuserid)
                    .HasConstraintName("FK_tblNdeRequest_tblUser_NdeResRdyUser");

                entity.HasOne(d => d.FkRequestbyuser)
                    .WithMany(p => p.TblNdeRequestFkRequestbyuser)
                    .HasForeignKey(d => d.FkRequestbyuserid)
                    .HasConstraintName("FK_tblNdeRequest_tblUser_Requestor");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblNderRquest_tblScope");

                entity.HasOne(d => d.FkWeldconnection)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkWeldconnectionid)
                    .HasConstraintName("FK_tblNdeRequest_tblWeldConnection");

                entity.HasOne(d => d.FkWelder)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkWelderid)
                    .HasConstraintName("FK_tblNdeRequest_tblWelder");

                entity.HasOne(d => d.FkWeldprocess)
                    .WithMany(p => p.TblNdeRequest)
                    .HasForeignKey(d => d.FkWeldprocessid)
                    .HasConstraintName("FK_tblNdeRequest_tblWeldProcess");
            });

            modelBuilder.Entity<TblNdeRequestDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkNderequestdocumentlabelid);

                entity.ToTable("tblNdeRequestDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkNderequestid);

                entity.HasIndex(e => new { e.FkNderequestid, e.FkDocumentlabelid })
                    .HasName("UK_tblNdeRequestDocumentLabel_fk_nderequestid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkNderequestdocumentlabelid).HasColumnName("pk_nderequestdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkNderequestid).HasColumnName("fk_nderequestid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblNdeRequestDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNdeRequestDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkNderequest)
                    .WithMany(p => p.TblNdeRequestDocumentLabel)
                    .HasForeignKey(d => d.FkNderequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNdeRequestDocumentLabel_tblNdeRequest");
            });

            modelBuilder.Entity<TblNdeResults>(entity =>
            {
                entity.HasKey(e => e.PkNderesultid);

                entity.ToTable("tblNdeResults");

                entity.Property(e => e.PkNderesultid).HasColumnName("pk_nderesultid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Isready).HasColumnName("isready");

                entity.Property(e => e.Isreexamination).HasColumnName("isreexamination");

                entity.Property(e => e.Isrepair).HasColumnName("isrepair");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblNdeSub>(entity =>
            {
                entity.HasKey(e => e.PkNdesubid);

                entity.ToTable("tblNdeSub");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkNdemainid);

                entity.Property(e => e.PkNdesubid).HasColumnName("pk_ndesubid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.De)
                    .HasColumnName("de")
                    .HasMaxLength(50);

                entity.Property(e => e.En)
                    .HasColumnName("en")
                    .HasMaxLength(50);

                entity.Property(e => e.Es)
                    .HasColumnName("es")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkNdemainid).HasColumnName("fk_ndemainid");

                entity.Property(e => e.Fr)
                    .HasColumnName("fr")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nl)
                    .HasColumnName("nl")
                    .HasMaxLength(50);

                entity.Property(e => e.Spec)
                    .IsRequired()
                    .HasColumnName("spec")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblNdeSub)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .HasConstraintName("FK_tblNdeSub_tblDocumentLabel");

                entity.HasOne(d => d.FkNdemain)
                    .WithMany(p => p.TblNdeSub)
                    .HasForeignKey(d => d.FkNdemainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNdeSub_tblNdeMain");
            });

            modelBuilder.Entity<TblNode>(entity =>
            {
                entity.HasKey(e => e.PkNodeid);

                entity.ToTable("tblNode", "isolation");

                entity.Property(e => e.PkNodeid).HasColumnName("pk_nodeid");

                entity.Property(e => e.DkBlindpointactivityid).HasColumnName("dk_blindpointactivityid");

                entity.Property(e => e.DkBlindprojectmainphasesubphasereleasefinishid).HasColumnName("dk_blindprojectmainphasesubphasereleasefinishid");

                entity.Property(e => e.Phasegrouping)
                    .HasColumnName("phasegrouping")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblNormbase>(entity =>
            {
                entity.HasKey(e => e.PkNormbaseid);

                entity.ToTable("tblNormbase");

                entity.HasIndex(e => e.FkCalcgroupmainid);

                entity.HasIndex(e => e.FkCalcgroupsubid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkUnitofmeasurementid);

                entity.HasIndex(e => new { e.PkNormbaseid, e.FkCalcgroupmainid, e.FkCalcgroupsubid, e.Normbasetype })
                    .HasName("IX_tblNormbase_normbasetype_with_includes");

                entity.Property(e => e.PkNormbaseid).HasColumnName("pk_normbaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalcgroupmainid).HasColumnName("fk_calcgroupmainid");

                entity.Property(e => e.FkCalcgroupsubid).HasColumnName("fk_calcgroupsubid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkUnitofmeasurementid).HasColumnName("fk_unitofmeasurementid");

                entity.Property(e => e.Hours)
                    .HasColumnName("hours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Maxdia)
                    .HasColumnName("maxdia")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Maxdn)
                    .HasColumnName("maxdn")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Maxlbs)
                    .HasColumnName("maxlbs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Maxpn)
                    .HasColumnName("maxpn")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Maxqty)
                    .HasColumnName("maxqty")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Mindia)
                    .HasColumnName("mindia")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Mindn)
                    .HasColumnName("mindn")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Minlbs)
                    .HasColumnName("minlbs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Minpn)
                    .HasColumnName("minpn")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Minqty)
                    .HasColumnName("minqty")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normbasedescription)
                    .HasColumnName("normbasedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Normbasetype)
                    .IsRequired()
                    .HasColumnName("normbasetype")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Od)
                    .HasColumnName("od")
                    .HasMaxLength(100);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Refcol)
                    .HasColumnName("refcol")
                    .HasMaxLength(50);

                entity.Property(e => e.Reftable)
                    .HasColumnName("reftable")
                    .HasMaxLength(50);

                entity.Property(e => e.Rev)
                    .HasColumnName("rev")
                    .HasMaxLength(10);

                entity.Property(e => e.Sched)
                    .HasColumnName("sched")
                    .HasMaxLength(100);

                entity.Property(e => e.Wt)
                    .HasColumnName("wt")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkCalcgroupmain)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkCalcgroupmainid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormbase_fk_calcgroupmainid");

                entity.HasOne(d => d.FkCalcgroupsub)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkCalcgroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormbase_fk_calcgroupsubid");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblNormbase_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblNormbase_tblDn");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblNormbase_tblLbs");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblNormbase_tblPn");

                entity.HasOne(d => d.FkUnitofmeasurement)
                    .WithMany(p => p.TblNormbase)
                    .HasForeignKey(d => d.FkUnitofmeasurementid)
                    .HasConstraintName("FK_tblNormbase_fk_unitofmeasurementid");
            });

            modelBuilder.Entity<TblNormbaseMemo>(entity =>
            {
                entity.HasKey(e => e.PkNormbasememoid);

                entity.ToTable("tblNormbaseMemo");

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => new { e.FkNormsetid, e.Normbasememocode })
                    .HasName("UC_tblNormbaseMemo_normset_normbasememocode")
                    .IsUnique();

                entity.Property(e => e.PkNormbasememoid).HasColumnName("pk_normbasememoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normbasememocode)
                    .IsRequired()
                    .HasColumnName("normbasememocode")
                    .HasMaxLength(10);

                entity.Property(e => e.Normbasememodescription)
                    .IsRequired()
                    .HasColumnName("normbasememodescription");

                entity.Property(e => e.Normbasetype)
                    .IsRequired()
                    .HasColumnName("normbasetype")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblNormbaseMemo)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormbaseMemo_fk_normsetid");
            });

            modelBuilder.Entity<TblNormset>(entity =>
            {
                entity.HasKey(e => e.PkNormsetid);

                entity.ToTable("tblNormset");

                entity.HasIndex(e => e.Normsetcode)
                    .HasName("UC_tblNormset_normsetcode")
                    .IsUnique();

                entity.HasIndex(e => e.Normsetdescription)
                    .HasName("UC_tblNormset_normsetdescription")
                    .IsUnique();

                entity.Property(e => e.PkNormsetid).HasColumnName("pk_normsetid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Multiplynormsetcorrectionfactors).HasColumnName("multiplynormsetcorrectionfactors");

                entity.Property(e => e.Normsetcode)
                    .IsRequired()
                    .HasColumnName("normsetcode")
                    .HasMaxLength(20);

                entity.Property(e => e.Normsetdescription)
                    .IsRequired()
                    .HasColumnName("normsetdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Validfrom)
                    .HasColumnName("validfrom")
                    .HasColumnType("datetime");

                entity.Property(e => e.Validto)
                    .HasColumnName("validto")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TblNormsetCircumstanceCalcCorfactor>(entity =>
            {
                entity.HasKey(e => e.PkNormsetcircumstancecalccorfactorid);

                entity.ToTable("tblNormsetCircumstanceCalcCorfactor");

                entity.HasIndex(e => e.FkCalccorfactorid);

                entity.HasIndex(e => e.FkCircumstanceid);

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => new { e.FkNormsetid, e.FkCircumstanceid })
                    .HasName("UK_tblNormsetCircumstanceCalcCorfactor")
                    .IsUnique();

                entity.Property(e => e.PkNormsetcircumstancecalccorfactorid).HasColumnName("pk_normsetcircumstancecalccorfactorid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalccorfactorid).HasColumnName("fk_calccorfactorid");

                entity.Property(e => e.FkCircumstanceid).HasColumnName("fk_circumstanceid");

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalccorfactor)
                    .WithMany(p => p.TblNormsetCircumstanceCalcCorfactor)
                    .HasForeignKey(d => d.FkCalccorfactorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormsetCircumstanceCalcCorfactor_tblCalcCorfactor");

                entity.HasOne(d => d.FkCircumstance)
                    .WithMany(p => p.TblNormsetCircumstanceCalcCorfactor)
                    .HasForeignKey(d => d.FkCircumstanceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormsetCircumstanceCalcCorfactor_tblCircumstance");

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblNormsetCircumstanceCalcCorfactor)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormsetCircumstanceCalcCorfactor_tblNormset");
            });

            modelBuilder.Entity<TblNormsetElevationCalcCorfactor>(entity =>
            {
                entity.HasKey(e => e.PkNormsetelevationcalccorfactorid);

                entity.ToTable("tblNormsetElevationCalcCorfactor");

                entity.HasIndex(e => e.FkCalccorfactorid);

                entity.HasIndex(e => e.FkElevationid);

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => new { e.FkNormsetid, e.FkElevationid })
                    .HasName("UK_tblNormsetElevationCalcCorfactor")
                    .IsUnique();

                entity.Property(e => e.PkNormsetelevationcalccorfactorid).HasColumnName("pk_normsetelevationcalccorfactorid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalccorfactorid).HasColumnName("fk_calccorfactorid");

                entity.Property(e => e.FkElevationid).HasColumnName("fk_elevationid");

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalccorfactor)
                    .WithMany(p => p.TblNormsetElevationCalcCorfactor)
                    .HasForeignKey(d => d.FkCalccorfactorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormsetElevationCalcCorfactor_tblCalcCorfactor");

                entity.HasOne(d => d.FkElevation)
                    .WithMany(p => p.TblNormsetElevationCalcCorfactor)
                    .HasForeignKey(d => d.FkElevationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormsetElevationCalcCorfactor_tblElevation");

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblNormsetElevationCalcCorfactor)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblNormsetElevationCalcCorfactor_tblNormset");
            });

            modelBuilder.Entity<TblObs>(entity =>
            {
                entity.HasKey(e => e.PkObsid);

                entity.ToTable("tblObs");

                entity.HasIndex(e => e.FkObsparentid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Exportcode })
                    .HasName("UQ_tblObs_projectid_exportcode")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProjectid, e.Obsnr })
                    .HasName("UQ_tblObs_projectid_Obsnr")
                    .IsUnique();

                entity.Property(e => e.PkObsid).HasColumnName("pk_obsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Exportcode)
                    .IsRequired()
                    .HasColumnName("exportcode")
                    .HasMaxLength(3);

                entity.Property(e => e.FkObsparentid).HasColumnName("fk_obsparentid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Obsdescription)
                    .IsRequired()
                    .HasColumnName("obsdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Obsname)
                    .IsRequired()
                    .HasColumnName("obsname")
                    .HasMaxLength(100);

                entity.Property(e => e.Obsnr)
                    .IsRequired()
                    .HasColumnName("obsnr")
                    .HasMaxLength(100);

                entity.Property(e => e.Obssortorder)
                    .IsRequired()
                    .HasColumnName("obssortorder")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkObsparent)
                    .WithMany(p => p.InverseFkObsparent)
                    .HasForeignKey(d => d.FkObsparentid)
                    .HasConstraintName("FK_tblObs_tblObs");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblObs)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblObs_tblProject");
            });

            modelBuilder.Entity<TblOrganisation>(entity =>
            {
                entity.HasKey(e => e.PkOrganisationid);

                entity.ToTable("tblOrganisation");

                entity.Property(e => e.PkOrganisationid).HasColumnName("pk_organisationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Organisationname)
                    .IsRequired()
                    .HasColumnName("organisationname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblOrganisationStructure>(entity =>
            {
                entity.HasKey(e => e.PkOrganisationstructureid);

                entity.ToTable("tblOrganisationStructure");

                entity.HasIndex(e => e.FkOrganisationid);

                entity.HasIndex(e => e.FkParentorganisationstructureid);

                entity.Property(e => e.PkOrganisationstructureid).HasColumnName("pk_organisationstructureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkOrganisationid).HasColumnName("fk_organisationid");

                entity.Property(e => e.FkParentorganisationstructureid).HasColumnName("fk_parentorganisationstructureid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Organisationstructurename)
                    .IsRequired()
                    .HasColumnName("organisationstructurename")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkOrganisation)
                    .WithMany(p => p.TblOrganisationStructure)
                    .HasForeignKey(d => d.FkOrganisationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblOrganisationStrucure_tblOrganisation");

                entity.HasOne(d => d.FkParentorganisationstructure)
                    .WithMany(p => p.InverseFkParentorganisationstructure)
                    .HasForeignKey(d => d.FkParentorganisationstructureid)
                    .HasConstraintName("FK_tblOrganisationStrucure_tblOrganisationStructure");
            });

            modelBuilder.Entity<TblP6customField>(entity =>
            {
                entity.HasKey(e => e.PkP6customfieldid);

                entity.ToTable("tblP6CustomField");

                entity.Property(e => e.PkP6customfieldid).HasColumnName("pk_p6customfieldid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.P6customfieldcode)
                    .IsRequired()
                    .HasColumnName("p6customfieldcode")
                    .HasMaxLength(20);

                entity.Property(e => e.P6customfielddescription)
                    .HasColumnName("p6customfielddescription")
                    .HasMaxLength(1000);

                entity.Property(e => e.P6customfieldexportlevel).HasColumnName("p6customfieldexportlevel");
            });

            modelBuilder.Entity<TblP6profile>(entity =>
            {
                entity.HasKey(e => e.PkP6profileid);

                entity.ToTable("tblP6Profile");

                entity.Property(e => e.PkP6profileid).HasColumnName("pk_p6profileid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.P6profilename)
                    .IsRequired()
                    .HasColumnName("p6profilename")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblP6profileCustomField>(entity =>
            {
                entity.HasKey(e => e.PkP6profilecustomfieldid);

                entity.ToTable("tblP6ProfileCustomField");

                entity.HasIndex(e => e.FkP6customfieldid);

                entity.HasIndex(e => e.FkP6profileid);

                entity.HasIndex(e => new { e.FkP6profileid, e.FkP6customfieldid })
                    .HasName("UK_tblP6ProfileCustomField")
                    .IsUnique();

                entity.Property(e => e.PkP6profilecustomfieldid).HasColumnName("pk_p6profilecustomfieldid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkP6customfieldid).HasColumnName("fk_p6customfieldid");

                entity.Property(e => e.FkP6profileid).HasColumnName("fk_p6profileid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkP6customfield)
                    .WithMany(p => p.TblP6profileCustomField)
                    .HasForeignKey(d => d.FkP6customfieldid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6ProfileCustomField_tblP6CustomField");

                entity.HasOne(d => d.FkP6profile)
                    .WithMany(p => p.TblP6profileCustomField)
                    .HasForeignKey(d => d.FkP6profileid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6ProfileCustomField_tblP6Profile");
            });

            modelBuilder.Entity<TblP6session>(entity =>
            {
                entity.HasKey(e => e.PkP6sessionid);

                entity.ToTable("tblP6Session", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkP6sessionid).HasColumnName("pk_p6sessionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Sessionguid)
                    .IsRequired()
                    .HasColumnName("sessionguid")
                    .HasMaxLength(40);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblP6session)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6Session_fk_projectid");
            });

            modelBuilder.Entity<TblP6sessionHeartbeat>(entity =>
            {
                entity.HasKey(e => e.PkP6sessionheartbeatid);

                entity.ToTable("tblP6SessionHeartbeat", "rsy");

                entity.HasIndex(e => e.FkP6sessionid);

                entity.Property(e => e.PkP6sessionheartbeatid).HasColumnName("pk_p6sessionheartbeatid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dotnet)
                    .HasColumnName("dotnet")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkP6sessionid).HasColumnName("fk_p6sessionid");

                entity.Property(e => e.Java)
                    .HasColumnName("java")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkP6session)
                    .WithMany(p => p.TblP6sessionHeartbeat)
                    .HasForeignKey(d => d.FkP6sessionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6SessionHeartbeat_tblP6Session");
            });

            modelBuilder.Entity<TblP6sessionLog>(entity =>
            {
                entity.HasKey(e => e.PkP6sessionlogid);

                entity.ToTable("tblP6SessionLog", "rsy");

                entity.HasIndex(e => e.FkP6sessionid);

                entity.Property(e => e.PkP6sessionlogid).HasColumnName("pk_p6sessionlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkP6sessionid).HasColumnName("fk_p6sessionid");

                entity.Property(e => e.Log)
                    .IsRequired()
                    .HasColumnName("log");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkP6session)
                    .WithMany(p => p.TblP6sessionLog)
                    .HasForeignKey(d => d.FkP6sessionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6SessionLog_fk_p6sessionid");
            });

            modelBuilder.Entity<TblP6sessionMilestone>(entity =>
            {
                entity.HasKey(e => e.PkP6sessionmilestoneid);

                entity.ToTable("tblP6SessionMilestone", "rsy");

                entity.HasIndex(e => e.FkP6sessionid);

                entity.Property(e => e.PkP6sessionmilestoneid).HasColumnName("pk_p6sessionmilestoneid");

                entity.Property(e => e.Cbs).HasColumnName("CBS");

                entity.Property(e => e.Cbsdescr).HasColumnName("CBSDescr");

                entity.Property(e => e.Cbsexport).HasColumnName("CBSExport");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkP6sessionid).HasColumnName("fk_p6sessionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.MstartDescr).HasColumnName("mstart_descr");

                entity.Property(e => e.MstartSortorder).HasColumnName("mstart_sortorder");

                entity.Property(e => e.MstartStartfinish)
                    .HasColumnName("mstart_startfinish")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MstartType).HasColumnName("mstart_type");

                entity.Property(e => e.MstopDescr).HasColumnName("mstop_descr");

                entity.Property(e => e.MstopSortorder).HasColumnName("mstop_sortorder");

                entity.Property(e => e.MstopStartfinish)
                    .HasColumnName("mstop_startfinish")
                    .HasColumnType("char(1)");

                entity.Property(e => e.MstopType).HasColumnName("mstop_type");

                entity.Property(e => e.Obs).HasColumnName("OBS");

                entity.Property(e => e.Obsdescr).HasColumnName("OBSDescr");

                entity.Property(e => e.Obsexport).HasColumnName("OBSExport");

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Pau).HasColumnName("PAU");

                entity.Property(e => e.Paudescr).HasColumnName("PAUDescr");

                entity.Property(e => e.Pauexport).HasColumnName("PAUExport");

                entity.Property(e => e.Relation)
                    .HasColumnName("relation")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Sbs1).HasColumnName("SBS1");

                entity.Property(e => e.Sbs1descr).HasColumnName("SBS1Descr");

                entity.Property(e => e.Sbs1export).HasColumnName("SBS1Export");

                entity.Property(e => e.Sbs2).HasColumnName("SBS2");

                entity.Property(e => e.Sbs2descr).HasColumnName("SBS2Descr");

                entity.Property(e => e.Sbs2export).HasColumnName("SBS2Export");

                entity.Property(e => e.Sbs3).HasColumnName("SBS3");

                entity.Property(e => e.Sbs3descr).HasColumnName("SBS3Descr");

                entity.Property(e => e.Sbs3export).HasColumnName("SBS3Export");

                entity.Property(e => e.Scopeid).HasColumnName("scopeid");

                entity.Property(e => e.Scopenr).HasColumnName("scopenr");

                entity.Property(e => e.Startid).HasColumnName("startid");

                entity.Property(e => e.Starttype)
                    .HasColumnName("starttype")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Stopid).HasColumnName("stopid");

                entity.Property(e => e.Stoptype)
                    .HasColumnName("stoptype")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Wbs).HasColumnName("WBS");

                entity.Property(e => e.Wbsdescr).HasColumnName("WBSDescr");

                entity.Property(e => e.Wbsexport).HasColumnName("WBSExport");

                entity.HasOne(d => d.FkP6session)
                    .WithMany(p => p.TblP6sessionMilestone)
                    .HasForeignKey(d => d.FkP6sessionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6SessionMilestone_fk_p6sessionid");
            });

            modelBuilder.Entity<TblP6sessionPlancard>(entity =>
            {
                entity.HasKey(e => e.PkP6sessionplancardid);

                entity.ToTable("tblP6SessionPlancard", "rsy");

                entity.HasIndex(e => e.DkScopejobdetailresid)
                    .HasName("IX_tblP6SessionPlancard_fk_scopejobdetailresid");

                entity.HasIndex(e => e.DkScopejobid)
                    .HasName("IX_tblP6SessionPlancard_fk_scopejobid");

                entity.HasIndex(e => e.FkP6sessionid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblP6SessionPlancard_Scope_Modifydate");

                entity.Property(e => e.PkP6sessionplancardid).HasColumnName("pk_p6sessionplancardid");

                entity.Property(e => e.Adis).HasColumnName("adis");

                entity.Property(e => e.Adisdescr).HasColumnName("adisdescr");

                entity.Property(e => e.Approved).HasColumnName("approved");

                entity.Property(e => e.Areacodecode).HasColumnName("areacodecode");

                entity.Property(e => e.Areacodedescription).HasColumnName("areacodedescription");

                entity.Property(e => e.Buildingcode).HasColumnName("buildingcode");

                entity.Property(e => e.Buildingdescription).HasColumnName("buildingdescription");

                entity.Property(e => e.Calchrs).HasColumnName("calchrs");

                entity.Property(e => e.Calendarcode).HasColumnName("calendarcode");

                entity.Property(e => e.Cbs).HasColumnName("cbs");

                entity.Property(e => e.Cbsdescr).HasColumnName("cbsdescr");

                entity.Property(e => e.Concurrentresources).HasColumnName("concurrentresources");

                entity.Property(e => e.Contractor).HasColumnName("contractor");

                entity.Property(e => e.Contractornr).HasColumnName("contractornr");

                entity.Property(e => e.Countqcjob).HasColumnName("countqcjob");

                entity.Property(e => e.Createcomputer).HasColumnName("createcomputer");

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser).HasColumnName("createuser");

                entity.Property(e => e.Crew).HasColumnName("crew");

                entity.Property(e => e.Cscodes).HasColumnName("cscodes");

                entity.Property(e => e.Ctr).HasColumnName("ctr");

                entity.Property(e => e.Ctrdescr).HasColumnName("ctrdescr");

                entity.Property(e => e.DkScopejobdetailresid).HasColumnName("dk_scopejobdetailresid");

                entity.Property(e => e.DkScopejobid).HasColumnName("dk_scopejobid");

                entity.Property(e => e.Elevation).HasColumnName("elevation");

                entity.Property(e => e.Eqcod).HasColumnName("eqcod");

                entity.Property(e => e.Eqcoddescr).HasColumnName("eqcoddescr");

                entity.Property(e => e.Eqpt).HasColumnName("eqpt");

                entity.Property(e => e.Eqptdescr).HasColumnName("eqptdescr");

                entity.Property(e => e.Esthrs)
                    .HasColumnName("esthrs")
                    .HasColumnType("decimal(, 2)");

                entity.Property(e => e.FkP6sessionid).HasColumnName("fk_p6sessionid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Floc).HasColumnName("floc");

                entity.Property(e => e.Job).HasColumnName("job");

                entity.Property(e => e.Jobdescr).HasColumnName("jobdescr");

                entity.Property(e => e.Jobmemo).HasColumnName("jobmemo");

                entity.Property(e => e.Jobnr).HasColumnName("jobnr");

                entity.Property(e => e.Libcode).HasColumnName("libcode");

                entity.Property(e => e.Libdescr).HasColumnName("libdescr");

                entity.Property(e => e.Loc).HasColumnName("loc");

                entity.Property(e => e.Location).HasColumnName("location");

                entity.Property(e => e.Locdescr).HasColumnName("locdescr");

                entity.Property(e => e.Mainctr).HasColumnName("mainctr");

                entity.Property(e => e.Mainctrdescr).HasColumnName("mainctrdescr");

                entity.Property(e => e.Mainphase).HasColumnName("mainphase");

                entity.Property(e => e.Modifycomputer).HasColumnName("modifycomputer");

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser).HasColumnName("modifyuser");

                entity.Property(e => e.Notificationnr).HasColumnName("notificationnr");

                entity.Property(e => e.Obs).HasColumnName("obs");

                entity.Property(e => e.Obsdescr).HasColumnName("obsdescr");

                entity.Property(e => e.Olddb).HasColumnName("olddb");

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Ordernr).HasColumnName("ordernr");

                entity.Property(e => e.Parenteqptagnr).HasColumnName("parenteqptagnr");

                entity.Property(e => e.Parenteqptagnrdescr).HasColumnName("parenteqptagnrdescr");

                entity.Property(e => e.Parentscopeeqptagnr).HasColumnName("parentscopeeqptagnr");

                entity.Property(e => e.Parentscopeeqptagnrdescr).HasColumnName("parentscopeeqptagnrdescr");

                entity.Property(e => e.Parentscopenr).HasColumnName("parentscopenr");

                entity.Property(e => e.Parentscopenrdescr).HasColumnName("parentscopenrdescr");

                entity.Property(e => e.Pau).HasColumnName("pau");

                entity.Property(e => e.Paudescr).HasColumnName("paudescr");

                entity.Property(e => e.Phase).HasColumnName("phase");

                entity.Property(e => e.Phasenr).HasColumnName("phasenr");

                entity.Property(e => e.Plandur)
                    .HasColumnName("plandur")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Planningmemo).HasColumnName("planningmemo");

                entity.Property(e => e.Processarea).HasColumnName("processarea");

                entity.Property(e => e.Processareadescription).HasColumnName("processareadescription");

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Qc).HasColumnName("qc");

                entity.Property(e => e.Rdis).HasColumnName("rdis");

                entity.Property(e => e.Rdisdescr).HasColumnName("rdisdescr");

                entity.Property(e => e.Rescode).HasColumnName("rescode");

                entity.Property(e => e.Resname).HasColumnName("resname");

                entity.Property(e => e.Sbs1).HasColumnName("sbs1");

                entity.Property(e => e.Sbs1descr).HasColumnName("sbs1descr");

                entity.Property(e => e.Sbs1export)
                    .HasColumnName("sbs1export")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Sbs2).HasColumnName("sbs2");

                entity.Property(e => e.Sbs2descr).HasColumnName("sbs2descr");

                entity.Property(e => e.Sbs2export)
                    .HasColumnName("sbs2export")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Sbs3).HasColumnName("sbs3");

                entity.Property(e => e.Sbs3descr).HasColumnName("sbs3descr");

                entity.Property(e => e.Sbs3export)
                    .HasColumnName("sbs3export")
                    .HasColumnType("char(3)");

                entity.Property(e => e.Sccd).HasColumnName("sccd");

                entity.Property(e => e.Sccddescr).HasColumnName("sccddescr");

                entity.Property(e => e.Sce).HasColumnName("sce");

                entity.Property(e => e.Scop).HasColumnName("scop");

                entity.Property(e => e.Scopdescr).HasColumnName("scopdescr");

                entity.Property(e => e.Scopechange)
                    .HasColumnName("scopechange")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopelabel).HasColumnName("scopelabel");

                entity.Property(e => e.Scopenr).HasColumnName("scopenr");

                entity.Property(e => e.Scopeprio).HasColumnName("scopeprio");

                entity.Property(e => e.Scoperesponsible).HasColumnName("scoperesponsible");

                entity.Property(e => e.Shco).HasColumnName("shco");

                entity.Property(e => e.Shcodescr).HasColumnName("shcodescr");

                entity.Property(e => e.Shortcode).HasColumnName("shortcode");

                entity.Property(e => e.Templdur)
                    .HasColumnName("templdur")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Templhrs)
                    .HasColumnName("templhrs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Wbs).HasColumnName("wbs");

                entity.Property(e => e.Wbsdescr).HasColumnName("wbsdescr");

                entity.Property(e => e.Wonr).HasColumnName("wonr");

                entity.HasOne(d => d.FkP6session)
                    .WithMany(p => p.TblP6sessionPlancard)
                    .HasForeignKey(d => d.FkP6sessionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6SessionPlancard_fk_p6sessionid");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblP6sessionPlancard)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblP6SessionPlancard_tblScope");
            });

            modelBuilder.Entity<TblP6sessionRelation>(entity =>
            {
                entity.HasKey(e => e.PkP6sessionrelationid);

                entity.ToTable("tblP6SessionRelation", "rsy");

                entity.HasIndex(e => e.FkP6sessionid);

                entity.Property(e => e.PkP6sessionrelationid).HasColumnName("pk_p6sessionrelationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkP6sessionid).HasColumnName("fk_p6sessionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Relation)
                    .HasColumnName("relation")
                    .HasColumnType("char(2)");

                entity.Property(e => e.Startactid).HasColumnName("startactid");

                entity.Property(e => e.Stopactid).HasColumnName("stopactid");

                entity.HasOne(d => d.FkP6session)
                    .WithMany(p => p.TblP6sessionRelation)
                    .HasForeignKey(d => d.FkP6sessionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblP6SessionRelation_fk_p6sessionid");
            });

            modelBuilder.Entity<TblPart>(entity =>
            {
                entity.HasKey(e => e.PkPartid);

                entity.ToTable("tblPart");

                entity.HasIndex(e => e.FkBasematerialid);

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkMateriallibraryid);

                entity.HasIndex(e => e.FkPipetypeid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkScheduleid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.Property(e => e.PkPartid).HasColumnName("pk_partid");

                entity.Property(e => e.Certificateqty).HasColumnName("certificateqty");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasematerialid).HasColumnName("fk_basematerialid");

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkMateriallibraryid).HasColumnName("fk_materiallibraryid");

                entity.Property(e => e.FkPipetypeid).HasColumnName("fk_pipetypeid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkScheduleid).HasColumnName("fk_scheduleid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.Isexisting).HasColumnName("isexisting");

                entity.Property(e => e.Materiallibraryqty).HasColumnName("materiallibraryqty");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Partalphanumericnr)
                    .IsRequired()
                    .HasColumnName("partalphanumericnr")
                    .HasMaxLength(25);

                entity.Property(e => e.Pipelengthansi)
                    .HasColumnName("pipelengthansi")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Pipelengthdin)
                    .HasColumnName("pipelengthdin")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Spool)
                    .HasColumnName("spool")
                    .HasMaxLength(10);

                entity.HasOne(d => d.FkBasematerial)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkBasematerialid)
                    .HasConstraintName("FK_tblPart_tblBaseMaterial");

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkCertificateid)
                    .HasConstraintName("FK_tblPart_Certificate");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblPart_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblPart_tblDn");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblPart_tblLbs");

                entity.HasOne(d => d.FkMateriallibrary)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkMateriallibraryid)
                    .HasConstraintName("FK_tblPart_tblMatLibrary");

                entity.HasOne(d => d.FkPipetype)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkPipetypeid)
                    .HasConstraintName("FK_tblPart_tblPipeType");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblPart_tblPn");

                entity.HasOne(d => d.FkSchedule)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkScheduleid)
                    .HasConstraintName("FK_tblPart_tblSchedule");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblPart)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblPart_tblThickness");
            });

            modelBuilder.Entity<TblPasswordHistory>(entity =>
            {
                entity.HasKey(e => e.PkPasswordhistoryid);

                entity.ToTable("tblPasswordHistory");

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkPasswordhistoryid).HasColumnName("pk_passwordhistoryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(100);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("password")
                    .HasMaxLength(255);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPasswordHistory)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPasswordHistory_tblUser");
            });

            modelBuilder.Entity<TblPermit>(entity =>
            {
                entity.HasKey(e => e.PkPermitid);

                entity.ToTable("tblPermit");

                entity.HasIndex(e => e.FkArchivecodeid);

                entity.HasIndex(e => e.FkBasepermitid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkCurrentworkflowstateid);

                entity.HasIndex(e => new { e.FkProjectid, e.FkBasepermitid })
                    .HasName("IX_tblPermit_fk_projectid");

                entity.Property(e => e.PkPermitid).HasColumnName("pk_permitid");

                entity.Property(e => e.Archivecodechangeddate)
                    .HasColumnName("archivecodechangeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Archivecodechangeduser)
                    .HasColumnName("archivecodechangeduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkArchivecodeid).HasColumnName("fk_archivecodeid");

                entity.Property(e => e.FkBasepermitid).HasColumnName("fk_basepermitid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkCurrentworkflowstateid).HasColumnName("fk_currentworkflowstateid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Indexlistrevision).HasColumnName("indexlistrevision");

                entity.Property(e => e.Issuecount).HasColumnName("issuecount");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitclustertype).HasColumnName("permitclustertype");

                entity.Property(e => e.Permitjobdescription)
                    .HasColumnName("permitjobdescription")
                    .HasMaxLength(2000);

                entity.Property(e => e.Permitjobdetailmemo).HasColumnName("permitjobdetailmemo");

                entity.Property(e => e.Permitjobmemo)
                    .HasColumnName("permitjobmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Permitnumber).HasColumnName("permitnumber");

                entity.Property(e => e.Permitresourcememo).HasColumnName("permitresourcememo");

                entity.Property(e => e.Permitrevisionnr).HasColumnName("permitrevisionnr");

                entity.Property(e => e.Permitschedulermemo).HasColumnName("permitschedulermemo");

                entity.Property(e => e.Permitscopememo).HasColumnName("permitscopememo");

                entity.HasOne(d => d.FkArchivecode)
                    .WithMany(p => p.TblPermit)
                    .HasForeignKey(d => d.FkArchivecodeid)
                    .HasConstraintName("FK_tblPermit_tblArchiveCode");

                entity.HasOne(d => d.FkBasepermit)
                    .WithMany(p => p.TblPermit)
                    .HasForeignKey(d => d.FkBasepermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermit_tblBasePermit");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblPermit)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblPermit_tblContractor");

                entity.HasOne(d => d.FkCurrentworkflowstate)
                    .WithMany(p => p.TblPermit)
                    .HasForeignKey(d => d.FkCurrentworkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tblpermit_tblworkflowstate");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPermit)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermit_tblProject");
            });

            modelBuilder.Entity<TblPermitData>(entity =>
            {
                entity.HasKey(e => e.PkPermitdataid);

                entity.ToTable("tblPermitData");

                entity.HasIndex(e => e.FkAreacodeid);

                entity.HasIndex(e => e.FkBuildingid);

                entity.HasIndex(e => e.FkCbsid);

                entity.HasIndex(e => e.FkElevationunitofmeasurementid);

                entity.HasIndex(e => e.FkMaincontractorid);

                entity.HasIndex(e => e.FkObsid);

                entity.HasIndex(e => e.FkPermitid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkProcessareaid);

                entity.HasIndex(e => e.FkSbsid1);

                entity.HasIndex(e => e.FkSbsid2);

                entity.HasIndex(e => e.FkSbsid3);

                entity.HasIndex(e => e.FkScopecodeid);

                entity.HasIndex(e => e.FkScopetypeid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => e.FkUnitid);

                entity.HasIndex(e => e.FkWbsid);

                entity.Property(e => e.PkPermitdataid).HasColumnName("pk_permitdataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Crew).HasColumnName("crew");

                entity.Property(e => e.Elevation)
                    .HasColumnName("elevation")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Finishdate)
                    .HasColumnName("finishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkAreacodeid).HasColumnName("fk_areacodeid");

                entity.Property(e => e.FkBuildingid).HasColumnName("fk_buildingid");

                entity.Property(e => e.FkCbsid).HasColumnName("fk_cbsid");

                entity.Property(e => e.FkElevationunitofmeasurementid).HasColumnName("fk_elevationunitofmeasurementid");

                entity.Property(e => e.FkMaincontractorid).HasColumnName("fk_maincontractorid");

                entity.Property(e => e.FkObsid).HasColumnName("fk_obsid");

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkProcessareaid).HasColumnName("fk_processareaid");

                entity.Property(e => e.FkSbsid1).HasColumnName("fk_sbsid1");

                entity.Property(e => e.FkSbsid2).HasColumnName("fk_sbsid2");

                entity.Property(e => e.FkSbsid3).HasColumnName("fk_sbsid3");

                entity.Property(e => e.FkScopecodeid).HasColumnName("fk_scopecodeid");

                entity.Property(e => e.FkScopetypeid).HasColumnName("fk_scopetypeid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkUnitid).HasColumnName("fk_unitid");

                entity.Property(e => e.FkWbsid).HasColumnName("fk_wbsid");

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Notificationno)
                    .HasColumnName("notificationno")
                    .HasMaxLength(250);

                entity.Property(e => e.Scopeno).HasColumnName("scopeno");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stoppointdescription)
                    .HasColumnName("stoppointdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Stoppointno)
                    .HasColumnName("stoppointno")
                    .HasMaxLength(250);

                entity.Property(e => e.Wono)
                    .HasColumnName("wono")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkAreacode)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkAreacodeid)
                    .HasConstraintName("FK_tblPermitData_tblAreaCode");

                entity.HasOne(d => d.FkBuilding)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkBuildingid)
                    .HasConstraintName("FK_tblPermitData_tblBuilding");

                entity.HasOne(d => d.FkCbs)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkCbsid)
                    .HasConstraintName("FK_tblPermitData_tblCbs");

                entity.HasOne(d => d.FkElevationunitofmeasurement)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkElevationunitofmeasurementid)
                    .HasConstraintName("FK_tblPermitData_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkMaincontractor)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkMaincontractorid)
                    .HasConstraintName("FK_tblPermitData_tblContractor");

                entity.HasOne(d => d.FkObs)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkObsid)
                    .HasConstraintName("FK_tblPermitData_tblObs");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitData_tblPermit");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .HasConstraintName("FK_tblPermitData_tblPlantData");

                entity.HasOne(d => d.FkProcessarea)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkProcessareaid)
                    .HasConstraintName("FK_tblPermitData_tblProcessArea");

                entity.HasOne(d => d.FkSbsid1Navigation)
                    .WithMany(p => p.TblPermitDataFkSbsid1Navigation)
                    .HasForeignKey(d => d.FkSbsid1)
                    .HasConstraintName("FK_tblPermitData_tblSubSBS1");

                entity.HasOne(d => d.FkSbsid2Navigation)
                    .WithMany(p => p.TblPermitDataFkSbsid2Navigation)
                    .HasForeignKey(d => d.FkSbsid2)
                    .HasConstraintName("FK_tblPermitData_tblSubSBS2");

                entity.HasOne(d => d.FkSbsid3Navigation)
                    .WithMany(p => p.TblPermitDataFkSbsid3Navigation)
                    .HasForeignKey(d => d.FkSbsid3)
                    .HasConstraintName("FK_tblPermitData_tblSubSBS3");

                entity.HasOne(d => d.FkScopecode)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkScopecodeid)
                    .HasConstraintName("FK_tblPermitData_tblScopeCode");

                entity.HasOne(d => d.FkScopetype)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkScopetypeid)
                    .HasConstraintName("FK_tblPermitData_tblScopeType");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .HasConstraintName("FK_tblPermitData_tblSubDiscipline");

                entity.HasOne(d => d.FkUnit)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkUnitid)
                    .HasConstraintName("FK_tblPermitData_tblUnit");

                entity.HasOne(d => d.FkWbs)
                    .WithMany(p => p.TblPermitData)
                    .HasForeignKey(d => d.FkWbsid)
                    .HasConstraintName("FK_tblPermitData_tblWbs");
            });

            modelBuilder.Entity<TblPermitDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkPermitdocumentlabelid);

                entity.ToTable("tblPermitDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkPermitid);

                entity.HasIndex(e => new { e.FkPermitid, e.FkDocumentlabelid })
                    .HasName("UK_tblPermitDocumentLabel")
                    .IsUnique();

                entity.Property(e => e.PkPermitdocumentlabelid).HasColumnName("pk_permitdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblPermitDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblPermitDocumentLabel)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitDocumentLabel_tblPermit");
            });

            modelBuilder.Entity<TblPermitFunctionGroup>(entity =>
            {
                entity.HasKey(e => e.PkPermitfunctiongroupid);

                entity.ToTable("tblPermitFunctionGroup");

                entity.HasIndex(e => e.Permitfunctiongroupcode)
                    .HasName("UK_tblPermitFunctionGroup_permitfunctiongroupcode")
                    .IsUnique();

                entity.Property(e => e.PkPermitfunctiongroupid).HasColumnName("pk_permitfunctiongroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitfunctiongroupcode)
                    .IsRequired()
                    .HasColumnName("permitfunctiongroupcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitfunctiongroupdescription)
                    .IsRequired()
                    .HasColumnName("permitfunctiongroupdescription")
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<TblPermitHorizontalClusterStrategy>(entity =>
            {
                entity.HasKey(e => e.PkPermithorizontalclusterstrategyid);

                entity.ToTable("tblPermitHorizontalClusterStrategy");

                entity.HasIndex(e => e.FkStrategyuserid);

                entity.Property(e => e.PkPermithorizontalclusterstrategyid).HasColumnName("pk_permithorizontalclusterstrategyid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkStrategyuserid).HasColumnName("fk_strategyuserid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Freezeuser)
                    .HasColumnName("freezeuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Strategyname)
                    .IsRequired()
                    .HasColumnName("strategyname")
                    .HasMaxLength(150);

                entity.HasOne(d => d.FkStrategyuser)
                    .WithMany(p => p.TblPermitHorizontalClusterStrategy)
                    .HasForeignKey(d => d.FkStrategyuserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitHorizontalClusterStrategy_tblUser");
            });

            modelBuilder.Entity<TblPermitHorizontalClusterStrategyFilter>(entity =>
            {
                entity.HasKey(e => e.PkPermithorizontalclusterstrategyfilterid);

                entity.ToTable("tblPermitHorizontalClusterStrategyFilter");

                entity.HasIndex(e => e.FkPermithorizontalclusterstrategyid);

                entity.Property(e => e.PkPermithorizontalclusterstrategyfilterid).HasColumnName("pk_permithorizontalclusterstrategyfilterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Filter)
                    .IsRequired()
                    .HasColumnName("filter");

                entity.Property(e => e.FkPermithorizontalclusterstrategyid).HasColumnName("fk_permithorizontalclusterstrategyid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Strategyfiltertype).HasColumnName("strategyfiltertype");

                entity.Property(e => e.Visualfilter)
                    .IsRequired()
                    .HasColumnName("visualfilter");

                entity.HasOne(d => d.FkPermithorizontalclusterstrategy)
                    .WithMany(p => p.TblPermitHorizontalClusterStrategyFilter)
                    .HasForeignKey(d => d.FkPermithorizontalclusterstrategyid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitHorizontalClusterStrategyFilter_tblPermitHorizontalClusterStrategy");
            });

            modelBuilder.Entity<TblPermitItemPart>(entity =>
            {
                entity.HasKey(e => e.PkPermititempartid);

                entity.ToTable("tblPermitItemPart");

                entity.HasIndex(e => e.FkBasepermititempartid);

                entity.HasIndex(e => e.FkPermitid);

                entity.Property(e => e.PkPermititempartid).HasColumnName("pk_permititempartid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkSelectedid).HasColumnName("dk_selectedid");

                entity.Property(e => e.FkBasepermititempartid).HasColumnName("fk_basepermititempartid");

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.State).HasColumnName("state");

                entity.Property(e => e.Textvalue)
                    .HasColumnName("textvalue")
                    .HasMaxLength(2000);

                entity.HasOne(d => d.FkBasepermititempart)
                    .WithMany(p => p.TblPermitItemPart)
                    .HasForeignKey(d => d.FkBasepermititempartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitItemPart_tblBasePermitItemPart");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblPermitItemPart)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitItemPart_tblPermit");
            });

            modelBuilder.Entity<TblPermitLog>(entity =>
            {
                entity.HasKey(e => e.PkPermitlogid);

                entity.ToTable("tblPermitLog");

                entity.HasIndex(e => e.FkPermitid);

                entity.Property(e => e.PkPermitlogid).HasColumnName("pk_permitlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitlogtext)
                    .IsRequired()
                    .HasColumnName("permitlogtext")
                    .HasMaxLength(250);

                entity.Property(e => e.Permitlogtype).HasColumnName("permitlogtype");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblPermitLog)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitLog_tblPermit");
            });

            modelBuilder.Entity<TblPermitMessage>(entity =>
            {
                entity.HasKey(e => e.PkPermitmessageid);

                entity.ToTable("tblPermitMessage");

                entity.HasIndex(e => e.FkPermitid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkPermitmessageid).HasColumnName("pk_permitmessageid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitmessage)
                    .IsRequired()
                    .HasColumnName("permitmessage");

                entity.Property(e => e.Permitmessageheader).HasColumnName("permitmessageheader");

                entity.Property(e => e.Permitmessagetype).HasColumnName("permitmessagetype");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblPermitMessage)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitMessage_tblPermit");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPermitMessage)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitMessage_tblUser");
            });

            modelBuilder.Entity<TblPermitQuickFilter>(entity =>
            {
                entity.HasKey(e => e.PkPermitquickfilterid);

                entity.ToTable("tblPermitQuickFilter");

                entity.Property(e => e.PkPermitquickfilterid).HasColumnName("pk_permitquickfilterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitquickfiltername)
                    .IsRequired()
                    .HasColumnName("permitquickfiltername")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<TblPermitWorkflowState>(entity =>
            {
                entity.HasKey(e => e.PkPermitworkflowstateid);

                entity.ToTable("tblPermitWorkflowState");

                entity.HasIndex(e => e.FkPermitid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkPermitworkflowstateid).HasColumnName("pk_permitworkflowstateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Permitstateaction).HasColumnName("permitstateaction");

                entity.Property(e => e.Permitstatedate)
                    .HasColumnName("permitstatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Permitstateinactive).HasColumnName("permitstateinactive");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblPermitWorkflowState)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitWorkflowState_tblPermit");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPermitWorkflowState)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitWorkflowState_tblUser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblPermitWorkflowState)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPermitWorkflowState_tblWorkflowState");
            });

            modelBuilder.Entity<TblPid>(entity =>
            {
                entity.HasKey(e => e.PkPidid);

                entity.ToTable("tblPid");

                entity.HasIndex(e => e.Pidname)
                    .HasName("UK_tblPid_pidname")
                    .IsUnique();

                entity.Property(e => e.PkPidid).HasColumnName("pk_pidid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Inactivedate)
                    .HasColumnName("inactivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inactiveuser)
                    .HasColumnName("inactiveuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Piddescription)
                    .HasColumnName("piddescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Pidname)
                    .IsRequired()
                    .HasColumnName("pidname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPidRevision>(entity =>
            {
                entity.HasKey(e => e.PkPidrevisionid);

                entity.ToTable("tblPidRevision");

                entity.HasIndex(e => e.FkPidid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkPidid, e.Pidrevisionname })
                    .HasName("UK_tblPidRevision")
                    .IsUnique();

                entity.Property(e => e.PkPidrevisionid).HasColumnName("pk_pidrevisionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPidid).HasColumnName("fk_pidid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pidrevisionfontfamily)
                    .IsRequired()
                    .HasColumnName("pidrevisionfontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Pidrevisionfontsize).HasColumnName("pidrevisionfontsize");

                entity.Property(e => e.Pidrevisionlinecolor).HasColumnName("pidrevisionlinecolor");

                entity.Property(e => e.Pidrevisionlinewidth).HasColumnName("pidrevisionlinewidth");

                entity.Property(e => e.Pidrevisionname)
                    .HasColumnName("pidrevisionname")
                    .HasMaxLength(10);

                entity.Property(e => e.Pidrevisionno).HasColumnName("pidrevisionno");

                entity.HasOne(d => d.FkPid)
                    .WithMany(p => p.TblPidRevision)
                    .HasForeignKey(d => d.FkPidid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidRevision_tblPid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPidRevision)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblPidRevision_tblUser");
            });

            modelBuilder.Entity<TblPidRevisionIgnoreUpdate>(entity =>
            {
                entity.HasKey(e => e.PkPidrevisionignoreupdateid);

                entity.ToTable("tblPidRevisionIgnoreUpdate");

                entity.HasIndex(e => e.FkBlindlistid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkPidrevisionignoreupdateid).HasColumnName("pk_pidrevisionignoreupdateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBlindlistid).HasColumnName("fk_blindlistid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Ignoredate)
                    .HasColumnName("ignoredate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBlindlist)
                    .WithMany(p => p.TblPidRevisionIgnoreUpdate)
                    .HasForeignKey(d => d.FkBlindlistid)
                    .HasConstraintName("FK_tblPidRevisionIgnoreUpdate_tblBlindList");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblPidRevisionIgnoreUpdate)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblPidRevisionIgnoreUpdate_tblScope");
            });

            modelBuilder.Entity<TblPidRevisionLine>(entity =>
            {
                entity.HasKey(e => e.PkPidrevisionlineid);

                entity.ToTable("tblPidRevisionLine");

                entity.HasIndex(e => e.FkPidrevisionid);

                entity.HasIndex(e => e.FkPidrevisionmemoid1)
                    .HasName("IX_tblPidLine_fk_pidmemoid1");

                entity.HasIndex(e => e.FkPidrevisionmemoid2)
                    .HasName("IX_tblPidLine_fk_pidmemoid2");

                entity.HasIndex(e => e.FkPidrevisiontemplateblindpointid1)
                    .HasName("IX_tblPidLine_fk_pidtemplateblindpointid1");

                entity.HasIndex(e => e.FkPidrevisiontemplateblindpointid2)
                    .HasName("IX_tblPidLine_fk_pidtemplateblindpointid2");

                entity.Property(e => e.PkPidrevisionlineid).HasColumnName("pk_pidrevisionlineid");

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkCopiedfrompidrevisionlineid).HasColumnName("dk_copiedfrompidrevisionlineid");

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.FkPidrevisionmemoid1).HasColumnName("fk_pidrevisionmemoid1");

                entity.Property(e => e.FkPidrevisionmemoid2).HasColumnName("fk_pidrevisionmemoid2");

                entity.Property(e => e.FkPidrevisiontemplateblindpointid1).HasColumnName("fk_pidrevisiontemplateblindpointid1");

                entity.Property(e => e.FkPidrevisiontemplateblindpointid2).HasColumnName("fk_pidrevisiontemplateblindpointid2");

                entity.Property(e => e.Lineend1).HasColumnName("lineend1");

                entity.Property(e => e.Lineend2).HasColumnName("lineend2");

                entity.Property(e => e.Linewidth).HasColumnName("linewidth");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pagenumber).HasColumnName("pagenumber");

                entity.Property(e => e.Resolutionheight).HasColumnName("resolutionheight");

                entity.Property(e => e.Resolutionwidth).HasColumnName("resolutionwidth");

                entity.Property(e => e.Xpos1).HasColumnName("xpos1");

                entity.Property(e => e.Xpos2).HasColumnName("xpos2");

                entity.Property(e => e.Ypos1).HasColumnName("ypos1");

                entity.Property(e => e.Ypos2).HasColumnName("ypos2");

                entity.Property(e => e.Zorder).HasColumnName("zorder");

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblPidRevisionLine)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidRevisionLine_tblPidRevision");

                entity.HasOne(d => d.FkPidrevisionmemoid1Navigation)
                    .WithMany(p => p.TblPidRevisionLineFkPidrevisionmemoid1Navigation)
                    .HasForeignKey(d => d.FkPidrevisionmemoid1)
                    .HasConstraintName("FK_tblPidRevisionLine_tblPidRevisionMemo1");

                entity.HasOne(d => d.FkPidrevisionmemoid2Navigation)
                    .WithMany(p => p.TblPidRevisionLineFkPidrevisionmemoid2Navigation)
                    .HasForeignKey(d => d.FkPidrevisionmemoid2)
                    .HasConstraintName("FK_tblPidRevisionLine_tblPidRevisionMemo2");

                entity.HasOne(d => d.FkPidrevisiontemplateblindpointid1Navigation)
                    .WithMany(p => p.TblPidRevisionLineFkPidrevisiontemplateblindpointid1Navigation)
                    .HasForeignKey(d => d.FkPidrevisiontemplateblindpointid1)
                    .HasConstraintName("FK_tblPidRevisionLine_tblPidRevisionTemplateBlindpoint1");

                entity.HasOne(d => d.FkPidrevisiontemplateblindpointid2Navigation)
                    .WithMany(p => p.TblPidRevisionLineFkPidrevisiontemplateblindpointid2Navigation)
                    .HasForeignKey(d => d.FkPidrevisiontemplateblindpointid2)
                    .HasConstraintName("FK_tblPidRevisionLine_tblPidRevisionTemplateBlindpoint2");
            });

            modelBuilder.Entity<TblPidRevisionMemo>(entity =>
            {
                entity.HasKey(e => e.PkPidrevisionmemoid);

                entity.ToTable("tblPidRevisionMemo");

                entity.HasIndex(e => e.FkPidrevisionid);

                entity.Property(e => e.PkPidrevisionmemoid).HasColumnName("pk_pidrevisionmemoid");

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DkCopiedfrompidrevisionmemoid).HasColumnName("dk_copiedfrompidrevisionmemoid");

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Linewidth).HasColumnName("linewidth");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pagenumber).HasColumnName("pagenumber");

                entity.Property(e => e.Resolutionheight).HasColumnName("resolutionheight");

                entity.Property(e => e.Resolutionwidth).HasColumnName("resolutionwidth");

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.Property(e => e.Zorder).HasColumnName("zorder");

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblPidRevisionMemo)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidMemo_tblPidRevision");
            });

            modelBuilder.Entity<TblPidRevisionPipeLine>(entity =>
            {
                entity.HasKey(e => e.PkPidrevisionpipelineid);

                entity.ToTable("tblPidRevisionPipeLine");

                entity.HasIndex(e => e.FkPipelineid)
                    .HasName("IX_tblPipeLinePid_fk_pipelineid");

                entity.HasIndex(e => new { e.FkPipelineid, e.FkPidrevisionid })
                    .HasName("UQ_tblPidRevisionPipeLine")
                    .IsUnique();

                entity.Property(e => e.PkPidrevisionpipelineid).HasColumnName("pk_pidrevisionpipelineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.FkPipelineid).HasColumnName("fk_pipelineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblPidRevisionPipeLine)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidRevisionPipeLine_tblPidRevision");

                entity.HasOne(d => d.FkPipeline)
                    .WithMany(p => p.TblPidRevisionPipeLine)
                    .HasForeignKey(d => d.FkPipelineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidRevisionPipeLine_tblPipeLine");
            });

            modelBuilder.Entity<TblPidRevisionTemplateBlindPoint>(entity =>
            {
                entity.HasKey(e => e.PkPidrevisiontemplateblindpointid);

                entity.ToTable("tblPidRevisionTemplateBlindPoint");

                entity.HasIndex(e => e.FkPidrevisionid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.Property(e => e.PkPidrevisiontemplateblindpointid).HasColumnName("pk_pidrevisiontemplateblindpointid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkCopiedfrompidrevisiontemplateblindpointid).HasColumnName("dk_copiedfrompidrevisiontemplateblindpointid");

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Linewidth).HasColumnName("linewidth");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pagenumber).HasColumnName("pagenumber");

                entity.Property(e => e.Refbox).HasColumnName("refbox");

                entity.Property(e => e.Referencefontfamily)
                    .HasColumnName("referencefontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Referencefontsize).HasColumnName("referencefontsize");

                entity.Property(e => e.Refid)
                    .HasColumnName("refid")
                    .HasMaxLength(10);

                entity.Property(e => e.Regularfontfamily)
                    .HasColumnName("regularfontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Regularfontsize).HasColumnName("regularfontsize");

                entity.Property(e => e.Resolutionwidth).HasColumnName("resolutionwidth");

                entity.Property(e => e.Resoultionheight).HasColumnName("resoultionheight");

                entity.Property(e => e.Showref).HasColumnName("showref");

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.Property(e => e.Zorder).HasColumnName("zorder");

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblPidRevisionTemplateBlindPoint)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidRevisionTemplateBlindPoint_tblPidRevision");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblPidRevisionTemplateBlindPoint)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPidRevisionTemplateBlindPoint_tblTemplateBlindPoint");
            });

            modelBuilder.Entity<TblPipeline>(entity =>
            {
                entity.HasKey(e => e.PkPipelineid);

                entity.ToTable("tblPipeline");

                entity.HasIndex(e => e.FkPipelineconnectionfromid);

                entity.HasIndex(e => e.FkPipelineconnectiontoid);

                entity.HasIndex(e => e.FkUnitid);

                entity.HasIndex(e => e.Linenumber)
                    .HasName("UK_tblPipeline_linenumber")
                    .IsUnique();

                entity.Property(e => e.PkPipelineid).HasColumnName("pk_pipelineid");

                entity.Property(e => e.Connectionfromdescription)
                    .HasColumnName("connectionfromdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Connectiontodescription)
                    .HasColumnName("connectiontodescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPipelineconnectionfromid).HasColumnName("fk_pipelineconnectionfromid");

                entity.Property(e => e.FkPipelineconnectiontoid).HasColumnName("fk_pipelineconnectiontoid");

                entity.Property(e => e.FkUnitid).HasColumnName("fk_unitid");

                entity.Property(e => e.Linenumber)
                    .IsRequired()
                    .HasColumnName("linenumber")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPipelineconnectionfrom)
                    .WithMany(p => p.TblPipelineFkPipelineconnectionfrom)
                    .HasForeignKey(d => d.FkPipelineconnectionfromid)
                    .HasConstraintName("FK_tblPipeline_tblPipelineConnection_from");

                entity.HasOne(d => d.FkPipelineconnectionto)
                    .WithMany(p => p.TblPipelineFkPipelineconnectionto)
                    .HasForeignKey(d => d.FkPipelineconnectiontoid)
                    .HasConstraintName("FK_tblPipeline_tblPipelineConnection_to");

                entity.HasOne(d => d.FkUnit)
                    .WithMany(p => p.TblPipeline)
                    .HasForeignKey(d => d.FkUnitid)
                    .HasConstraintName("FK_tblPipeline_tblUnit");
            });

            modelBuilder.Entity<TblPipelineConnection>(entity =>
            {
                entity.HasKey(e => e.PkPipelineconnectionid);

                entity.ToTable("tblPipelineConnection");

                entity.HasIndex(e => e.FkPipelineid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.Property(e => e.PkPipelineconnectionid).HasColumnName("pk_pipelineconnectionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPipelineid).HasColumnName("fk_pipelineid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPipeline)
                    .WithMany(p => p.TblPipelineConnection)
                    .HasForeignKey(d => d.FkPipelineid)
                    .HasConstraintName("FK_tblPipelineConnection_tblPipeLine");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblPipelineConnection)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .HasConstraintName("FK_tblPipelineConnection_tblPlantData");
            });

            modelBuilder.Entity<TblPipeLineProduct>(entity =>
            {
                entity.HasKey(e => e.PkPipelineproductid);

                entity.ToTable("tblPipeLineProduct");

                entity.HasIndex(e => e.FkPipelineid);

                entity.HasIndex(e => e.FkProductid);

                entity.HasIndex(e => new { e.FkPipelineid, e.FkProductid })
                    .HasName("UQ_tblPipeLineProduct")
                    .IsUnique();

                entity.Property(e => e.PkPipelineproductid).HasColumnName("pk_pipelineproductid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPipelineid).HasColumnName("fk_pipelineid");

                entity.Property(e => e.FkProductid).HasColumnName("fk_productid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPipeline)
                    .WithMany(p => p.TblPipeLineProduct)
                    .HasForeignKey(d => d.FkPipelineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPipeLineProduct_tblPipeLine");

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.TblPipeLineProduct)
                    .HasForeignKey(d => d.FkProductid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPipeLineProduct_tblProduct");
            });

            modelBuilder.Entity<TblPipeType>(entity =>
            {
                entity.HasKey(e => e.PkPipetypeid);

                entity.ToTable("tblPipeType");

                entity.Property(e => e.PkPipetypeid).HasColumnName("pk_pipetypeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPlantCustom>(entity =>
            {
                entity.HasKey(e => e.PkPlantcustomid);

                entity.ToTable("tblPlantCustom");

                entity.HasIndex(e => e.FkProductid);

                entity.HasIndex(e => e.FkTestsystemmediumid);

                entity.HasIndex(e => e.FkUnitofmeasurementid);

                entity.Property(e => e.PkPlantcustomid).HasColumnName("pk_plantcustomid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProductid).HasColumnName("fk_productid");

                entity.Property(e => e.FkTestsystemmediumid).HasColumnName("fk_testsystemmediumid");

                entity.Property(e => e.FkUnitofmeasurementid).HasColumnName("fk_unitofmeasurementid");

                entity.Property(e => e.Grouping)
                    .HasColumnName("grouping")
                    .HasMaxLength(100);

                entity.Property(e => e.Iseditable).HasColumnName("iseditable");

                entity.Property(e => e.Isroserprocessdata).HasColumnName("isroserprocessdata");

                entity.Property(e => e.Isrosertechdata).HasColumnName("isrosertechdata");

                entity.Property(e => e.Isxml).HasColumnName("isxml");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Plantcustomdescription)
                    .IsRequired()
                    .HasColumnName("plantcustomdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Relationtype).HasColumnName("relationtype");

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.TblPlantCustom)
                    .HasForeignKey(d => d.FkProductid)
                    .HasConstraintName("FK_tblPlantCustom_tblProduct");

                entity.HasOne(d => d.FkTestsystemmedium)
                    .WithMany(p => p.TblPlantCustom)
                    .HasForeignKey(d => d.FkTestsystemmediumid)
                    .HasConstraintName("FK_tblPlantCustom_tblTestSystemMedium");

                entity.HasOne(d => d.FkUnitofmeasurement)
                    .WithMany(p => p.TblPlantCustom)
                    .HasForeignKey(d => d.FkUnitofmeasurementid)
                    .HasConstraintName("FK_tblPlantCustom_tblUnitOfMeasurement");
            });

            modelBuilder.Entity<TblPlantCustomShortcode>(entity =>
            {
                entity.HasKey(e => e.PkPlantcustomshortcodeid);

                entity.ToTable("tblPlantCustomShortcode");

                entity.HasIndex(e => e.FkPlantcustomid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => new { e.FkShortcodeid, e.FkPlantcustomid })
                    .HasName("UK_tblPlantCustomShortcode")
                    .IsUnique();

                entity.Property(e => e.PkPlantcustomshortcodeid).HasColumnName("pk_plantcustomshortcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPlantcustomid).HasColumnName("fk_plantcustomid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPlantcustom)
                    .WithMany(p => p.TblPlantCustomShortcode)
                    .HasForeignKey(d => d.FkPlantcustomid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantCustomShortcode_tblPlantCustom");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblPlantCustomShortcode)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantCustomShortcode_tblShortcode");
            });

            modelBuilder.Entity<TblPlantData>(entity =>
            {
                entity.HasKey(e => e.PkPlantdataid);

                entity.ToTable("tblPlantData");

                entity.HasIndex(e => e.Equipmenttag)
                    .HasName("IX_tblPlantData_1")
                    .IsUnique();

                entity.HasIndex(e => e.FkAreacodeid);

                entity.HasIndex(e => e.FkBuildingid);

                entity.HasIndex(e => e.FkElevationunitofmeasurementid);

                entity.HasIndex(e => e.FkPlantdatamainid)
                    .HasName("IX_tblPlantData_ParentPlantDataID");

                entity.HasIndex(e => e.FkShortcodeid)
                    .HasName("IX_tblPlantData_5");

                entity.HasIndex(e => e.FkSubsbsid1);

                entity.HasIndex(e => e.FkSubsbsid2);

                entity.HasIndex(e => e.FkSubsbsid3);

                entity.HasIndex(e => e.FkUnitid)
                    .HasName("IX_tblPlantData_4");

                entity.HasIndex(e => e.Functionallocation)
                    .HasName("IX_tblPlantData");

                entity.HasIndex(e => e.Isdeleted)
                    .HasName("IX_tblPlantData_3");

                entity.HasIndex(e => e.Sapeqptnr)
                    .HasName("IX_tblPlantData_2");

                entity.Property(e => e.PkPlantdataid).HasColumnName("pk_plantdataid");

                entity.Property(e => e.Consequencecost).HasColumnName("consequencecost");

                entity.Property(e => e.Consequencecostmemo)
                    .HasColumnName("consequencecostmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Elevation)
                    .HasColumnName("elevation")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Equipmenttag)
                    .IsRequired()
                    .HasColumnName("equipmenttag")
                    .HasMaxLength(50);

                entity.Property(e => e.Equipmenttagdescription)
                    .IsRequired()
                    .HasColumnName("equipmenttagdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.FkAreacodeid).HasColumnName("fk_areacodeid");

                entity.Property(e => e.FkBuildingid).HasColumnName("fk_buildingid");

                entity.Property(e => e.FkElevationunitofmeasurementid).HasColumnName("fk_elevationunitofmeasurementid");

                entity.Property(e => e.FkPlantdatamainid).HasColumnName("fk_plantdatamainid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkSubsbsid1).HasColumnName("fk_subsbsid1");

                entity.Property(e => e.FkSubsbsid2).HasColumnName("fk_subsbsid2");

                entity.Property(e => e.FkSubsbsid3).HasColumnName("fk_subsbsid3");

                entity.Property(e => e.FkUnitid).HasColumnName("fk_unitid");

                entity.Property(e => e.Functionallocation)
                    .IsRequired()
                    .HasColumnName("functionallocation")
                    .HasMaxLength(50);

                entity.Property(e => e.Isdeleted)
                    .HasColumnName("isdeleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Latitude)
                    .HasColumnName("latitude")
                    .HasColumnType("decimal(18, 15)");

                entity.Property(e => e.Longitude)
                    .HasColumnName("longitude")
                    .HasColumnType("decimal(18, 15)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pdlevel).HasColumnName("pdlevel");

                entity.Property(e => e.Plantdatalocation)
                    .HasColumnName("plantdatalocation")
                    .HasMaxLength(500);

                entity.Property(e => e.Sapeqptnr)
                    .HasColumnName("sapeqptnr")
                    .HasMaxLength(50);

                entity.Property(e => e.Sce).HasColumnName("sce");

                entity.Property(e => e.Xcoordinate)
                    .HasColumnName("xcoordinate")
                    .HasMaxLength(50);

                entity.Property(e => e.Ycoordinate)
                    .HasColumnName("ycoordinate")
                    .HasMaxLength(50);

                entity.Property(e => e.Zcoordinate)
                    .HasColumnName("zcoordinate")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkAreacode)
                    .WithMany(p => p.TblPlantData)
                    .HasForeignKey(d => d.FkAreacodeid)
                    .HasConstraintName("FK_tblPlantData_tblAreaCode");

                entity.HasOne(d => d.FkBuilding)
                    .WithMany(p => p.TblPlantData)
                    .HasForeignKey(d => d.FkBuildingid)
                    .HasConstraintName("FK_tblPlantData_tblBuilding");

                entity.HasOne(d => d.FkElevationunitofmeasurement)
                    .WithMany(p => p.TblPlantData)
                    .HasForeignKey(d => d.FkElevationunitofmeasurementid)
                    .HasConstraintName("FK_tblPlantData_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkPlantdatamain)
                    .WithMany(p => p.InverseFkPlantdatamain)
                    .HasForeignKey(d => d.FkPlantdatamainid)
                    .HasConstraintName("FK_tblPlantData_tblPlantData");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblPlantData)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantData_tblShortcode");

                entity.HasOne(d => d.FkSubsbsid1Navigation)
                    .WithMany(p => p.TblPlantDataFkSubsbsid1Navigation)
                    .HasForeignKey(d => d.FkSubsbsid1)
                    .HasConstraintName("FK_tblPlantData_tblSubSBS");

                entity.HasOne(d => d.FkSubsbsid2Navigation)
                    .WithMany(p => p.TblPlantDataFkSubsbsid2Navigation)
                    .HasForeignKey(d => d.FkSubsbsid2)
                    .HasConstraintName("FK_tblPlantData_tblSubSBS1");

                entity.HasOne(d => d.FkSubsbsid3Navigation)
                    .WithMany(p => p.TblPlantDataFkSubsbsid3Navigation)
                    .HasForeignKey(d => d.FkSubsbsid3)
                    .HasConstraintName("FK_tblPlantData_tblSubSBS2");

                entity.HasOne(d => d.FkUnit)
                    .WithMany(p => p.TblPlantData)
                    .HasForeignKey(d => d.FkUnitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantData_tblUnit");
            });

            modelBuilder.Entity<TblPlantDataCustom>(entity =>
            {
                entity.HasKey(e => e.PkPlantdatacustomid);

                entity.ToTable("tblPlantDataCustom");

                entity.HasIndex(e => e.FkPlantcustomid)
                    .HasName("IX_tblPlantDataCustom_1");

                entity.HasIndex(e => e.FkPlantdataid)
                    .HasName("IX_tblPlantDataCustom");

                entity.HasIndex(e => new { e.Customvalue, e.FkPlantcustomid, e.FkPlantdataid })
                    .HasName("IX_tblPlantDataCustom_2");

                entity.Property(e => e.PkPlantdatacustomid).HasColumnName("pk_plantdatacustomid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customvalue)
                    .IsRequired()
                    .HasColumnName("customvalue")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.FkPlantcustomid).HasColumnName("fk_plantcustomid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPlantcustom)
                    .WithMany(p => p.TblPlantDataCustom)
                    .HasForeignKey(d => d.FkPlantcustomid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantDataCustom_tblPlantCustom");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblPlantDataCustom)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantDataCustom_tblPlantData");
            });

            modelBuilder.Entity<TblPlantDataDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkPlantdatadocumentlabelid);

                entity.ToTable("tblPlantDataDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => new { e.FkPlantdataid, e.FkDocumentlabelid })
                    .HasName("UK_tblPlantDataDocumentLabel_fk_plantdataid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkPlantdatadocumentlabelid).HasColumnName("pk_plantdatadocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblPlantDataDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantdataDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblPlantDataDocumentLabel)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantdataDocumentLabel_tblPlantdata");
            });

            modelBuilder.Entity<TblPlantDataPid>(entity =>
            {
                entity.HasKey(e => e.PkPlantdatapidid);

                entity.ToTable("tblPlantDataPid");

                entity.HasIndex(e => e.FkEndpidrevisionid);

                entity.HasIndex(e => e.FkPidid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkStartpidrevisionid);

                entity.HasIndex(e => new { e.FkPidid, e.FkPlantdataid })
                    .HasName("UK_tblPlantDataPid_plantdata_pid")
                    .IsUnique();

                entity.Property(e => e.PkPlantdatapidid).HasColumnName("pk_plantdatapidid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkEndpidrevisionid).HasColumnName("fk_endpidrevisionid");

                entity.Property(e => e.FkPidid).HasColumnName("fk_pidid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkStartpidrevisionid).HasColumnName("fk_startpidrevisionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkEndpidrevision)
                    .WithMany(p => p.TblPlantDataPidFkEndpidrevision)
                    .HasForeignKey(d => d.FkEndpidrevisionid);

                entity.HasOne(d => d.FkPid)
                    .WithMany(p => p.TblPlantDataPid)
                    .HasForeignKey(d => d.FkPidid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantDataPid_tblPid");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblPlantDataPid)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantDataPid_tblPlantData");

                entity.HasOne(d => d.FkStartpidrevision)
                    .WithMany(p => p.TblPlantDataPidFkStartpidrevision)
                    .HasForeignKey(d => d.FkStartpidrevisionid);
            });

            modelBuilder.Entity<TblPlantDataTestSystem>(entity =>
            {
                entity.HasKey(e => e.PkPlantdatatestsystemid);

                entity.ToTable("tblPlantDataTestSystem");

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkTestsystemid);

                entity.HasIndex(e => new { e.FkPlantdataid, e.FkTestsystemid })
                    .HasName("UK_tblPlantDataTestSystem")
                    .IsUnique();

                entity.Property(e => e.PkPlantdatatestsystemid).HasColumnName("pk_plantdatatestsystemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkTestsystemid).HasColumnName("fk_testsystemid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblPlantDataTestSystem)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantDataTestSystem_tblPlantData");

                entity.HasOne(d => d.FkTestsystem)
                    .WithMany(p => p.TblPlantDataTestSystem)
                    .HasForeignKey(d => d.FkTestsystemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlantDataTestSystem_tblTestSystem");
            });

            modelBuilder.Entity<TblPlaylist>(entity =>
            {
                entity.HasKey(e => e.PkPlaylistid);

                entity.ToTable("tblPlaylist");

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkPlaylistid).HasColumnName("pk_playlistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Playlistname)
                    .IsRequired()
                    .HasColumnName("playlistname")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPlaylist)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblPlaylist_tblUser");
            });

            modelBuilder.Entity<TblPlaylistItem>(entity =>
            {
                entity.HasKey(e => e.PkPlaylistitemid);

                entity.ToTable("tblPlaylistItem");

                entity.HasIndex(e => e.FkPlaylistid);

                entity.HasIndex(e => e.FkWallpaperid);

                entity.Property(e => e.PkPlaylistitemid).HasColumnName("pk_playlistitemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPlaylistid).HasColumnName("fk_playlistid");

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Playlistitemscrollseconds).HasColumnName("playlistitemscrollseconds");

                entity.Property(e => e.Playlistitemseconds).HasColumnName("playlistitemseconds");

                entity.Property(e => e.Playlistitemsortorder).HasColumnName("playlistitemsortorder");

                entity.HasOne(d => d.FkPlaylist)
                    .WithMany(p => p.TblPlaylistItem)
                    .HasForeignKey(d => d.FkPlaylistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPlaylistitem_tblPlaylist");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblPlaylistItem)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .HasConstraintName("FK_tblPlaylistItem_tblWallpaper");
            });

            modelBuilder.Entity<TblPn>(entity =>
            {
                entity.HasKey(e => e.PkPnid);

                entity.ToTable("tblPn");

                entity.HasIndex(e => e.Pndescription)
                    .HasName("UK_tblPn_pndescription")
                    .IsUnique();

                entity.Property(e => e.PkPnid).HasColumnName("pk_pnid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pndescription)
                    .IsRequired()
                    .HasColumnName("pndescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Pnvalue)
                    .HasColumnName("pnvalue")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<TblPnAlternative>(entity =>
            {
                entity.HasKey(e => e.PkPnalternativeid);

                entity.ToTable("tblPnAlternative");

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.Pnalternativedescription)
                    .HasName("UC_tblPnAlternative_pnalternativedescription")
                    .IsUnique();

                entity.Property(e => e.PkPnalternativeid).HasColumnName("pk_pnalternativeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pnalternativedescription)
                    .IsRequired()
                    .HasColumnName("pnalternativedescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblPnAlternative)
                    .HasForeignKey(d => d.FkPnid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPnAlternative_fk_pnid");
            });

            modelBuilder.Entity<TblPolDegree>(entity =>
            {
                entity.HasKey(e => e.PkPoldegreeid);

                entity.ToTable("tblPolDegree");

                entity.Property(e => e.PkPoldegreeid).HasColumnName("pk_poldegreeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Poldegreedescription)
                    .IsRequired()
                    .HasColumnName("poldegreedescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPolGrade>(entity =>
            {
                entity.HasKey(e => e.PkPolgradeid);

                entity.ToTable("tblPolGrade");

                entity.Property(e => e.PkPolgradeid).HasColumnName("pk_polgradeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Polgradedescription)
                    .IsRequired()
                    .HasColumnName("polgradedescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPolType>(entity =>
            {
                entity.HasKey(e => e.PkPoltypeid);

                entity.ToTable("tblPolType");

                entity.Property(e => e.PkPoltypeid).HasColumnName("pk_poltypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Poltypedescription)
                    .IsRequired()
                    .HasColumnName("poltypedescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPosition>(entity =>
            {
                entity.HasKey(e => e.PkPositionid);

                entity.ToTable("tblPosition");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkRelationid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkScopejobid);

                entity.Property(e => e.PkPositionid).HasColumnName("pk_positionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkRelationid).HasColumnName("fk_relationid");

                entity.Property(e => e.FkRelationtargetid).HasColumnName("fk_relationtargetid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPosition)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPosition_tblProject");
            });

            modelBuilder.Entity<TblPrimaveraAnalysis>(entity =>
            {
                entity.HasKey(e => e.PkPrimaveraanalysis);

                entity.ToTable("tblPrimaveraAnalysis", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkPrimaveraanalysis).HasColumnName("pk_primaveraanalysis");

                entity.Property(e => e.Activityid)
                    .IsRequired()
                    .HasColumnName("activityid")
                    .HasMaxLength(20);

                entity.Property(e => e.Budgetquantity)
                    .HasColumnName("budgetquantity")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Calendarid)
                    .HasColumnName("calendarid")
                    .HasMaxLength(57);

                entity.Property(e => e.Costaccountcode)
                    .HasColumnName("costaccountcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Originalduration)
                    .HasColumnName("originalduration")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Primaveraversion)
                    .HasColumnName("primaveraversion")
                    .HasMaxLength(2);

                entity.Property(e => e.Resourcename)
                    .HasColumnName("resourcename")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPrimaveraAnalysis)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPrimaveraAnalysis_fk_projectid");
            });

            modelBuilder.Entity<TblPrintTemplate>(entity =>
            {
                entity.HasKey(e => e.PkPrinttemplateid);

                entity.ToTable("tblPrintTemplate");

                entity.HasIndex(e => e.Printtemplatename)
                    .HasName("UC_tblPrintTemplate_printtemplatename")
                    .IsUnique();

                entity.Property(e => e.PkPrinttemplateid).HasColumnName("pk_printtemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Printtemplatedescription)
                    .HasColumnName("printtemplatedescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Printtemplatename)
                    .IsRequired()
                    .HasColumnName("printtemplatename")
                    .HasMaxLength(50);

                entity.Property(e => e.Printtemplatetype).HasColumnName("printtemplatetype");
            });

            modelBuilder.Entity<TblPrintTemplateDetail>(entity =>
            {
                entity.HasKey(e => e.PkPrinttemplatedetailid);

                entity.ToTable("tblPrintTemplateDetail");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkPrinttemplateid);

                entity.HasIndex(e => e.FkUserreportid);

                entity.Property(e => e.PkPrinttemplatedetailid).HasColumnName("pk_printtemplatedetailid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkPrinttemplateid).HasColumnName("fk_printtemplateid");

                entity.Property(e => e.FkUserreportid).HasColumnName("fk_userreportid");

                entity.Property(e => e.Isgrayscale).HasColumnName("isgrayscale");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Printtemplatedetailtype).HasColumnName("printtemplatedetailtype");

                entity.Property(e => e.Reportcode)
                    .HasColumnName("reportcode")
                    .HasMaxLength(4);

                entity.Property(e => e.Sortnumber).HasColumnName("sortnumber");

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblPrintTemplateDetail)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .HasConstraintName("FK_tblPrintTemplateDetail_fk_documentlabelid");

                entity.HasOne(d => d.FkPrinttemplate)
                    .WithMany(p => p.TblPrintTemplateDetail)
                    .HasForeignKey(d => d.FkPrinttemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPrintTemplateDetail_fk_printtemplateid");

                entity.HasOne(d => d.FkUserreport)
                    .WithMany(p => p.TblPrintTemplateDetail)
                    .HasForeignKey(d => d.FkUserreportid)
                    .HasConstraintName("FK_tblPrintTemplateDetail_tblUserReport");
            });

            modelBuilder.Entity<TblPriority>(entity =>
            {
                entity.HasKey(e => e.PkPriorityid);

                entity.ToTable("tblPriority");

                entity.HasIndex(e => e.Prioritycode)
                    .HasName("UK_tblPriority")
                    .IsUnique();

                entity.Property(e => e.PkPriorityid).HasColumnName("pk_priorityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Prioritycode)
                    .IsRequired()
                    .HasColumnName("prioritycode")
                    .HasMaxLength(50);

                entity.Property(e => e.Prioritydescription)
                    .IsRequired()
                    .HasColumnName("prioritydescription")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblProbability>(entity =>
            {
                entity.HasKey(e => e.PkProbabilityid);

                entity.ToTable("tblProbability");

                entity.HasIndex(e => e.FkApplicationid);

                entity.Property(e => e.PkProbabilityid).HasColumnName("pk_probabilityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(500);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Probabilitykey).HasColumnName("probabilitykey");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblProbability)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProbability_tblApplication");
            });

            modelBuilder.Entity<TblProcessarea>(entity =>
            {
                entity.HasKey(e => e.PkProcessareaid);

                entity.ToTable("tblProcessarea");

                entity.HasIndex(e => e.Processarea)
                    .HasName("UK_tblProcessarea_processarea")
                    .IsUnique();

                entity.Property(e => e.PkProcessareaid).HasColumnName("pk_processareaid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Processarea)
                    .IsRequired()
                    .HasColumnName("processarea")
                    .HasMaxLength(50);

                entity.Property(e => e.Processareadescription)
                    .IsRequired()
                    .HasColumnName("processareadescription")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<TblProcessAreaRestrictedRight>(entity =>
            {
                entity.HasKey(e => e.PkProcessarearestrictedrightid);

                entity.ToTable("tblProcessAreaRestrictedRight");

                entity.HasIndex(e => e.FkRightid);

                entity.Property(e => e.PkProcessarearestrictedrightid).HasColumnName("pk_processarearestrictedrightid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRightid).HasColumnName("fk_rightid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRight)
                    .WithMany(p => p.TblProcessAreaRestrictedRight)
                    .HasForeignKey(d => d.FkRightid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaRestrictedRight_tblRight");
            });

            modelBuilder.Entity<TblProcessAreaRestrictedRightUserProcessArea>(entity =>
            {
                entity.HasKey(e => e.PkProcessarearestrictedrightuserprocessareaid);

                entity.ToTable("tblProcessAreaRestrictedRightUserProcessArea");

                entity.HasIndex(e => e.FkProcessareaid);

                entity.HasIndex(e => e.FkProcessarearestrictedrightid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkProcessarearestrictedrightuserprocessareaid).HasColumnName("pk_processarearestrictedrightuserprocessareaid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProcessareaid).HasColumnName("fk_processareaid");

                entity.Property(e => e.FkProcessarearestrictedrightid).HasColumnName("fk_processarearestrictedrightid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProcessarea)
                    .WithMany(p => p.TblProcessAreaRestrictedRightUserProcessArea)
                    .HasForeignKey(d => d.FkProcessareaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaRestrictedRightUserProcessArea_tblProcessarea");

                entity.HasOne(d => d.FkProcessarearestrictedright)
                    .WithMany(p => p.TblProcessAreaRestrictedRightUserProcessArea)
                    .HasForeignKey(d => d.FkProcessarearestrictedrightid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaRestrictedRightUserProcessArea_tblProcessAreaRightRestriction");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblProcessAreaRestrictedRightUserProcessArea)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaRestrictedRightUserProcessArea_tblUser");
            });

            modelBuilder.Entity<TblProcessAreaUser>(entity =>
            {
                entity.HasKey(e => e.PkProcessareauserid);

                entity.ToTable("tblProcessAreaUser");

                entity.HasIndex(e => e.FkProcessareaid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkProcessareaid })
                    .HasName("UK_tblProcessAreaUser")
                    .IsUnique();

                entity.Property(e => e.PkProcessareauserid).HasColumnName("pk_processareauserid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProcessareaid).HasColumnName("fk_processareaid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProcessarea)
                    .WithMany(p => p.TblProcessAreaUser)
                    .HasForeignKey(d => d.FkProcessareaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaUser_tblProcessArea");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblProcessAreaUser)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaUser_tblUser");
            });

            modelBuilder.Entity<TblProcessAreaUserReviewSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkProcessareauserreviewsubgroupid);

                entity.ToTable("tblProcessAreaUserReviewSubGroup");

                entity.HasIndex(e => e.FkProcessareauserid);

                entity.HasIndex(e => e.FkReviewsubgroupid);

                entity.HasIndex(e => new { e.FkProcessareauserid, e.FkReviewsubgroupid })
                    .HasName("UK_tblProcessAreaUserReviewSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkProcessareauserreviewsubgroupid).HasColumnName("pk_processareauserreviewsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProcessareauserid).HasColumnName("fk_processareauserid");

                entity.Property(e => e.FkReviewsubgroupid).HasColumnName("fk_reviewsubgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProcessareauser)
                    .WithMany(p => p.TblProcessAreaUserReviewSubGroup)
                    .HasForeignKey(d => d.FkProcessareauserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaUserReviewSubGroup_tblProcessAreaUser");

                entity.HasOne(d => d.FkReviewsubgroup)
                    .WithMany(p => p.TblProcessAreaUserReviewSubGroup)
                    .HasForeignKey(d => d.FkReviewsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProcessAreaUserReviewSubGroup_tblReviewSubGroup");
            });

            modelBuilder.Entity<TblProcurementAccountcode>(entity =>
            {
                entity.HasKey(e => e.PkProcurementaccountcodeid);

                entity.ToTable("tblProcurementAccountcode");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ_tblProcurementAccountcode_code")
                    .IsUnique();

                entity.HasIndex(e => e.Description)
                    .HasName("UQ_tblProcurementAccountcode_description")
                    .IsUnique();

                entity.Property(e => e.PkProcurementaccountcodeid).HasColumnName("pk_procurementaccountcodeid");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblProcurementCode>(entity =>
            {
                entity.HasKey(e => e.PkProcurementcodeid);

                entity.ToTable("tblProcurementCode");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ_tblProcurementCode_code")
                    .IsUnique();

                entity.HasIndex(e => e.Description)
                    .HasName("UQ_tblProcurementCode_description")
                    .IsUnique();

                entity.Property(e => e.PkProcurementcodeid).HasColumnName("pk_procurementcodeid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblProdType>(entity =>
            {
                entity.HasKey(e => e.PkProdtypeid);

                entity.ToTable("tblProdType");

                entity.Property(e => e.PkProdtypeid).HasColumnName("pk_prodtypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Prodtypedescription)
                    .IsRequired()
                    .HasColumnName("prodtypedescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblProduct>(entity =>
            {
                entity.HasKey(e => e.PkProductid);

                entity.ToTable("tblProduct");

                entity.HasIndex(e => e.FkProducttypeid);

                entity.HasIndex(e => e.Productcode)
                    .HasName("UK_tblProduct_code")
                    .IsUnique();

                entity.HasIndex(e => e.Productdescription)
                    .HasName("UK_tblProduct_description")
                    .IsUnique();

                entity.Property(e => e.PkProductid).HasColumnName("pk_productid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProducttypeid).HasColumnName("fk_producttypeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Productcode)
                    .IsRequired()
                    .HasColumnName("productcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Productdescription)
                    .IsRequired()
                    .HasColumnName("productdescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkProducttype)
                    .WithMany(p => p.TblProduct)
                    .HasForeignKey(d => d.FkProducttypeid)
                    .HasConstraintName("FK_tblProduct_tblProductType");
            });

            modelBuilder.Entity<TblProductSymbol>(entity =>
            {
                entity.HasKey(e => e.PkProductsymbolid);

                entity.ToTable("tblProductSymbol");

                entity.HasIndex(e => e.FkProductid);

                entity.HasIndex(e => e.FkSymbolid);

                entity.HasIndex(e => new { e.FkProductid, e.FkSymbolid })
                    .HasName("UK_tblProductSymbol")
                    .IsUnique();

                entity.Property(e => e.PkProductsymbolid).HasColumnName("pk_productsymbolid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProductid).HasColumnName("fk_productid");

                entity.Property(e => e.FkSymbolid).HasColumnName("fk_symbolid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.TblProductSymbol)
                    .HasForeignKey(d => d.FkProductid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProductSymbol_tblProduct");

                entity.HasOne(d => d.FkSymbol)
                    .WithMany(p => p.TblProductSymbol)
                    .HasForeignKey(d => d.FkSymbolid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProductSymbol_tblSymbol");
            });

            modelBuilder.Entity<TblProductType>(entity =>
            {
                entity.HasKey(e => e.PkProducttypeid);

                entity.ToTable("tblProductType");

                entity.HasIndex(e => e.Producttypecode)
                    .HasName("UK_tblProductType_code")
                    .IsUnique();

                entity.HasIndex(e => e.Producttypedescription)
                    .HasName("UK_tblProductType_description")
                    .IsUnique();

                entity.Property(e => e.PkProducttypeid).HasColumnName("pk_producttypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Producttypecode)
                    .IsRequired()
                    .HasColumnName("producttypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Producttypedescription)
                    .IsRequired()
                    .HasColumnName("producttypedescription")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblProgressBatch>(entity =>
            {
                entity.HasKey(e => e.PkProgressbatchid);

                entity.ToTable("tblProgressBatch");

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkProgressbatchid).HasColumnName("pk_progressbatchid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Showindex).HasColumnName("showindex");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnName("title")
                    .HasMaxLength(255);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblProgressBatch)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressBatch_tblProject");
            });

            modelBuilder.Entity<TblProgressBatchReport>(entity =>
            {
                entity.HasKey(e => e.PkProgressbatchreportid);

                entity.ToTable("tblProgressBatchReport");

                entity.HasIndex(e => e.FkProgressbatchid);

                entity.HasIndex(e => e.FkReportviewid);

                entity.Property(e => e.PkProgressbatchreportid).HasColumnName("pk_progressbatchreportid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProgressbatchid).HasColumnName("fk_progressbatchid");

                entity.Property(e => e.FkReportviewid).HasColumnName("fk_reportviewid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportcode)
                    .IsRequired()
                    .HasColumnName("reportcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkProgressbatch)
                    .WithMany(p => p.TblProgressBatchReport)
                    .HasForeignKey(d => d.FkProgressbatchid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressBatchReport_tblProgressBatch");

                entity.HasOne(d => d.FkReportview)
                    .WithMany(p => p.TblProgressBatchReport)
                    .HasForeignKey(d => d.FkReportviewid)
                    .HasConstraintName("FK_tblProgressBatchReport_tblReportView");
            });

            modelBuilder.Entity<TblProgressColor>(entity =>
            {
                entity.HasKey(e => e.PkProgresscolor);

                entity.ToTable("tblProgressColor");

                entity.Property(e => e.PkProgresscolor).HasColumnName("pk_progresscolor");

                entity.Property(e => e.Backcolor).HasColumnName("backcolor");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.ProgressValue).HasColumnName("progressValue");
            });

            modelBuilder.Entity<TblProgressResponsible>(entity =>
            {
                entity.HasKey(e => e.PkProgressresponsibleid);

                entity.ToTable("tblProgressResponsible");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkObsid);

                entity.HasIndex(e => e.FkProcessareaid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => e.FkUnitid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWbsid);

                entity.HasIndex(e => new { e.FkProjectid, e.FkProcessareaid, e.FkUnitid, e.FkShortcodeid, e.FkContractorid, e.FkResourceid, e.FkObsid, e.FkWbsid })
                    .HasName("UK_tblProgressResponsible")
                    .IsUnique();

                entity.Property(e => e.PkProgressresponsibleid).HasColumnName("pk_progressresponsibleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkObsid).HasColumnName("fk_obsid");

                entity.Property(e => e.FkProcessareaid).HasColumnName("fk_processareaid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkUnitid).HasColumnName("fk_unitid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWbsid).HasColumnName("fk_wbsid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_contractorid");

                entity.HasOne(d => d.FkObs)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkObsid)
                    .HasConstraintName("FK_tblProgressResponsible_tblObs");

                entity.HasOne(d => d.FkProcessarea)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkProcessareaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_processareaid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_projectid");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_resourceid");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_shortcodeid");

                entity.HasOne(d => d.FkUnit)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkUnitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_unitid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProgressResponsible_fk_userid");

                entity.HasOne(d => d.FkWbs)
                    .WithMany(p => p.TblProgressResponsible)
                    .HasForeignKey(d => d.FkWbsid)
                    .HasConstraintName("FK_tblProgressResponsible_tblWbs");
            });

            modelBuilder.Entity<TblProject>(entity =>
            {
                entity.HasKey(e => e.PkProjectid);

                entity.ToTable("tblProject");

                entity.HasIndex(e => e.FkBranchid);

                entity.HasIndex(e => e.FkDefaultcalendarid);

                entity.HasIndex(e => e.FkLogoid);

                entity.HasIndex(e => e.FkNormsetid);

                entity.HasIndex(e => e.FkSnapshotactualscheduleitid)
                    .HasName("IX_tblProject_fk_snapshotidactualscheduleitid");

                entity.HasIndex(e => e.FkSnapshotactualsystemsid)
                    .HasName("IX_tblProject_fk_snapshotidactualsystemsid");

                entity.HasIndex(e => e.FkSnapshotbaselinescheduleitid)
                    .HasName("IX_tblProject_fk_snapshotidbaselinescheduleitid");

                entity.HasIndex(e => e.FkSnapshotbaselinesystemsid)
                    .HasName("IX_tblProject_fk_snapshotidbaselinesystemsid");

                entity.HasIndex(e => e.Materialrequestcode)
                    .HasName("IX_UK_tblProject_materialrequestcode")
                    .IsUnique();

                entity.HasIndex(e => e.Projectcode)
                    .HasName("UQ_tblProject_projectcode")
                    .IsUnique();

                entity.HasIndex(e => e.Scopeitrequestcode)
                    .HasName("IX_UK_tblProject_scopeitrequestcode")
                    .IsUnique();

                entity.Property(e => e.PkProjectid).HasColumnName("pk_projectid");

                entity.Property(e => e.Activeuntilldate)
                    .HasColumnName("activeuntilldate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Allowprojectscopetemplates).HasColumnName("allowprojectscopetemplates");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Durationprecision).HasColumnName("durationprecision");

                entity.Property(e => e.FkBranchid).HasColumnName("fk_branchid");

                entity.Property(e => e.FkDefaultcalendarid).HasColumnName("fk_defaultcalendarid");

                entity.Property(e => e.FkLogoid).HasColumnName("fk_logoid");

                entity.Property(e => e.FkNormsetid).HasColumnName("fk_normsetid");

                entity.Property(e => e.FkSnapshotactualscheduleitid).HasColumnName("fk_snapshotactualscheduleitid");

                entity.Property(e => e.FkSnapshotactualsystemsid).HasColumnName("fk_snapshotactualsystemsid");

                entity.Property(e => e.FkSnapshotbaselinescheduleitid).HasColumnName("fk_snapshotbaselinescheduleitid");

                entity.Property(e => e.FkSnapshotbaselinesystemsid).HasColumnName("fk_snapshotbaselinesystemsid");

                entity.Property(e => e.FreezeAllowWithoutDecision).HasColumnName("freeze_allow_without_decision");

                entity.Property(e => e.Ismobileproject).HasColumnName("ismobileproject");

                entity.Property(e => e.Isolationlistfrozenstatus).HasColumnName("isolationlistfrozenstatus");

                entity.Property(e => e.Lastsuccessfulprioritylist).HasColumnName("lastsuccessfulprioritylist");

                entity.Property(e => e.Materialrequestcode)
                    .IsRequired()
                    .HasColumnName("materialrequestcode")
                    .HasMaxLength(4);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(1000);

                entity.Property(e => e.Phaseblockingbehaviour).HasColumnName("phaseblockingbehaviour");

                entity.Property(e => e.Pidshowcombiicon).HasColumnName("pidshowcombiicon");

                entity.Property(e => e.Pidtextmode).HasColumnName("pidtextmode");

                entity.Property(e => e.Projectchangetrackingdescription)
                    .HasColumnName("projectchangetrackingdescription")
                    .IsUnicode(false);

                entity.Property(e => e.Projectcode)
                    .IsRequired()
                    .HasColumnName("projectcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Projectdescription)
                    .IsRequired()
                    .HasColumnName("projectdescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Projectearlyfinish)
                    .HasColumnName("projectearlyfinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Projectearlystart)
                    .HasColumnName("projectearlystart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Projectenddate)
                    .HasColumnName("projectenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Projectlatefinish)
                    .HasColumnName("projectlatefinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Projectlatestart)
                    .HasColumnName("projectlatestart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Projectstartdate)
                    .HasColumnName("projectstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rasconstructiondate)
                    .HasColumnName("rasconstructiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rasprefabdate)
                    .HasColumnName("rasprefabdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopeitrequestcode)
                    .HasColumnName("scopeitrequestcode")
                    .HasMaxLength(4);

                entity.Property(e => e.Showesthrsintimeentry).HasColumnName("showesthrsintimeentry");

                entity.Property(e => e.Webtimeregistrationenabled).HasColumnName("webtimeregistrationenabled");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkBranch)
                    .WithMany(p => p.TblProject)
                    .HasForeignKey(d => d.FkBranchid)
                    .HasConstraintName("FK_tblProject_tblBranch");

                entity.HasOne(d => d.FkDefaultcalendar)
                    .WithMany(p => p.TblProject)
                    .HasForeignKey(d => d.FkDefaultcalendarid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProject_tblCalendar");

                entity.HasOne(d => d.FkLogo)
                    .WithMany(p => p.TblProject)
                    .HasForeignKey(d => d.FkLogoid)
                    .HasConstraintName("FK_tblProject_tblLogo");

                entity.HasOne(d => d.FkNormset)
                    .WithMany(p => p.TblProject)
                    .HasForeignKey(d => d.FkNormsetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProject_fk_normset");

                entity.HasOne(d => d.FkSnapshotactualscheduleit)
                    .WithMany(p => p.TblProjectFkSnapshotactualscheduleit)
                    .HasForeignKey(d => d.FkSnapshotactualscheduleitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_snapshotactualscheduleitid_tblsnapshot");

                entity.HasOne(d => d.FkSnapshotactualsystems)
                    .WithMany(p => p.TblProjectFkSnapshotactualsystems)
                    .HasForeignKey(d => d.FkSnapshotactualsystemsid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_snapshotactualsystemsid_tblsnapshot");

                entity.HasOne(d => d.FkSnapshotbaselinescheduleit)
                    .WithMany(p => p.TblProjectFkSnapshotbaselinescheduleit)
                    .HasForeignKey(d => d.FkSnapshotbaselinescheduleitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_snapshotbaselinescheduleitid_tblsnapshot");

                entity.HasOne(d => d.FkSnapshotbaselinesystems)
                    .WithMany(p => p.TblProjectFkSnapshotbaselinesystems)
                    .HasForeignKey(d => d.FkSnapshotbaselinesystemsid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_snapshotbaselinesystemsid_tblsnapshot");
            });

            modelBuilder.Entity<TblProjectOrganisation>(entity =>
            {
                entity.HasKey(e => e.PkProjectorganisationid);

                entity.ToTable("tblProjectOrganisation");

                entity.HasIndex(e => e.FkOrganisationid);

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkProjectorganisationid).HasColumnName("pk_projectorganisationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkOrganisationid).HasColumnName("fk_organisationid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkOrganisation)
                    .WithMany(p => p.TblProjectOrganisation)
                    .HasForeignKey(d => d.FkOrganisationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectOrganisation_tblOrganisation");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblProjectOrganisation)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectOrganisation_tblProject");
            });

            modelBuilder.Entity<TblProjectWorkflow>(entity =>
            {
                entity.HasKey(e => e.PkProjectworkflowid);

                entity.ToTable("tblProjectWorkflow");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkWorkflowid);

                entity.HasIndex(e => new { e.FkProjectid, e.FkWorkflowid })
                    .HasName("UQ_tblProjectWorkflow")
                    .IsUnique();

                entity.Property(e => e.PkProjectworkflowid).HasColumnName("pk_projectworkflowid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkWorkflowid).HasColumnName("fk_workflowid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblProjectWorkflow)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectWorkflow_tblProject");

                entity.HasOne(d => d.FkWorkflow)
                    .WithMany(p => p.TblProjectWorkflow)
                    .HasForeignKey(d => d.FkWorkflowid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectWorkflow_tblWorkflow");
            });

            modelBuilder.Entity<TblProjectXref>(entity =>
            {
                entity.HasKey(e => e.PkProjectxrefid);

                entity.ToTable("tblProjectXref");

                entity.HasIndex(e => e.FkLinkedprojectid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.FkLinkedprojectid })
                    .HasName("UK_tblProjectXref")
                    .IsUnique();

                entity.Property(e => e.PkProjectxrefid).HasColumnName("pk_projectxrefid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLinkedprojectid).HasColumnName("fk_linkedprojectid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLinkedproject)
                    .WithMany(p => p.TblProjectXrefFkLinkedproject)
                    .HasForeignKey(d => d.FkLinkedprojectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectXref_tblProject_linked");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblProjectXrefFkProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectXref_tblProject");
            });

            modelBuilder.Entity<TblPropack>(entity =>
            {
                entity.HasKey(e => e.PkPropackid);

                entity.ToTable("tblPropack", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Propacknr })
                    .HasName("IX_tblPropack_U1")
                    .IsUnique();

                entity.Property(e => e.PkPropackid).HasColumnName("pk_propackid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkPropacktemplateid).HasColumnName("dk_propacktemplateid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Ispropacktemplatemodified).HasColumnName("ispropacktemplatemodified");

                entity.Property(e => e.Layout).HasColumnName("layout");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Propackidentification).HasColumnName("propackidentification");

                entity.Property(e => e.Propackmemo)
                    .HasColumnName("propackmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Propacknr).HasColumnName("propacknr");

                entity.Property(e => e.Propacktemplatename)
                    .HasColumnName("propacktemplatename")
                    .HasMaxLength(50);

                entity.Property(e => e.Propacktitle)
                    .IsRequired()
                    .HasColumnName("propacktitle")
                    .HasMaxLength(100);

                entity.Property(e => e.Propackusername)
                    .IsRequired()
                    .HasColumnName("propackusername")
                    .HasMaxLength(150);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPropack)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropack_fk_projectid");
            });

            modelBuilder.Entity<TblPropackExport>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportid);

                entity.ToTable("tblPropackExport", "rsy");

                entity.HasIndex(e => e.FkPropackid);

                entity.HasIndex(e => new { e.FkPropackid, e.Propackexportnr })
                    .HasName("IX_tblPropackExport_U1")
                    .IsUnique();

                entity.Property(e => e.PkPropackexportid).HasColumnName("pk_propackexportid");

                entity.Property(e => e.Allowcrewedit).HasColumnName("allowcrewedit");

                entity.Property(e => e.Allowdurationedit).HasColumnName("allowdurationedit");

                entity.Property(e => e.Allowpricetypeoverride).HasColumnName("allowpricetypeoverride");

                entity.Property(e => e.Allowresmemoedit).HasColumnName("allowresmemoedit");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Defaultpricetype).HasColumnName("defaultpricetype");

                entity.Property(e => e.Duedate)
                    .HasColumnName("duedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkPropackid).HasColumnName("fk_propackid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Freezeusername)
                    .HasColumnName("freezeusername")
                    .HasMaxLength(150);

                entity.Property(e => e.Includeshememo).HasColumnName("includeshememo");

                entity.Property(e => e.Includewpholdermemo).HasColumnName("includewpholdermemo");

                entity.Property(e => e.Iswarningduedate).HasColumnName("iswarningduedate");

                entity.Property(e => e.Iswarningresourceadded).HasColumnName("iswarningresourceadded");

                entity.Property(e => e.Iswarningresourcedeleted).HasColumnName("iswarningresourcedeleted");

                entity.Property(e => e.Iswarningrevision).HasColumnName("iswarningrevision");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Propackexportnr).HasColumnName("propackexportnr");

                entity.Property(e => e.Propackexportstate).HasColumnName("propackexportstate");

                entity.Property(e => e.Propackexportusername)
                    .IsRequired()
                    .HasColumnName("propackexportusername")
                    .HasMaxLength(150);

                entity.Property(e => e.Showcompletetree).HasColumnName("showcompletetree");

                entity.Property(e => e.Warningduedatecount).HasColumnName("warningduedatecount");

                entity.Property(e => e.Warningresourceaddedcount).HasColumnName("warningresourceaddedcount");

                entity.Property(e => e.Warningresourcedeletedcount).HasColumnName("warningresourcedeletedcount");

                entity.Property(e => e.Warningrevisioncount).HasColumnName("warningrevisioncount");

                entity.HasOne(d => d.FkPropack)
                    .WithMany(p => p.TblPropackExport)
                    .HasForeignKey(d => d.FkPropackid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExport_fk_propackid");
            });

            modelBuilder.Entity<TblPropackExportDeliverable>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportdeliverableid);

                entity.ToTable("tblPropackExportDeliverable", "rsy");

                entity.HasIndex(e => e.FkDeliverableid);

                entity.HasIndex(e => e.FkPropackexportid);

                entity.HasIndex(e => new { e.FkPropackexportid, e.FkDeliverableid })
                    .HasName("IX_tblPropackExportDeliverable_U1")
                    .IsUnique();

                entity.Property(e => e.PkPropackexportdeliverableid).HasColumnName("pk_propackexportdeliverableid");

                entity.Property(e => e.Allowoverride).HasColumnName("allowoverride");

                entity.Property(e => e.Bythem).HasColumnName("bythem");

                entity.Property(e => e.Byus).HasColumnName("byus");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDeliverableid).HasColumnName("fk_deliverableid");

                entity.Property(e => e.FkPropackexportid).HasColumnName("fk_propackexportid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkDeliverable)
                    .WithMany(p => p.TblPropackExportDeliverable)
                    .HasForeignKey(d => d.FkDeliverableid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExportDeliverable_fk_deliverableid");

                entity.HasOne(d => d.FkPropackexport)
                    .WithMany(p => p.TblPropackExportDeliverable)
                    .HasForeignKey(d => d.FkPropackexportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExportDeliverable_fk_propackexportid");
            });

            modelBuilder.Entity<TblPropackExportLog>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportlogid);

                entity.ToTable("tblPropackExportLog", "rsy");

                entity.HasIndex(e => e.FkPropackexportid);

                entity.Property(e => e.PkPropackexportlogid).HasColumnName("pk_propackexportlogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPropackexportid).HasColumnName("fk_propackexportid");

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction")
                    .HasMaxLength(50);

                entity.Property(e => e.Logreason)
                    .IsRequired()
                    .HasColumnName("logreason")
                    .HasMaxLength(500);

                entity.Property(e => e.Logusername)
                    .IsRequired()
                    .HasColumnName("logusername")
                    .HasMaxLength(150);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkPropackexport)
                    .WithMany(p => p.TblPropackExportLog)
                    .HasForeignKey(d => d.FkPropackexportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExportLog_fk_propackexportid");
            });

            modelBuilder.Entity<TblPropackExportResource>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportresourceid);

                entity.ToTable("tblPropackExportResource", "rsy");

                entity.HasIndex(e => e.FkPropackexportid);

                entity.HasIndex(e => new { e.PkPropackexportresourceid, e.Lastscoperevision, e.FkPropackexportid, e.DkScopejobdetailresid })
                    .HasName("IX_tblPropackExportResource_U1")
                    .IsUnique();

                entity.Property(e => e.PkPropackexportresourceid).HasColumnName("pk_propackexportresourceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkScopejobdetailresid).HasColumnName("dk_scopejobdetailresid");

                entity.Property(e => e.FkPropackexportid).HasColumnName("fk_propackexportid");

                entity.Property(e => e.Lastscoperevision).HasColumnName("lastscoperevision");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkPropackexport)
                    .WithMany(p => p.TblPropackExportResource)
                    .HasForeignKey(d => d.FkPropackexportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExportResource_fk_propackexportid");
            });

            modelBuilder.Entity<TblPropackExportSent>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportsentid);

                entity.ToTable("tblPropackExportSent", "rsy");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkPropackexportid);

                entity.HasIndex(e => new { e.FkPropackexportid, e.FkContractorid })
                    .HasName("IX_tblPropackExportSent_U1")
                    .IsUnique();

                entity.Property(e => e.PkPropackexportsentid).HasColumnName("pk_propackexportsentid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkPropackexportid).HasColumnName("fk_propackexportid");

                entity.Property(e => e.Lastreceivedate)
                    .HasColumnName("lastreceivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Lastsenddate)
                    .HasColumnName("lastsenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblPropackExportSent)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblPropackExportSent_fk_contractorid");

                entity.HasOne(d => d.FkPropackexport)
                    .WithMany(p => p.TblPropackExportSent)
                    .HasForeignKey(d => d.FkPropackexportid)
                    .HasConstraintName("FK_tblPropackExportSent_fk_propackexportid");
            });

            modelBuilder.Entity<TblPropackExportSentImportDeliverableRaw>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportsentimportdeliverablerawid);

                entity.ToTable("tblPropackExportSentImportDeliverableRaw", "rsy");

                entity.HasIndex(e => e.DkDeliverable);

                entity.HasIndex(e => e.DkPropackexportdeliverableid);

                entity.HasIndex(e => e.FkPropackexportsentid);

                entity.Property(e => e.PkPropackexportsentimportdeliverablerawid).HasColumnName("pk_propackexportsentimportdeliverablerawid");

                entity.Property(e => e.Allowoverride).HasColumnName("allowoverride");

                entity.Property(e => e.Bythem).HasColumnName("bythem");

                entity.Property(e => e.Byus).HasColumnName("byus");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkDeliverable).HasColumnName("dk_deliverable");

                entity.Property(e => e.DkPropackexportdeliverableid).HasColumnName("dk_propackexportdeliverableid");

                entity.Property(e => e.FkPropackexportsentid).HasColumnName("fk_propackexportsentid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPropackexportsent)
                    .WithMany(p => p.TblPropackExportSentImportDeliverableRaw)
                    .HasForeignKey(d => d.FkPropackexportsentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExportSentImportDeliverableRaw_fk_propackexportsentid");
            });

            modelBuilder.Entity<TblPropackExportSentImportRaw>(entity =>
            {
                entity.HasKey(e => e.PkPropackexportsentimportrawid);

                entity.ToTable("tblPropackExportSentImportRaw", "rsy");

                entity.HasIndex(e => e.DkPropackexportresourceid);

                entity.HasIndex(e => e.DkScopejobdetailresid);

                entity.HasIndex(e => e.FkPropackexportsentid);

                entity.Property(e => e.PkPropackexportsentimportrawid).HasColumnName("pk_propackexportsentimportrawid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Crew).HasColumnName("crew");

                entity.Property(e => e.DkPropackexportresourceid).HasColumnName("dk_propackexportresourceid");

                entity.Property(e => e.DkScopejobdetailresid).HasColumnName("dk_scopejobdetailresid");

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Esthrs)
                    .HasColumnName("esthrs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Fileversion).HasColumnName("fileversion");

                entity.Property(e => e.FkPropackexportsentid).HasColumnName("fk_propackexportsentid");

                entity.Property(e => e.Isimported).HasColumnName("isimported");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ppresmemo)
                    .HasColumnName("ppresmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Rowtype).HasColumnName("rowtype");

                entity.Property(e => e.Total)
                    .HasColumnName("total")
                    .HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.FkPropackexportsent)
                    .WithMany(p => p.TblPropackExportSentImportRaw)
                    .HasForeignKey(d => d.FkPropackexportsentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackExportSentImportRaw_fk_propackexportsentid");
            });

            modelBuilder.Entity<TblPropackFilter>(entity =>
            {
                entity.HasKey(e => e.PkPropackfilterid);

                entity.ToTable("tblPropackFilter", "rsy");

                entity.HasIndex(e => e.FkPropackid);

                entity.HasIndex(e => e.FkPropacktemplateid);

                entity.Property(e => e.PkPropackfilterid).HasColumnName("pk_propackfilterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fieldname)
                    .IsRequired()
                    .HasColumnName("fieldname")
                    .HasMaxLength(150);

                entity.Property(e => e.Filter)
                    .IsRequired()
                    .HasColumnName("filter");

                entity.Property(e => e.FkPropackid).HasColumnName("fk_propackid");

                entity.Property(e => e.FkPropacktemplateid).HasColumnName("fk_propacktemplateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Visualfilter)
                    .IsRequired()
                    .HasColumnName("visualfilter");

                entity.HasOne(d => d.FkPropack)
                    .WithMany(p => p.TblPropackFilter)
                    .HasForeignKey(d => d.FkPropackid)
                    .HasConstraintName("FK_tblPropackFilter_fk_propackid");

                entity.HasOne(d => d.FkPropacktemplate)
                    .WithMany(p => p.TblPropackFilter)
                    .HasForeignKey(d => d.FkPropacktemplateid)
                    .HasConstraintName("FK_tblPropackFilter_fk_propacktemplateid");
            });

            modelBuilder.Entity<TblPropackTemplate>(entity =>
            {
                entity.HasKey(e => e.PkPropacktemplateid);

                entity.ToTable("tblPropackTemplate", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Propacktemplatedescription })
                    .HasName("IX_tblPropackTemplate_U1")
                    .IsUnique();

                entity.Property(e => e.PkPropacktemplateid).HasColumnName("pk_propacktemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Layout).HasColumnName("layout");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Propacktemplatedescription)
                    .IsRequired()
                    .HasColumnName("propacktemplatedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Templateusername)
                    .IsRequired()
                    .HasColumnName("templateusername")
                    .HasMaxLength(150);

                entity.Property(e => e.Wpphasereadychecked).HasColumnName("wpphasereadychecked");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPropackTemplate)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPropackTemplate_fk_projectid");
            });

            modelBuilder.Entity<TblPunchCategory>(entity =>
            {
                entity.HasKey(e => e.PkPunchcategoryid);

                entity.ToTable("tblPunchCategory");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Code })
                    .HasName("UK_tblPunchCategory_Code")
                    .IsUnique();

                entity.Property(e => e.PkPunchcategoryid).HasColumnName("pk_punchcategoryid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPunchCategory)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPunchCategory_tblProject");
            });

            modelBuilder.Entity<TblPunchGroup>(entity =>
            {
                entity.HasKey(e => e.PkPunchgroupid);

                entity.ToTable("tblPunchGroup");

                entity.HasIndex(e => e.Description)
                    .HasName("UQ_tblPunchGroup")
                    .IsUnique();

                entity.Property(e => e.PkPunchgroupid).HasColumnName("pk_punchgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblPushJob>(entity =>
            {
                entity.HasKey(e => e.PkPushjobid);

                entity.ToTable("tblPushJob");

                entity.Property(e => e.PkPushjobid).HasColumnName("pk_pushjobid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkResourceid).HasColumnName("dk_resourceid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Processed)
                    .HasColumnName("processed")
                    .HasColumnType("datetime");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblPushJob)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPushJob_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPushJob)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPushJob_tblUser");
            });

            modelBuilder.Entity<TblPushUser>(entity =>
            {
                entity.HasKey(e => e.PkPushuserid);

                entity.ToTable("tblPushUser");

                entity.Property(e => e.PkPushuserid).HasColumnName("pk_pushuserid");

                entity.Property(e => e.Channelid)
                    .IsRequired()
                    .HasColumnName("channelid")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Deviceid)
                    .IsRequired()
                    .HasColumnName("deviceid")
                    .HasMaxLength(250);

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Platform).HasColumnName("platform");

                entity.Property(e => e.Timestamp)
                    .HasColumnName("timestamp")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblPushUser)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPushUser_tblUser");
            });

            modelBuilder.Entity<TblQaqcBasicListSignBox>(entity =>
            {
                entity.HasKey(e => e.PkQaqcbasiclistsignboxid);

                entity.ToTable("tblQaqcBasicListSignBox");

                entity.HasIndex(e => e.FkBasiclistsignboxid);

                entity.HasIndex(e => e.FkQaqcquicklistid);

                entity.Property(e => e.PkQaqcbasiclistsignboxid).HasColumnName("pk_qaqcbasiclistsignboxid");

                entity.Property(e => e.Code)
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasiclistsignboxid).HasColumnName("fk_basiclistsignboxid");

                entity.Property(e => e.FkQaqcquicklistid).HasColumnName("fk_qaqcquicklistid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasiclistsignbox)
                    .WithMany(p => p.TblQaqcBasicListSignBox)
                    .HasForeignKey(d => d.FkBasiclistsignboxid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQaqcBasicListSignBox_tblBasicListSignbox");

                entity.HasOne(d => d.FkQaqcquicklist)
                    .WithMany(p => p.TblQaqcBasicListSignBox)
                    .HasForeignKey(d => d.FkQaqcquicklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQaqcBasicListSignBox_tblQaqcQuicklist");
            });

            modelBuilder.Entity<TblQaqcQuicklist>(entity =>
            {
                entity.HasKey(e => e.PkQaqcquicklistid);

                entity.ToTable("tblQaqcQuicklist");

                entity.HasIndex(e => e.FkHandovergroupmainid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => e.FkUserreportid);

                entity.HasIndex(e => new { e.FkProjectid, e.Listnr })
                    .HasName("UC_tblQaqcQuicklist")
                    .IsUnique();

                entity.Property(e => e.PkQaqcquicklistid).HasColumnName("pk_qaqcquicklistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Documentimage).HasColumnName("documentimage");

                entity.Property(e => e.Documentname)
                    .HasColumnName("documentname")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHandovergroupmainid).HasColumnName("fk_handovergroupmainid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkUserreportid).HasColumnName("fk_userreportid");

                entity.Property(e => e.Listnr)
                    .IsRequired()
                    .HasColumnName("listnr")
                    .HasMaxLength(2);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.QaqcquicklistdescriptionL1)
                    .HasColumnName("qaqcquicklistdescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.QaqcquicklistdescriptionL2)
                    .HasColumnName("qaqcquicklistdescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.QaqcquicklistdescriptionL3)
                    .HasColumnName("qaqcquicklistdescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.QaqcquicklistdescriptionL4)
                    .HasColumnName("qaqcquicklistdescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.QaqcquicklistdescriptionL5)
                    .HasColumnName("qaqcquicklistdescription_l5")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkHandovergroupmain)
                    .WithMany(p => p.TblQaqcQuicklist)
                    .HasForeignKey(d => d.FkHandovergroupmainid)
                    .HasConstraintName("FK_tblQaqcQuicklist_tblHandoverGroupMain");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblQaqcQuicklist)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQaqcQuicklist_tblMainPhase");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblQaqcQuicklist)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQaqcQuicklist_tblProject");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblQaqcQuicklist)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQaqcQuicklist_tblSubDiscipline");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblQaqcQuicklist)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQaqcQuicklist_tblSubPhase");

                entity.HasOne(d => d.FkUserreport)
                    .WithMany(p => p.TblQaqcQuicklist)
                    .HasForeignKey(d => d.FkUserreportid)
                    .HasConstraintName("FK_tblQaqcQuicklist_tblUserReport");
            });

            modelBuilder.Entity<TblQaqcReport>(entity =>
            {
                entity.HasKey(e => e.PkQaqcreportid);

                entity.ToTable("tblQaqcReport");

                entity.HasIndex(e => e.Qaqcreportcode)
                    .HasName("UK_tblqaqcreport_code")
                    .IsUnique();

                entity.HasIndex(e => e.Qaqcreportdescription)
                    .HasName("UK_tblqaqcreport_description")
                    .IsUnique();

                entity.Property(e => e.PkQaqcreportid).HasColumnName("pk_qaqcreportid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Qaqcreportcode)
                    .IsRequired()
                    .HasColumnName("qaqcreportcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Qaqcreportdescription)
                    .IsRequired()
                    .HasColumnName("qaqcreportdescription")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblQualityCheckType>(entity =>
            {
                entity.HasKey(e => e.PkQualitycheckid);

                entity.ToTable("tblQualityCheckType");

                entity.HasIndex(e => e.Qualitycheckdescription)
                    .HasName("UK_tblQualityCheckType_qualitycheckdescription")
                    .IsUnique();

                entity.Property(e => e.PkQualitycheckid).HasColumnName("pk_qualitycheckid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Qualitycheckdescription)
                    .IsRequired()
                    .HasColumnName("qualitycheckdescription")
                    .HasColumnType("char(3)");
            });

            modelBuilder.Entity<TblQuotationRequest>(entity =>
            {
                entity.HasKey(e => e.PkQuotationrequestid);

                entity.ToTable("tblQuotationRequest", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkProjectid, e.Requestnr })
                    .HasName("IX_tblQuotationRequest_U1")
                    .IsUnique();

                entity.Property(e => e.PkQuotationrequestid).HasColumnName("pk_quotationrequestid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Requestnr)
                    .IsRequired()
                    .HasColumnName("requestnr")
                    .HasMaxLength(20);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasColumnType("char(1)");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblQuotationRequest)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuotationRequest_fk_projectid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblQuotationRequest)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuotationRequest_fk_userid");
            });

            modelBuilder.Entity<TblQuotationRequestVendor>(entity =>
            {
                entity.HasKey(e => e.PkQuotationrequestvendorid);

                entity.ToTable("tblQuotationRequestVendor", "rsy");

                entity.HasIndex(e => e.FkContractorid)
                    .HasName("IX_tblQuotationRequestVendor_fk_vendorid");

                entity.HasIndex(e => e.FkQuotationrequestid);

                entity.HasIndex(e => new { e.FkQuotationrequestid, e.FkContractorid })
                    .HasName("IX_tblQuotationRequestVendor_U1")
                    .IsUnique();

                entity.Property(e => e.PkQuotationrequestvendorid).HasColumnName("pk_quotationrequestvendorid");

                entity.Property(e => e.Bidindate)
                    .HasColumnName("bidindate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Bidoutdate)
                    .HasColumnName("bidoutdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Emailfrom)
                    .IsRequired()
                    .HasColumnName("emailfrom")
                    .HasMaxLength(100);

                entity.Property(e => e.Emailto)
                    .IsRequired()
                    .HasColumnName("emailto")
                    .HasMaxLength(100);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkQuotationrequestid).HasColumnName("fk_quotationrequestid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblQuotationRequestVendor)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuotationRequestVendor_tblContractor");

                entity.HasOne(d => d.FkQuotationrequest)
                    .WithMany(p => p.TblQuotationRequestVendor)
                    .HasForeignKey(d => d.FkQuotationrequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblQuotationRequestVendor_fk_quotationrequestid");
            });

            modelBuilder.Entity<TblRate>(entity =>
            {
                entity.HasKey(e => e.PkRateid);

                entity.ToTable("tblRate");

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.Property(e => e.PkRateid).HasColumnName("pk_rateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblRate)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRate_tblSubDiscipline");
            });

            modelBuilder.Entity<TblReference>(entity =>
            {
                entity.HasKey(e => e.PkReferenceid);

                entity.ToTable("tblReference");

                entity.HasIndex(e => e.Referencetype)
                    .HasName("referenceType");

                entity.HasIndex(e => new { e.Code, e.Referencetype })
                    .HasName("code_referencetype")
                    .IsUnique();

                entity.HasIndex(e => new { e.Description, e.Referencetype })
                    .HasName("description_referencetype")
                    .IsUnique();

                entity.HasIndex(e => new { e.Key, e.Referencetype })
                    .HasName("key_referencetype")
                    .IsUnique();

                entity.Property(e => e.PkReferenceid).HasColumnName("pk_referenceid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.Key).HasColumnName("key");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Referencetype).HasColumnName("referencetype");
            });

            modelBuilder.Entity<TblReleaseForPermit>(entity =>
            {
                entity.HasKey(e => e.PkReleaseforpermitid);

                entity.ToTable("tblReleaseForPermit");

                entity.HasIndex(e => e.FkUserid)
                    .HasName("IX_tblScopeJobReleaseForPermit_fk_userid");

                entity.HasIndex(e => new { e.FkScopejobid, e.FkPermitid })
                    .HasName("UK_tblReleaseForPermit_fk_scopejobid_fk_permitid")
                    .IsUnique();

                entity.Property(e => e.PkReleaseforpermitid).HasColumnName("pk_releaseforpermitid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Isreleasedforpermit).HasColumnName("isreleasedforpermit");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Releasedforpermitdate)
                    .HasColumnName("releasedforpermitdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblReleaseForPermit)
                    .HasForeignKey(d => d.FkPermitid)
                    .HasConstraintName("FK_ttblReleaseForPermit_tblPermit");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblReleaseForPermit)
                    .HasForeignKey(d => d.FkScopejobid)
                    .HasConstraintName("FK_tblReleaseForPermit_tblScopeJob");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblReleaseForPermit)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReleaseForPermit_tblUser");
            });

            modelBuilder.Entity<TblReport>(entity =>
            {
                entity.HasKey(e => e.PkReportid);

                entity.ToTable("tblReport");

                entity.HasIndex(e => e.FkBasereportid);

                entity.Property(e => e.PkReportid).HasColumnName("pk_reportid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportid).HasColumnName("fk_basereportid");

                entity.Property(e => e.Issuecount).HasColumnName("issuecount");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportissuedate)
                    .HasColumnName("reportissuedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reportjobdescription)
                    .HasColumnName("reportjobdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Reportjobmemo)
                    .HasColumnName("reportjobmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Reportnumber).HasColumnName("reportnumber");

                entity.Property(e => e.Reportstate).HasColumnName("reportstate");

                entity.HasOne(d => d.FkBasereport)
                    .WithMany(p => p.TblReport)
                    .HasForeignKey(d => d.FkBasereportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReport_tblBaseReport");
            });

            modelBuilder.Entity<TblReportItemPart>(entity =>
            {
                entity.HasKey(e => e.PkReportitempartid);

                entity.ToTable("tblReportItemPart");

                entity.HasIndex(e => e.FkBasereportitempartid);

                entity.HasIndex(e => e.FkReportid);

                entity.Property(e => e.PkReportitempartid).HasColumnName("pk_reportitempartid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasereportitempartid).HasColumnName("fk_basereportitempartid");

                entity.Property(e => e.FkReportid).HasColumnName("fk_reportid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.State).HasColumnName("state");

                entity.Property(e => e.Textvalue)
                    .HasColumnName("textvalue")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBasereportitempart)
                    .WithMany(p => p.TblReportItemPart)
                    .HasForeignKey(d => d.FkBasereportitempartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReportItemPart_tblBaseReportItemPart");

                entity.HasOne(d => d.FkReport)
                    .WithMany(p => p.TblReportItemPart)
                    .HasForeignKey(d => d.FkReportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReportItemPart_tblReport");
            });

            modelBuilder.Entity<TblReportPrinter>(entity =>
            {
                entity.HasKey(e => e.PkReportprinterid);

                entity.ToTable("tblReportPrinter");

                entity.HasIndex(e => e.FkBasereportid);

                entity.HasIndex(e => e.Printername)
                    .HasName("UK_tblReportPrinter_printername")
                    .IsUnique();

                entity.Property(e => e.PkReportprinterid).HasColumnName("pk_reportprinterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .HasColumnName("description")
                    .HasMaxLength(250);

                entity.Property(e => e.FkBasereportid).HasColumnName("fk_basereportid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Printername)
                    .IsRequired()
                    .HasColumnName("printername")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkBasereport)
                    .WithMany(p => p.TblReportPrinter)
                    .HasForeignKey(d => d.FkBasereportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReportPrinter_tblBaseReport");
            });

            modelBuilder.Entity<TblReportToolBoxItem>(entity =>
            {
                entity.HasKey(e => e.PkReporttoolboxitemid);

                entity.ToTable("tblReportToolBoxItem");

                entity.Property(e => e.PkReporttoolboxitemid).HasColumnName("pk_reporttoolboxitemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reporttypename).HasColumnName("reporttypename");

                entity.Property(e => e.Toolboxitemname)
                    .IsRequired()
                    .HasColumnName("toolboxitemname")
                    .HasMaxLength(50);

                entity.Property(e => e.Width).HasColumnName("width");
            });

            modelBuilder.Entity<TblReportToolBoxItemPart>(entity =>
            {
                entity.HasKey(e => e.PkReporttoolboxitempartid);

                entity.ToTable("tblReportToolBoxItemPart");

                entity.HasIndex(e => e.FkReporttoolboxitemid);

                entity.Property(e => e.PkReporttoolboxitempartid).HasColumnName("pk_reporttoolboxitempartid");

                entity.Property(e => e.Baseitemparttype).HasColumnName("baseitemparttype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Datafield)
                    .HasColumnName("datafield")
                    .HasMaxLength(50);

                entity.Property(e => e.FkReporttoolboxitemid).HasColumnName("fk_reporttoolboxitemid");

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Orientation).HasColumnName("orientation");

                entity.Property(e => e.Textvalue)
                    .HasColumnName("textvalue")
                    .HasMaxLength(150);

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkReporttoolboxitem)
                    .WithMany(p => p.TblReportToolBoxItemPart)
                    .HasForeignKey(d => d.FkReporttoolboxitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblreportToolBoxItemPart_tblreportToolBoxItem");
            });

            modelBuilder.Entity<TblReportView>(entity =>
            {
                entity.HasKey(e => e.PkReportviewid);

                entity.ToTable("tblReportView");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkReportviewid).HasColumnName("pk_reportviewid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportcode)
                    .IsRequired()
                    .HasColumnName("reportcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportviewname)
                    .IsRequired()
                    .HasColumnName("reportviewname")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblReportView)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblReportView_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblReportView)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblReportView_tblUser");
            });

            modelBuilder.Entity<TblReportViewParameter>(entity =>
            {
                entity.HasKey(e => e.PkReportviewparameterid);

                entity.ToTable("tblReportViewParameter");

                entity.HasIndex(e => e.FkReportviewid);

                entity.Property(e => e.PkReportviewparameterid).HasColumnName("pk_reportviewparameterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkReportviewid).HasColumnName("fk_reportviewid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Parametername)
                    .IsRequired()
                    .HasColumnName("parametername")
                    .HasMaxLength(50);

                entity.Property(e => e.Value).HasColumnName("value");

                entity.HasOne(d => d.FkReportview)
                    .WithMany(p => p.TblReportViewParameter)
                    .HasForeignKey(d => d.FkReportviewid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReportViewParameter_tblReportView");
            });

            modelBuilder.Entity<TblResource>(entity =>
            {
                entity.HasKey(e => e.PkResourceid);

                entity.ToTable("tblResource");

                entity.HasIndex(e => e.FkDefaultcostcenterid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => e.FkTimekeepingsubcodeid);

                entity.HasIndex(e => e.Resourcecode)
                    .HasName("UC_tblResource_resourcecode")
                    .IsUnique();

                entity.Property(e => e.PkResourceid).HasColumnName("pk_resourceid");

                entity.Property(e => e.Activitytype)
                    .HasColumnName("activitytype")
                    .HasMaxLength(10);

                entity.Property(e => e.Autoapprove).HasColumnName("autoapprove");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDefaultcostcenterid).HasColumnName("fk_defaultcostcenterid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkTimekeepingsubcodeid).HasColumnName("fk_timekeepingsubcodeid");

                entity.Property(e => e.Iswelditresource).HasColumnName("iswelditresource");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourcecode)
                    .IsRequired()
                    .HasColumnName("resourcecode")
                    .HasMaxLength(255);

                entity.Property(e => e.Resourcecolor).HasColumnName("resourcecolor");

                entity.Property(e => e.ResourcedescriptionL1)
                    .IsRequired()
                    .HasColumnName("resourcedescription_l1")
                    .HasMaxLength(255);

                entity.Property(e => e.ResourcedescriptionL2)
                    .HasColumnName("resourcedescription_l2")
                    .HasMaxLength(255);

                entity.Property(e => e.ResourcedescriptionL3)
                    .HasColumnName("resourcedescription_l3")
                    .HasMaxLength(255);

                entity.Property(e => e.ResourcedescriptionL4)
                    .HasColumnName("resourcedescription_l4")
                    .HasMaxLength(255);

                entity.Property(e => e.ResourcedescriptionL5)
                    .HasColumnName("resourcedescription_l5")
                    .HasMaxLength(255);

                entity.Property(e => e.Resourcetype).HasColumnName("resourcetype");

                entity.Property(e => e.Workcenter)
                    .HasColumnName("workcenter")
                    .HasMaxLength(10);

                entity.HasOne(d => d.FkDefaultcostcenter)
                    .WithMany(p => p.TblResource)
                    .HasForeignKey(d => d.FkDefaultcostcenterid)
                    .HasConstraintName("FK_tblResource_tblCostCenter");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblResource)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblResource_fk_subdisciplineid");

                entity.HasOne(d => d.FkTimekeepingsubcode)
                    .WithMany(p => p.TblResource)
                    .HasForeignKey(d => d.FkTimekeepingsubcodeid)
                    .HasConstraintName("FK_tblResource_tblTimekeepingSubCode");
            });

            modelBuilder.Entity<TblResourceConstraint>(entity =>
            {
                entity.HasKey(e => e.PkResourceconstraintid);

                entity.ToTable("tblResourceConstraint");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => new { e.FkProjectid, e.Resourceconstraintpriority })
                    .HasName("IX_tblResourceConstraint")
                    .IsUnique();

                entity.Property(e => e.PkResourceconstraintid).HasColumnName("pk_resourceconstraintid");

                entity.Property(e => e.Averagemanpowerneeded)
                    .HasColumnName("averagemanpowerneeded")
                    .HasMaxLength(255);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.Leveledunits).HasColumnName("leveledunits");

                entity.Property(e => e.Levelresource).HasColumnName("levelresource");

                entity.Property(e => e.Maxmanpowerperjob)
                    .HasColumnName("maxmanpowerperjob")
                    .HasMaxLength(255);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourceconstraintautocalculateunitsminimum).HasColumnName("resourceconstraintautocalculateunitsminimum");

                entity.Property(e => e.Resourceconstraintconditions).HasColumnName("resourceconstraintconditions");

                entity.Property(e => e.Resourceconstraintdescription)
                    .HasColumnName("resourceconstraintdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Resourceconstraintminimumunits).HasColumnName("resourceconstraintminimumunits");

                entity.Property(e => e.Resourceconstraintoverplan).HasColumnName("resourceconstraintoverplan");

                entity.Property(e => e.Resourceconstraintpriority).HasColumnName("resourceconstraintpriority");

                entity.Property(e => e.Resourceconstraintunits).HasColumnName("resourceconstraintunits");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblResourceConstraint)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblResourceConstraint_tblContractor");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblResourceConstraint)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblResourceConstraint_tblProject");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblResourceConstraint)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblResourceConstraint_tblResource");
            });

            modelBuilder.Entity<TblReview>(entity =>
            {
                entity.HasKey(e => e.PkReviewid);

                entity.ToTable("tblReview");

                entity.HasIndex(e => e.FkChangerequestid);

                entity.HasIndex(e => e.FkReviewsubgroupid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkReviewid).HasColumnName("pk_reviewid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangerequestid).HasColumnName("fk_changerequestid");

                entity.Property(e => e.FkReviewsubgroupid).HasColumnName("fk_reviewsubgroupid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Responsedate)
                    .HasColumnName("responsedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Responseuser)
                    .HasColumnName("responseuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reviewcomment)
                    .HasColumnName("reviewcomment")
                    .HasMaxLength(500);

                entity.Property(e => e.Reviewcompleted)
                    .HasColumnName("reviewcompleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reviewresult).HasColumnName("reviewresult");

                entity.Property(e => e.Reviewstarted)
                    .HasColumnName("reviewstarted")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkChangerequest)
                    .WithMany(p => p.TblReview)
                    .HasForeignKey(d => d.FkChangerequestid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReview_tblChangeRequest");

                entity.HasOne(d => d.FkReviewsubgroup)
                    .WithMany(p => p.TblReview)
                    .HasForeignKey(d => d.FkReviewsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReview_tblReviewSubGroup");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblReview)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReview_tblUser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblReview)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReview_tblWorkflowState");
            });

            modelBuilder.Entity<TblReviewComplexityItem>(entity =>
            {
                entity.HasKey(e => e.PkReviewcomplexityitemid);

                entity.ToTable("tblReviewComplexityItem");

                entity.HasIndex(e => e.FkComplexityitemid);

                entity.HasIndex(e => e.FkReviewid);

                entity.HasIndex(e => new { e.FkReviewid, e.FkComplexityitemid })
                    .HasName("UK_tblReviewComplexityItem")
                    .IsUnique();

                entity.Property(e => e.PkReviewcomplexityitemid).HasColumnName("pk_reviewcomplexityitemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkComplexityitemid).HasColumnName("fk_complexityitemid");

                entity.Property(e => e.FkReviewid).HasColumnName("fk_reviewid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkComplexityitem)
                    .WithMany(p => p.TblReviewComplexityItem)
                    .HasForeignKey(d => d.FkComplexityitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReviewComplexityItem_tblComplexityItem");

                entity.HasOne(d => d.FkReview)
                    .WithMany(p => p.TblReviewComplexityItem)
                    .HasForeignKey(d => d.FkReviewid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReviewComplexityItem_tblReview");
            });

            modelBuilder.Entity<TblReviewGroup>(entity =>
            {
                entity.HasKey(e => e.PkReviewgroupid);

                entity.ToTable("tblReviewGroup");

                entity.HasIndex(e => e.Groupname)
                    .HasName("UQ_tblReviewGroup")
                    .IsUnique();

                entity.Property(e => e.PkReviewgroupid).HasColumnName("pk_reviewgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Groupname)
                    .IsRequired()
                    .HasColumnName("groupname")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblReviewMainGroup>(entity =>
            {
                entity.HasKey(e => e.PkReviewmaingroupid);

                entity.ToTable("tblReviewMainGroup");

                entity.HasIndex(e => e.Reviewmaingroupname)
                    .HasName("UK_tblReviewMainGroup")
                    .IsUnique();

                entity.Property(e => e.PkReviewmaingroupid).HasColumnName("pk_reviewmaingroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reviewmaingroupname)
                    .IsRequired()
                    .HasColumnName("reviewmaingroupname")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblReviewSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkReviewsubgroupid);

                entity.ToTable("tblReviewSubGroup");

                entity.HasIndex(e => e.FkDefaultchecklistid);

                entity.HasIndex(e => e.FkReviewmaingroupid);

                entity.HasIndex(e => new { e.FkReviewmaingroupid, e.Reviewsubgroupname })
                    .HasName("UK_tblReviewSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkReviewsubgroupid).HasColumnName("pk_reviewsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDefaultchecklistid).HasColumnName("fk_defaultchecklistid");

                entity.Property(e => e.FkReviewmaingroupid).HasColumnName("fk_reviewmaingroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reviewsubgroupname)
                    .IsRequired()
                    .HasColumnName("reviewsubgroupname")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDefaultchecklist)
                    .WithMany(p => p.TblReviewSubGroup)
                    .HasForeignKey(d => d.FkDefaultchecklistid)
                    .HasConstraintName("FK_tblReviewSubGroup_tblChecklist");

                entity.HasOne(d => d.FkReviewmaingroup)
                    .WithMany(p => p.TblReviewSubGroup)
                    .HasForeignKey(d => d.FkReviewmaingroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblReviewSubGroup_tblReviewMainGroup");
            });

            modelBuilder.Entity<TblRevision>(entity =>
            {
                entity.HasKey(e => e.PkRevisionid);

                entity.ToTable("tblRevision");

                entity.HasIndex(e => e.FkApplicationid)
                    .HasName("IX_tblRevision_ApplicationId");

                entity.HasIndex(e => new { e.Revisionaccepteddate, e.Revisiontype });

                entity.Property(e => e.PkRevisionid).HasColumnName("pk_revisionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisionaccepteddate)
                    .HasColumnName("revisionaccepteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisionaccepteduser)
                    .HasColumnName("revisionaccepteduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisiondate)
                    .HasColumnName("revisiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisiondescription)
                    .IsRequired()
                    .HasColumnName("revisiondescription");

                entity.Property(e => e.Revisionno).HasColumnName("revisionno");

                entity.Property(e => e.Revisiontype).HasColumnName("revisiontype");

                entity.Property(e => e.Revisionuser)
                    .IsRequired()
                    .HasColumnName("revisionuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblRevision)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRevision_tblApplication");
            });

            modelBuilder.Entity<TblRevisionChange>(entity =>
            {
                entity.HasKey(e => e.PkRevisionchangeid);

                entity.ToTable("tblRevisionChange");

                entity.HasIndex(e => e.FkRevisionchangeuserid);

                entity.HasIndex(e => e.FkRevisionid);

                entity.Property(e => e.PkRevisionchangeid).HasColumnName("pk_revisionchangeid");

                entity.Property(e => e.Changedate)
                    .HasColumnName("changedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changedfield)
                    .IsRequired()
                    .HasColumnName("changedfield")
                    .HasMaxLength(500);

                entity.Property(e => e.Changetypeid).HasColumnName("changetypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRevisionchangeuserid).HasColumnName("fk_revisionchangeuserid");

                entity.Property(e => e.FkRevisionid).HasColumnName("fk_revisionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Newvalue)
                    .HasColumnName("newvalue")
                    .HasMaxLength(4000);

                entity.Property(e => e.Oldvalue)
                    .HasColumnName("oldvalue")
                    .HasMaxLength(4000);

                entity.Property(e => e.Revisionchangetype).HasColumnName("revisionchangetype");

                entity.Property(e => e.Rightattributetype).HasColumnName("rightattributetype");

                entity.HasOne(d => d.FkRevisionchangeuser)
                    .WithMany(p => p.TblRevisionChange)
                    .HasForeignKey(d => d.FkRevisionchangeuserid)
                    .HasConstraintName("FK_tblRevisionChange_tblUser");

                entity.HasOne(d => d.FkRevision)
                    .WithMany(p => p.TblRevisionChange)
                    .HasForeignKey(d => d.FkRevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRevisionChange_tblrevision");
            });

            modelBuilder.Entity<TblRevisionFeedback>(entity =>
            {
                entity.HasKey(e => e.PkRevisionfeedbackid);

                entity.ToTable("tblRevisionFeedback");

                entity.HasIndex(e => e.FkRevisionid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkRevisionfeedbackid).HasColumnName("pk_revisionfeedbackid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Feedbackmessage)
                    .HasColumnName("feedbackmessage")
                    .HasMaxLength(4000);

                entity.Property(e => e.FkRevisionid).HasColumnName("fk_revisionid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRevision)
                    .WithMany(p => p.TblRevisionFeedback)
                    .HasForeignKey(d => d.FkRevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRevisionFeedback_tblRevision");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblRevisionFeedback)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblRevisionFeedback_tblUser");
            });

            modelBuilder.Entity<TblRevisionInfo>(entity =>
            {
                entity.HasKey(e => e.PkRevisioninfoid);

                entity.ToTable("tblRevisionInfo");

                entity.Property(e => e.PkRevisioninfoid).HasColumnName("pk_revisioninfoid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisioncomputer)
                    .HasColumnName("revisioncomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisiondate)
                    .HasColumnName("revisiondate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Revisionnumber).HasColumnName("revisionnumber");

                entity.Property(e => e.Revisionreason).HasColumnName("revisionreason");

                entity.Property(e => e.Revisionuser)
                    .HasColumnName("revisionuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblRight>(entity =>
            {
                entity.HasKey(e => e.PkRightid);

                entity.ToTable("tblRight");

                entity.HasIndex(e => e.FkRightfunctionid);

                entity.HasIndex(e => e.FkRightpermissionid);

                entity.HasIndex(e => new { e.FkRightfunctionid, e.FkRightpermissionid })
                    .HasName("UQ_tblRight")
                    .IsUnique();

                entity.Property(e => e.PkRightid).HasColumnName("pk_rightid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRightfunctionid).HasColumnName("fk_rightfunctionid");

                entity.Property(e => e.FkRightpermissionid).HasColumnName("fk_rightpermissionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRightfunction)
                    .WithMany(p => p.TblRight)
                    .HasForeignKey(d => d.FkRightfunctionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRight_tblRightFunction");

                entity.HasOne(d => d.FkRightpermission)
                    .WithMany(p => p.TblRight)
                    .HasForeignKey(d => d.FkRightpermissionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRight_tblRightPermission");
            });

            modelBuilder.Entity<TblRightFunction>(entity =>
            {
                entity.HasKey(e => e.PkRightfunctionid);

                entity.ToTable("tblRightFunction");

                entity.HasIndex(e => e.FkApplicationid);

                entity.HasIndex(e => e.FkRightgroupid);

                entity.HasIndex(e => new { e.FkApplicationid, e.Code })
                    .HasName("UQ_tblRightFunction_CodePerApplication")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkApplicationid, e.Description })
                    .HasName("UQ_tblRightFunction_DescriptionPerApplication")
                    .IsUnique();

                entity.Property(e => e.PkRightfunctionid).HasColumnName("pk_rightfunctionid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(200);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.FkRightgroupid).HasColumnName("fk_rightgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblRightFunction)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRightFunction_tblApplication");

                entity.HasOne(d => d.FkRightgroup)
                    .WithMany(p => p.TblRightFunction)
                    .HasForeignKey(d => d.FkRightgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRightFunction_tblRightGroup");
            });

            modelBuilder.Entity<TblRightGroup>(entity =>
            {
                entity.HasKey(e => e.PkRightgroupid);

                entity.ToTable("tblRightGroup");

                entity.HasIndex(e => e.FkApplicationid);

                entity.HasIndex(e => new { e.FkApplicationid, e.Description })
                    .HasName("UQ_tblRightGroup_DescriptionPerApplication")
                    .IsUnique();

                entity.Property(e => e.PkRightgroupid).HasColumnName("pk_rightgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(200);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblRightGroup)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRightGroup_tblApplication");
            });

            modelBuilder.Entity<TblRightPermission>(entity =>
            {
                entity.HasKey(e => e.PkRightpermissionid);

                entity.ToTable("tblRightPermission");

                entity.HasIndex(e => e.Code)
                    .HasName("UQ_tblRightPermission")
                    .IsUnique();

                entity.Property(e => e.PkRightpermissionid).HasColumnName("pk_rightpermissionid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(20);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(200);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");
            });

            modelBuilder.Entity<TblRingJoint>(entity =>
            {
                entity.HasKey(e => e.PkRingjointid);

                entity.ToTable("tblRingJoint");

                entity.HasIndex(e => e.Ringjointcode)
                    .HasName("UK_ringjoint_code")
                    .IsUnique();

                entity.HasIndex(e => e.Ringjointdescription)
                    .HasName("UK_ringjoint_description")
                    .IsUnique();

                entity.Property(e => e.PkRingjointid).HasColumnName("pk_ringjointid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ringjointcode)
                    .IsRequired()
                    .HasColumnName("ringjointcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Ringjointdescription)
                    .IsRequired()
                    .HasColumnName("ringjointdescription")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblRiskMatrix>(entity =>
            {
                entity.HasKey(e => e.PkRiskmatrixid);

                entity.ToTable("tblRiskMatrix");

                entity.HasIndex(e => e.FkApplicationid);

                entity.Property(e => e.PkRiskmatrixid).HasColumnName("pk_Riskmatrixid");

                entity.Property(e => e.Backcolor).HasColumnName("backcolor");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Effectkey).HasColumnName("effectkey");

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Ismaxrisk).HasColumnName("ismaxrisk");

                entity.Property(e => e.Jfactorarea).HasColumnName("jfactorarea");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Probabilitykey).HasColumnName("probabilitykey");

                entity.Property(e => e.Resultcode)
                    .IsRequired()
                    .HasColumnName("resultcode")
                    .HasColumnType("nchar(1)");

                entity.Property(e => e.Resultvalue).HasColumnName("resultvalue");

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblRiskMatrix)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRiskMatrix_tblApplication");
            });

            modelBuilder.Entity<TblRole>(entity =>
            {
                entity.HasKey(e => e.PkRoleid);

                entity.ToTable("tblRole");

                entity.HasIndex(e => e.FkApplicationid);

                entity.HasIndex(e => new { e.FkApplicationid, e.Name })
                    .HasName("UQ_tblRole")
                    .IsUnique();

                entity.Property(e => e.PkRoleid).HasColumnName("pk_roleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(100);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblRole)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRole_tblApplication");
            });

            modelBuilder.Entity<TblRoleRight>(entity =>
            {
                entity.HasKey(e => e.PkRolerightid);

                entity.ToTable("tblRoleRight");

                entity.HasIndex(e => e.FkRightid);

                entity.HasIndex(e => e.FkRoleid);

                entity.HasIndex(e => new { e.FkRoleid, e.FkRightid })
                    .HasName("UQ_tblRoleRight")
                    .IsUnique();

                entity.Property(e => e.PkRolerightid).HasColumnName("pk_rolerightid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRightid).HasColumnName("fk_rightid");

                entity.Property(e => e.FkRoleid).HasColumnName("fk_roleid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRight)
                    .WithMany(p => p.TblRoleRight)
                    .HasForeignKey(d => d.FkRightid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRoleRight_tblRight");

                entity.HasOne(d => d.FkRole)
                    .WithMany(p => p.TblRoleRight)
                    .HasForeignKey(d => d.FkRoleid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblRoleRight_tblRole");
            });

            modelBuilder.Entity<TblSceIcon>(entity =>
            {
                entity.HasKey(e => e.PkSceiconid);

                entity.ToTable("tblSceIcon");

                entity.Property(e => e.PkSceiconid).HasColumnName("pk_sceiconid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sce128).HasColumnName("sce_128");

                entity.Property(e => e.Sce16).HasColumnName("sce_16");

                entity.Property(e => e.Sce32).HasColumnName("sce_32");
            });

            modelBuilder.Entity<TblSchedule>(entity =>
            {
                entity.HasKey(e => e.PkScheduleid);

                entity.ToTable("tblSchedule");

                entity.Property(e => e.PkScheduleid).HasColumnName("pk_scheduleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scheddescription)
                    .IsRequired()
                    .HasColumnName("scheddescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Schedvalue)
                    .HasColumnName("schedvalue")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<TblScheduleAlternative>(entity =>
            {
                entity.HasKey(e => e.PkSchedulealternativeid);

                entity.ToTable("tblScheduleAlternative");

                entity.HasIndex(e => e.FkScheduleid);

                entity.Property(e => e.PkSchedulealternativeid).HasColumnName("pk_schedulealternativeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScheduleid).HasColumnName("fk_scheduleid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Schedulealternativedescription)
                    .IsRequired()
                    .HasColumnName("schedulealternativedescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkSchedule)
                    .WithMany(p => p.TblScheduleAlternative)
                    .HasForeignKey(d => d.FkScheduleid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScheduleAlternative_tblSchedule");
            });

            modelBuilder.Entity<TblScheduleChange>(entity =>
            {
                entity.HasKey(e => e.PkSchedulechangeid);

                entity.ToTable("tblScheduleChange");

                entity.HasIndex(e => e.FkSchedulechangeprojectid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkSchedulechangeid).HasColumnName("pk_schedulechangeid");

                entity.Property(e => e.DkObjectid).HasColumnName("dk_objectid");

                entity.Property(e => e.DkParentobjectid).HasColumnName("dk_parentobjectid");

                entity.Property(e => e.FkSchedulechangeprojectid).HasColumnName("fk_schedulechangeprojectid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkSubprojectid).HasColumnName("fk_subprojectid");

                entity.Property(e => e.Parententitytype).HasColumnName("parententitytype");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnName("value")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkSchedulechangeproject)
                    .WithMany(p => p.TblScheduleChange)
                    .HasForeignKey(d => d.FkSchedulechangeprojectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScheduleChange_tblScheduleChangeProject");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScheduleChange)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("fk_scopeid_tblScope");
            });

            modelBuilder.Entity<TblScheduleChangeProject>(entity =>
            {
                entity.HasKey(e => e.PkSchedulechangeprojectid);

                entity.ToTable("tblScheduleChangeProject");

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkSchedulechangeprojectid).HasColumnName("pk_schedulechangeprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Entitytype).HasColumnName("entitytype");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Propertyname)
                    .IsRequired()
                    .HasColumnName("propertyname")
                    .HasMaxLength(50);

                entity.Property(e => e.Selected).HasColumnName("selected");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblScheduleChangeProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScheduleChangeProject_tblProject");
            });

            modelBuilder.Entity<TblScope>(entity =>
            {
                entity.HasKey(e => e.PkScopeid);

                entity.ToTable("tblScope");

                entity.HasIndex(e => e.FkArchivecodeid);

                entity.HasIndex(e => e.FkAreacodeid);

                entity.HasIndex(e => e.FkBudgetcenterallocationid);

                entity.HasIndex(e => e.FkBudgetcodeid);

                entity.HasIndex(e => e.FkBuildingid);

                entity.HasIndex(e => e.FkCbsid);

                entity.HasIndex(e => e.FkChangetypeid);

                entity.HasIndex(e => e.FkCompiledscopeid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkCostindicationrangeid);

                entity.HasIndex(e => e.FkDecisionitemid);

                entity.HasIndex(e => e.FkDecisionitemuserid);

                entity.HasIndex(e => e.FkEmergentworkapproveruserid);

                entity.HasIndex(e => e.FkEquipmentcodeid);

                entity.HasIndex(e => e.FkFreezeuserid);

                entity.HasIndex(e => e.FkJustificationcomboid);

                entity.HasIndex(e => e.FkMaindisciplineid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkObsid);

                entity.HasIndex(e => e.FkParentscopeid);

                entity.HasIndex(e => e.FkPlantdataid);

                entity.HasIndex(e => e.FkPlantdatamainid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkScopecodeid);

                entity.HasIndex(e => e.FkScopeelevationunitofmeasurementid);

                entity.HasIndex(e => e.FkScopeprioid);

                entity.HasIndex(e => e.FkScoperesponsibleid);

                entity.HasIndex(e => e.FkScopereviewuserid);

                entity.HasIndex(e => e.FkScopestatusid);

                entity.HasIndex(e => e.FkScopetypeid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => e.FkSubprojectid);

                entity.HasIndex(e => e.FkSubsbsid1);

                entity.HasIndex(e => e.FkSubsbsid2);

                entity.HasIndex(e => e.FkSubsbsid3);

                entity.HasIndex(e => e.FkWbsid);

                entity.HasIndex(e => e.FkWpholderuserid);

                entity.HasIndex(e => e.Lastexporttoscheduleit);

                entity.HasIndex(e => e.Oldrsid);

                entity.HasIndex(e => e.Oldsiid);

                entity.HasIndex(e => new { e.FkWpholderuserid, e.PkScopeid, e.Scopenr, e.Scoperequestno, e.Stoppointnr, e.Notificationnr, e.Wono, e.Scopefreezedate, e.FkProjectid, e.Isdeleted, e.Isexecuted, e.Ishold, e.Isparent, e.Iscompiledrequest, e.Visibleinrosersystems })
                    .HasName("IX_tblScope_fk_projectid_isdeleted_isexecuted_ishold_isparent_iscompiledrequest_visibleinrosersystems_with_includes");

                entity.Property(e => e.PkScopeid).HasColumnName("pk_scopeid");

                entity.Property(e => e.Additionalinformation)
                    .HasColumnName("additionalinformation")
                    .HasMaxLength(4000);

                entity.Property(e => e.Archivecodechangeddate)
                    .HasColumnName("archivecodechangeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Archivecodechangeduser)
                    .HasColumnName("archivecodechangeduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Backupavailability).HasColumnName("backupavailability");

                entity.Property(e => e.Batch).HasColumnName("batch");

                entity.Property(e => e.Batterylimit)
                    .HasColumnName("batterylimit")
                    .HasMaxLength(250);

                entity.Property(e => e.Bhrsscoping).HasColumnName("bhrsscoping");

                entity.Property(e => e.Bhrswp).HasColumnName("bhrswp");

                entity.Property(e => e.Budgetcenter)
                    .HasColumnName("budgetcenter")
                    .HasMaxLength(250);

                entity.Property(e => e.Capex).HasColumnName("capex");

                entity.Property(e => e.Cat)
                    .HasColumnName("cat")
                    .HasMaxLength(50);

                entity.Property(e => e.Changedby)
                    .HasColumnName("changedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Changeddate)
                    .HasColumnName("changeddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Changenrcontractor)
                    .HasColumnName("changenrcontractor")
                    .HasMaxLength(20);

                entity.Property(e => e.Civilmemo)
                    .HasColumnName("civilmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Consequences)
                    .HasColumnName("consequences")
                    .HasMaxLength(500);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createdby)
                    .HasColumnName("createdby")
                    .HasMaxLength(250);

                entity.Property(e => e.Createdin).HasColumnName("createdin");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Decisionitemdate)
                    .HasColumnName("decisionitemdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Decisionmakerdate)
                    .HasColumnName("decisionmakerdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Deleteuser)
                    .HasColumnName("deleteuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Durant)
                    .HasColumnName("durant")
                    .HasColumnType("numeric(2, 0)");

                entity.Property(e => e.Electricalmemo)
                    .HasColumnName("electricalmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Emergentworkapprovedate)
                    .HasColumnName("emergentworkapprovedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Emergentworkdecisiontype).HasColumnName("emergentworkdecisiontype");

                entity.Property(e => e.Emergentworkno).HasColumnName("emergentworkno");

                entity.Property(e => e.Emergentworktype).HasColumnName("emergentworktype");

                entity.Property(e => e.Engineeringmemo)
                    .HasColumnName("engineeringmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Environmenteffect).HasColumnName("environmenteffect");

                entity.Property(e => e.Environmentprob).HasColumnName("environmentprob");

                entity.Property(e => e.Environmentresult)
                    .HasColumnName("environmentresult")
                    .HasMaxLength(50);

                entity.Property(e => e.Equipmentbypassed).HasColumnName("equipmentbypassed");

                entity.Property(e => e.Equipmentinservice).HasColumnName("equipmentinservice");

                entity.Property(e => e.Equipmentisolated).HasColumnName("equipmentisolated");

                entity.Property(e => e.Estimatedhours).HasColumnName("estimatedhours");

                entity.Property(e => e.Evalmemo)
                    .HasColumnName("evalmemo")
                    .HasMaxLength(2000);

                entity.Property(e => e.Exportdate)
                    .HasColumnName("exportdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Exportuser)
                    .HasColumnName("exportuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Financialeffect).HasColumnName("financialeffect");

                entity.Property(e => e.Financialprob).HasColumnName("financialprob");

                entity.Property(e => e.Financialresult)
                    .HasColumnName("financialresult")
                    .HasMaxLength(50);

                entity.Property(e => e.Fixedscopememo)
                    .HasColumnName("fixedscopememo")
                    .HasMaxLength(4000);

                entity.Property(e => e.FkArchivecodeid).HasColumnName("fk_archivecodeid");

                entity.Property(e => e.FkAreacodeid).HasColumnName("fk_areacodeid");

                entity.Property(e => e.FkBudgetcenterallocationid).HasColumnName("fk_budgetcenterallocationid");

                entity.Property(e => e.FkBudgetcodeid).HasColumnName("fk_budgetcodeid");

                entity.Property(e => e.FkBuildingid).HasColumnName("fk_buildingid");

                entity.Property(e => e.FkCbsid).HasColumnName("fk_cbsid");

                entity.Property(e => e.FkChangetypeid).HasColumnName("fk_changetypeid");

                entity.Property(e => e.FkCompiledscopeid).HasColumnName("fk_compiledscopeid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkCostindicationrangeid).HasColumnName("fk_costindicationrangeid");

                entity.Property(e => e.FkDecisionitemid).HasColumnName("fk_decisionitemid");

                entity.Property(e => e.FkDecisionitemuserid).HasColumnName("fk_decisionitemuserid");

                entity.Property(e => e.FkEmergentworkapproveruserid).HasColumnName("fk_emergentworkapproveruserid");

                entity.Property(e => e.FkEquipmentcodeid).HasColumnName("fk_equipmentcodeid");

                entity.Property(e => e.FkFreezeuserid).HasColumnName("fk_freezeuserid");

                entity.Property(e => e.FkJustificationcomboid).HasColumnName("fk_justificationcomboid");

                entity.Property(e => e.FkMaindisciplineid).HasColumnName("fk_maindisciplineid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkObsid).HasColumnName("fk_obsid");

                entity.Property(e => e.FkParentscopeid).HasColumnName("fk_parentscopeid");

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkPlantdatamainid).HasColumnName("fk_plantdatamainid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkScopecodeid).HasColumnName("fk_scopecodeid");

                entity.Property(e => e.FkScopeelevationunitofmeasurementid).HasColumnName("fk_scopeelevationunitofmeasurementid");

                entity.Property(e => e.FkScopeprioid).HasColumnName("fk_scopeprioid");

                entity.Property(e => e.FkScoperesponsibleid).HasColumnName("fk_scoperesponsibleid");

                entity.Property(e => e.FkScopereviewuserid).HasColumnName("fk_scopereviewuserid");

                entity.Property(e => e.FkScopestatusid).HasColumnName("fk_scopestatusid");

                entity.Property(e => e.FkScopetypeid).HasColumnName("fk_scopetypeid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkSubprojectid).HasColumnName("fk_subprojectid");

                entity.Property(e => e.FkSubsbsid1).HasColumnName("fk_subsbsid1");

                entity.Property(e => e.FkSubsbsid2).HasColumnName("fk_subsbsid2");

                entity.Property(e => e.FkSubsbsid3).HasColumnName("fk_subsbsid3");

                entity.Property(e => e.FkWbsid).HasColumnName("fk_wbsid");

                entity.Property(e => e.FkWpholderuserid).HasColumnName("fk_wpholderuserid");

                entity.Property(e => e.Ganttscopestartdate)
                    .HasColumnName("ganttscopestartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Gatekeepermemo)
                    .HasColumnName("gatekeepermemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Gatekeeperready)
                    .HasColumnName("gatekeeperready")
                    .HasColumnType("datetime");

                entity.Property(e => e.Guestimatedcost)
                    .HasColumnName("guestimatedcost")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Guid)
                    .HasColumnName("guid")
                    .HasMaxLength(38);

                entity.Property(e => e.Historymemo)
                    .HasColumnName("historymemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Ho1date)
                    .HasColumnName("ho1date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ho1user)
                    .HasColumnName("ho1user")
                    .HasMaxLength(100);

                entity.Property(e => e.Ho2date)
                    .HasColumnName("ho2date")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ho2user)
                    .HasColumnName("ho2user")
                    .HasMaxLength(100);

                entity.Property(e => e.Importfiletype)
                    .HasColumnName("importfiletype")
                    .HasMaxLength(25);

                entity.Property(e => e.Importguid)
                    .HasColumnName("importguid")
                    .HasMaxLength(50);

                entity.Property(e => e.Importguidscopeit)
                    .HasColumnName("importguidscopeit")
                    .HasMaxLength(50);

                entity.Property(e => e.Inspectionmemo)
                    .HasColumnName("inspectionmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Instrumentationmemo)
                    .HasColumnName("instrumentationmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Iscompiledrequest).HasColumnName("iscompiledrequest");

                entity.Property(e => e.Isdeleted)
                    .HasColumnName("isdeleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isexecuted)
                    .HasColumnName("isexecuted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ishold)
                    .HasColumnName("ishold")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ismaxriskscope).HasColumnName("ismaxriskscope");

                entity.Property(e => e.Isparent).HasColumnName("isparent");

                entity.Property(e => e.Isscopechange)
                    .HasColumnName("isscopechange")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jfactorconsequencecostafter).HasColumnName("jfactorconsequencecostafter");

                entity.Property(e => e.Jfactorconsequencecostbefore).HasColumnName("jfactorconsequencecostbefore");

                entity.Property(e => e.Jfactormitigatedprob)
                    .HasColumnName("jfactormitigatedprob")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Jfactorunmitigatedprob)
                    .HasColumnName("jfactorunmitigatedprob")
                    .HasColumnType("decimal(6, 4)");

                entity.Property(e => e.Jobheader)
                    .HasColumnName("jobheader")
                    .HasMaxLength(100);

                entity.Property(e => e.Justification1).HasColumnName("justification1");

                entity.Property(e => e.Justification2).HasColumnName("justification2");

                entity.Property(e => e.Justification3).HasColumnName("justification3");

                entity.Property(e => e.Justification4).HasColumnName("justification4");

                entity.Property(e => e.Justification5).HasColumnName("justification5");

                entity.Property(e => e.Justification6).HasColumnName("justification6");

                entity.Property(e => e.Justification7).HasColumnName("justification7");

                entity.Property(e => e.Justification8).HasColumnName("justification8");

                entity.Property(e => e.Justificationdescription)
                    .HasColumnName("justificationdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Lastexporttoscheduleit)
                    .HasColumnName("lastexporttoscheduleit")
                    .HasColumnType("datetime");

                entity.Property(e => e.Mainplant)
                    .HasColumnName("mainplant")
                    .HasMaxLength(30);

                entity.Property(e => e.Maintenancememo)
                    .HasColumnName("maintenancememo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Maintenanceplan)
                    .HasColumnName("maintenanceplan")
                    .HasMaxLength(250);

                entity.Property(e => e.Mainworkcenter)
                    .HasColumnName("mainworkcenter")
                    .HasMaxLength(250);

                entity.Property(e => e.Managementnotes)
                    .HasColumnName("managementnotes")
                    .HasMaxLength(500);

                entity.Property(e => e.Materialsmemo)
                    .HasColumnName("materialsmemo")
                    .HasMaxLength(500);

                entity.Property(e => e.Merged).HasColumnName("merged");

                entity.Property(e => e.Mitigatedriskeffect).HasColumnName("mitigatedriskeffect");

                entity.Property(e => e.Mitigatedriskprob).HasColumnName("mitigatedriskprob");

                entity.Property(e => e.Mitigatedriskresult)
                    .HasColumnName("mitigatedriskresult")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Mr)
                    .HasColumnName("mr")
                    .HasMaxLength(50);

                entity.Property(e => e.Notificationnr)
                    .HasColumnName("notificationnr")
                    .HasMaxLength(250);

                entity.Property(e => e.Notificationtype)
                    .HasColumnName("notificationtype")
                    .HasMaxLength(250);

                entity.Property(e => e.Oldrsid).HasColumnName("oldrsid");

                entity.Property(e => e.Oldsiid).HasColumnName("oldsiid");

                entity.Property(e => e.Operationalmemo)
                    .HasColumnName("operationalmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Opex).HasColumnName("opex");

                entity.Property(e => e.Optionalbudget).HasColumnName("optionalbudget");

                entity.Property(e => e.Optionalhours).HasColumnName("optionalhours");

                entity.Property(e => e.Optionalscopememo)
                    .HasColumnName("optionalscopememo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Ordertype)
                    .HasColumnName("ordertype")
                    .HasMaxLength(20);

                entity.Property(e => e.Originalplannedfinish)
                    .HasColumnName("originalplannedfinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Originalplannedstart)
                    .HasColumnName("originalplannedstart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phasedescr)
                    .HasColumnName("phasedescr")
                    .HasMaxLength(250);

                entity.Property(e => e.Phasenr)
                    .HasColumnName("phasenr")
                    .HasMaxLength(250);

                entity.Property(e => e.Plannergroup)
                    .HasColumnName("plannergroup")
                    .HasMaxLength(20);

                entity.Property(e => e.Planningplant)
                    .HasColumnName("planningplant")
                    .HasMaxLength(30);

                entity.Property(e => e.Polutionmemo)
                    .HasColumnName("polutionmemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Ponr)
                    .HasColumnName("ponr")
                    .HasMaxLength(250);

                entity.Property(e => e.Processtechnologymemo)
                    .HasColumnName("processtechnologymemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Proposedplannedfinish)
                    .HasColumnName("proposedplannedfinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Proposedplannedstart)
                    .HasColumnName("proposedplannedstart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Qualityeffect).HasColumnName("qualityeffect");

                entity.Property(e => e.Qualityprob).HasColumnName("qualityprob");

                entity.Property(e => e.Qualityresult)
                    .HasColumnName("qualityresult")
                    .HasMaxLength(50);

                entity.Property(e => e.Ram)
                    .HasColumnName("ram")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Remarkrequestor)
                    .HasColumnName("remarkrequestor")
                    .HasMaxLength(4000);

                entity.Property(e => e.Reputationeffect).HasColumnName("reputationeffect");

                entity.Property(e => e.Reputationprob).HasColumnName("reputationprob");

                entity.Property(e => e.Reputationresult)
                    .HasColumnName("reputationresult")
                    .HasMaxLength(50);

                entity.Property(e => e.Reqexedate)
                    .HasColumnName("reqexedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Requestnr).HasColumnName("requestnr");

                entity.Property(e => e.Requestor)
                    .HasColumnName("requestor")
                    .HasMaxLength(100);

                entity.Property(e => e.Requestormemo)
                    .HasColumnName("requestormemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Responsible)
                    .HasColumnName("responsible")
                    .HasMaxLength(250);

                entity.Property(e => e.Reviewed)
                    .HasColumnName("reviewed")
                    .HasMaxLength(4000);

                entity.Property(e => e.Reviewedbutget).HasColumnName("reviewedbutget");

                entity.Property(e => e.Reviewedhours).HasColumnName("reviewedhours");

                entity.Property(e => e.Revisioncode)
                    .HasColumnName("revisioncode")
                    .HasMaxLength(50);

                entity.Property(e => e.Rfr).HasColumnName("rfr");

                entity.Property(e => e.Rfrdate)
                    .HasColumnName("rfrdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Riskreviewedby)
                    .HasColumnName("riskreviewedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Riskrevieweddate)
                    .HasColumnName("riskrevieweddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rosersystemsrequestdate)
                    .HasColumnName("rosersystemsrequestdate")
                    .HasMaxLength(250);

                entity.Property(e => e.Rowtype)
                    .HasColumnName("rowtype")
                    .HasMaxLength(2);

                entity.Property(e => e.Rrr)
                    .HasColumnName("rrr")
                    .HasColumnType("numeric(3, 0)");

                entity.Property(e => e.Safetyeffect).HasColumnName("safetyeffect");

                entity.Property(e => e.Safetyprob).HasColumnName("safetyprob");

                entity.Property(e => e.Safetyresult)
                    .HasColumnName("safetyresult")
                    .HasMaxLength(50);

                entity.Property(e => e.Savings).HasColumnName("savings");

                entity.Property(e => e.Schedulermemo)
                    .HasColumnName("schedulermemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Scopeelevation)
                    .HasColumnName("scopeelevation")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Scopefreezedate)
                    .HasColumnName("scopefreezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopefreezememo)
                    .HasColumnName("scopefreezememo")
                    .HasMaxLength(500);

                entity.Property(e => e.Scopeitrequestdate)
                    .HasColumnName("scopeitrequestdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopelocation)
                    .HasColumnName("scopelocation")
                    .HasMaxLength(500);

                entity.Property(e => e.Scopenr).HasColumnName("scopenr");

                entity.Property(e => e.Scopeprogressbar).HasColumnName("scopeprogressbar");

                entity.Property(e => e.Scopereleasedate)
                    .HasColumnName("scopereleasedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scoperequestno).HasColumnName("scoperequestno");

                entity.Property(e => e.Scopestatusdate)
                    .HasColumnName("scopestatusdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Shememo)
                    .HasColumnName("shememo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Stoppointdescr)
                    .IsRequired()
                    .HasColumnName("stoppointdescr")
                    .HasMaxLength(250);

                entity.Property(e => e.Stoppointnr)
                    .HasColumnName("stoppointnr")
                    .HasMaxLength(250);

                entity.Property(e => e.Systemstatus)
                    .HasColumnName("systemstatus")
                    .HasMaxLength(50);

                entity.Property(e => e.Thirdparty)
                    .HasColumnName("thirdparty")
                    .HasMaxLength(250);

                entity.Property(e => e.Unmitigatedrisk)
                    .HasColumnName("unmitigatedrisk")
                    .HasMaxLength(50);

                entity.Property(e => e.Ur)
                    .HasColumnName("ur")
                    .HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnName("username")
                    .HasMaxLength(50);

                entity.Property(e => e.Userstatus)
                    .HasColumnName("userstatus")
                    .HasMaxLength(20);

                entity.Property(e => e.Visibleinrosersystems).HasColumnName("visibleinrosersystems");

                entity.Property(e => e.Wbsheader)
                    .HasColumnName("wbsheader")
                    .HasMaxLength(50);

                entity.Property(e => e.Wono)
                    .HasColumnName("wono")
                    .HasMaxLength(250);

                entity.Property(e => e.Workpreparationfreezedate)
                    .HasColumnName("workpreparationfreezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Wpholdermemo)
                    .HasColumnName("wpholdermemo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Wregnr)
                    .HasColumnName("wregnr")
                    .HasMaxLength(250);

                entity.Property(e => e.Wtypenr)
                    .HasColumnName("wtypenr")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkArchivecode)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkArchivecodeid)
                    .HasConstraintName("FK_tblScope_tblArchiveCode");

                entity.HasOne(d => d.FkAreacode)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkAreacodeid)
                    .HasConstraintName("FK_tblScope_tblAreaCode");

                entity.HasOne(d => d.FkBudgetcenterallocation)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkBudgetcenterallocationid)
                    .HasConstraintName("FK_tblScope_tblBudgetCenterAllocation");

                entity.HasOne(d => d.FkBudgetcode)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkBudgetcodeid)
                    .HasConstraintName("FK_tblScope_tblBudgetCode");

                entity.HasOne(d => d.FkBuilding)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkBuildingid)
                    .HasConstraintName("FK_tblScope_tblBuilding");

                entity.HasOne(d => d.FkCbs)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkCbsid)
                    .HasConstraintName("FK_tblScope_tblCbs");

                entity.HasOne(d => d.FkCompiledscope)
                    .WithMany(p => p.InverseFkCompiledscope)
                    .HasForeignKey(d => d.FkCompiledscopeid)
                    .HasConstraintName("FK_tblScope_tblScope_CompiledScope");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblScope_tblContractor");

                entity.HasOne(d => d.FkCostindicationrange)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkCostindicationrangeid)
                    .HasConstraintName("FK_tblScope_tblCostIndicationRange");

                entity.HasOne(d => d.FkDecisionitem)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkDecisionitemid)
                    .HasConstraintName("FK_tblScope_tblDecisionItem");

                entity.HasOne(d => d.FkDecisionitemuser)
                    .WithMany(p => p.TblScopeFkDecisionitemuser)
                    .HasForeignKey(d => d.FkDecisionitemuserid)
                    .HasConstraintName("FK_tblScope_tblUser_DecisionItemUser");

                entity.HasOne(d => d.FkEmergentworkapproveruser)
                    .WithMany(p => p.TblScopeFkEmergentworkapproveruser)
                    .HasForeignKey(d => d.FkEmergentworkapproveruserid)
                    .HasConstraintName("FK_tblScope_tblUser_EmergentWorkApprover");

                entity.HasOne(d => d.FkEquipmentcode)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkEquipmentcodeid)
                    .HasConstraintName("FK_tblScope_tblEquipmentCode");

                entity.HasOne(d => d.FkFreezeuser)
                    .WithMany(p => p.TblScopeFkFreezeuser)
                    .HasForeignKey(d => d.FkFreezeuserid)
                    .HasConstraintName("FK_tblScope_tblUser_FreezeUser");

                entity.HasOne(d => d.FkJustificationcombo)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkJustificationcomboid)
                    .HasConstraintName("FK_tblScope_tblJustificationCombo");

                entity.HasOne(d => d.FkMaindiscipline)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkMaindisciplineid)
                    .HasConstraintName("FK_tblScope_tblMainDiscipline");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .HasConstraintName("FK_tblScope_tblMainPhase");

                entity.HasOne(d => d.FkObs)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkObsid)
                    .HasConstraintName("FK_tblScope_tblObs");

                entity.HasOne(d => d.FkParentscope)
                    .WithMany(p => p.InverseFkParentscope)
                    .HasForeignKey(d => d.FkParentscopeid)
                    .HasConstraintName("FK_tblScope_tblScope");

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblScopeFkPlantdata)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScope_tblPlantData");

                entity.HasOne(d => d.FkPlantdatamain)
                    .WithMany(p => p.TblScopeFkPlantdatamain)
                    .HasForeignKey(d => d.FkPlantdatamainid)
                    .HasConstraintName("FK_tblScope_tblPlantData_PlantDataMain");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScope_tblProject");

                entity.HasOne(d => d.FkScopecode)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkScopecodeid)
                    .HasConstraintName("FK_tblScope_tblScopeCode");

                entity.HasOne(d => d.FkScopeelevationunitofmeasurement)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkScopeelevationunitofmeasurementid)
                    .HasConstraintName("FK_tblScope_tblUnitOfMeasurement1");

                entity.HasOne(d => d.FkScopeprio)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkScopeprioid)
                    .HasConstraintName("FK_tblScope_tblScopePrio");

                entity.HasOne(d => d.FkScoperesponsible)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkScoperesponsibleid)
                    .HasConstraintName("FK_tblScope_tblScopeResponsible");

                entity.HasOne(d => d.FkScopereviewuser)
                    .WithMany(p => p.TblScopeFkScopereviewuser)
                    .HasForeignKey(d => d.FkScopereviewuserid)
                    .HasConstraintName("FK_tblScope_tblUser_ScopeReviewUser");

                entity.HasOne(d => d.FkScopestatus)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkScopestatusid)
                    .HasConstraintName("FK_tblScope_tblScopeStatus");

                entity.HasOne(d => d.FkScopetype)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkScopetypeid)
                    .HasConstraintName("FK_tblScope_tblScopeType");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScope_tblShortcode");

                entity.HasOne(d => d.FkSubproject)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkSubprojectid)
                    .HasConstraintName("FK_tblScope_tblSubProject");

                entity.HasOne(d => d.FkSubsbsid1Navigation)
                    .WithMany(p => p.TblScopeFkSubsbsid1Navigation)
                    .HasForeignKey(d => d.FkSubsbsid1)
                    .HasConstraintName("FK_tblScope_tblSubSBS_SubSbs1");

                entity.HasOne(d => d.FkSubsbsid2Navigation)
                    .WithMany(p => p.TblScopeFkSubsbsid2Navigation)
                    .HasForeignKey(d => d.FkSubsbsid2)
                    .HasConstraintName("FK_tblScope_tblSubSBS_SubSbs2");

                entity.HasOne(d => d.FkSubsbsid3Navigation)
                    .WithMany(p => p.TblScopeFkSubsbsid3Navigation)
                    .HasForeignKey(d => d.FkSubsbsid3)
                    .HasConstraintName("FK_tblScope_tblSubSBS_SubSbs3");

                entity.HasOne(d => d.FkWbs)
                    .WithMany(p => p.TblScope)
                    .HasForeignKey(d => d.FkWbsid)
                    .HasConstraintName("FK_tblScope_tblWbs");

                entity.HasOne(d => d.FkWpholderuser)
                    .WithMany(p => p.TblScopeFkWpholderuser)
                    .HasForeignKey(d => d.FkWpholderuserid)
                    .HasConstraintName("FK_tblScope_tblUser_WpHolder");
            });

            modelBuilder.Entity<TblScopeCategory>(entity =>
            {
                entity.HasKey(e => e.PkScopecategoryid);

                entity.ToTable("tblScopeCategory");

                entity.Property(e => e.PkScopecategoryid).HasColumnName("pk_scopecategoryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.ScopecategorydescriptionL1)
                    .IsRequired()
                    .HasColumnName("scopecategorydescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecategorydescriptionL2)
                    .HasColumnName("scopecategorydescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecategorydescriptionL3)
                    .HasColumnName("scopecategorydescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecategorydescriptionL4)
                    .HasColumnName("scopecategorydescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecategorydescriptionL5)
                    .HasColumnName("scopecategorydescription_l5")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblScopeChangeEffect>(entity =>
            {
                entity.HasKey(e => e.PkScopechangeeffectid);

                entity.ToTable("tblScopeChangeEffect");

                entity.HasIndex(e => e.FkChangeeffectid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopechangeeffectid).HasColumnName("pk_scopechangeeffectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangeeffectid).HasColumnName("fk_changeeffectid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeChangeEffect)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeChangeEffect_tblScope");
            });

            modelBuilder.Entity<TblScopeChangeReason>(entity =>
            {
                entity.HasKey(e => e.PkScopechangereasonid);

                entity.ToTable("tblScopeChangeReason");

                entity.HasIndex(e => e.FkChangereasonid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkChangereasonid })
                    .HasName("IX_tblScopeChangeReason_U1")
                    .IsUnique();

                entity.Property(e => e.PkScopechangereasonid).HasColumnName("pk_scopechangereasonid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChangereasonid).HasColumnName("fk_changereasonid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeChangeReason)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeChangeReason_tblScope");
            });

            modelBuilder.Entity<TblScopeChecklist>(entity =>
            {
                entity.HasKey(e => e.PkScopechecklistid);

                entity.ToTable("tblScopeChecklist");

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkNeededuserid);

                entity.HasIndex(e => e.FkReceiveduserid)
                    .HasName("IX_tblScopeChecklist_fk_userid");

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopechecklistid).HasColumnName("pk_scopechecklistid");

                entity.Property(e => e.Checkliststate).HasColumnName("checkliststate");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkNeededuserid).HasColumnName("fk_neededuserid");

                entity.Property(e => e.FkReceiveduserid).HasColumnName("fk_receiveduserid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Neededdate)
                    .HasColumnName("neededdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblScopeChecklist)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeChecklist_tblChecklist");

                entity.HasOne(d => d.FkNeededuser)
                    .WithMany(p => p.TblScopeChecklistFkNeededuser)
                    .HasForeignKey(d => d.FkNeededuserid)
                    .HasConstraintName("FK_tblScopeChecklist_tblUser_NeededUser");

                entity.HasOne(d => d.FkReceiveduser)
                    .WithMany(p => p.TblScopeChecklistFkReceiveduser)
                    .HasForeignKey(d => d.FkReceiveduserid)
                    .HasConstraintName("FK_tblScopeChecklist_tblUser_ReceivedUser");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeChecklist)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeChecklist_tblScope");
            });

            modelBuilder.Entity<TblScopeCode>(entity =>
            {
                entity.HasKey(e => e.PkScopecodeid);

                entity.ToTable("tblScopeCode");

                entity.HasIndex(e => e.Scopecode)
                    .HasName("IX_tblScopeCode_scopecode")
                    .IsUnique();

                entity.Property(e => e.PkScopecodeid).HasColumnName("pk_scopecodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopecode)
                    .IsRequired()
                    .HasColumnName("scopecode")
                    .HasMaxLength(10);

                entity.Property(e => e.ScopecodedescriptionL1)
                    .IsRequired()
                    .HasColumnName("scopecodedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecodedescriptionL2)
                    .HasColumnName("scopecodedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecodedescriptionL3)
                    .HasColumnName("scopecodedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecodedescriptionL4)
                    .HasColumnName("scopecodedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopecodedescriptionL5)
                    .HasColumnName("scopecodedescription_l5")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblScopeCustom>(entity =>
            {
                entity.HasKey(e => e.PkScopecustomid);

                entity.ToTable("tblScopeCustom");

                entity.HasIndex(e => e.Scopecustomdescription)
                    .HasName("IX_tblScopeCustom")
                    .IsUnique();

                entity.Property(e => e.PkScopecustomid).HasColumnName("pk_scopecustomid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopecustomdescription)
                    .IsRequired()
                    .HasColumnName("scopecustomdescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblScopeDecisionMaker>(entity =>
            {
                entity.HasKey(e => e.PkScopedecisionmakerid);

                entity.ToTable("tblScopeDecisionMaker");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkScopedecisionmakerid).HasColumnName("pk_scopedecisionmakerid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeDecisionMaker)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblScopeDecisionMaker_tblScope");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblScopeDecisionMaker)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDecisionMaker_tblUser1");
            });

            modelBuilder.Entity<TblScopeDepartment>(entity =>
            {
                entity.HasKey(e => e.PkScopedepartmentid);

                entity.ToTable("tblScopeDepartment");

                entity.HasIndex(e => e.FkDepartmentid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopedepartmentid).HasColumnName("pk_scopedepartmentid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Finisheddate)
                    .HasColumnName("finisheddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Finisheduser)
                    .HasColumnName("finisheduser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDepartmentid).HasColumnName("fk_departmentid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDepartment)
                    .WithMany(p => p.TblScopeDepartment)
                    .HasForeignKey(d => d.FkDepartmentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDepartment_tbldepartment");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeDepartment)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDepartment_tblScope");
            });

            modelBuilder.Entity<TblScopeDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkScopedocumentlabelid);

                entity.ToTable("tblScopeDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkDocumentlabelid })
                    .HasName("UK_tblScopeDocumentLabel_ScopeID_DocumentLabelID")
                    .IsUnique();

                entity.Property(e => e.PkScopedocumentlabelid).HasColumnName("pk_scopedocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblScopeDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeDocumentLabel)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDocumentLabel_tblScope");
            });

            modelBuilder.Entity<TblScopeHazard>(entity =>
            {
                entity.HasKey(e => e.PkScopehazardid);

                entity.ToTable("tblScopeHazard");

                entity.HasIndex(e => e.FkHazardid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopehazardid).HasColumnName("pk_scopehazardid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHazardid).HasColumnName("fk_hazardid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkHazard)
                    .WithMany(p => p.TblScopeHazard)
                    .HasForeignKey(d => d.FkHazardid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeHazard_tblHazard");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeHazard)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeHazard_tblScope");
            });

            modelBuilder.Entity<TblScopeHoGroupSub>(entity =>
            {
                entity.HasKey(e => e.PkScopehogroupsubid);

                entity.ToTable("tblScopeHoGroupSub");

                entity.HasIndex(e => e.FkHogroupsubid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkHogroupsubid })
                    .HasName("IX_tblScopeHoGroupSub_U1")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeHoGroupSub_Scope_Modifydate");

                entity.Property(e => e.PkScopehogroupsubid).HasColumnName("pk_scopehogroupsubid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHogroupsubid).HasColumnName("fk_hogroupsubid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkHogroupsub)
                    .WithMany(p => p.TblScopeHoGroupSub)
                    .HasForeignKey(d => d.FkHogroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeHoGroupSub_tblHandoverGroupSub");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeHoGroupSub)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeHoGroupSub_tblScope");
            });

            modelBuilder.Entity<TblScopeInput>(entity =>
            {
                entity.HasKey(e => e.PkScopeinputid);

                entity.ToTable("tblScopeInput");

                entity.HasIndex(e => e.FkScopedepartmentid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.PkScopeinputid)
                    .HasName("UC_tblScopeInput")
                    .IsUnique();

                entity.Property(e => e.PkScopeinputid).HasColumnName("pk_scopeinputid");

                entity.Property(e => e.Acceptancedate)
                    .HasColumnName("acceptancedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Acceptanceuser)
                    .HasColumnName("acceptanceuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Acceptstate).HasColumnName("acceptstate");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopedepartmentid).HasColumnName("fk_scopedepartmentid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Input).HasColumnName("input");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark).HasColumnName("remark");

                entity.HasOne(d => d.FkScopedepartment)
                    .WithMany(p => p.TblScopeInput)
                    .HasForeignKey(d => d.FkScopedepartmentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeInput_tblScopeDepartment");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblScopeInput)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeInput_tblUser");
            });

            modelBuilder.Entity<TblScopeJob>(entity =>
            {
                entity.HasKey(e => e.PkScopejobid);

                entity.ToTable("tblScopeJob");

                entity.HasIndex(e => e.FkJobdataid);

                entity.HasIndex(e => e.FkLibraryjobid);

                entity.HasIndex(e => e.FkLibraryscopetemplatejobid)
                    .HasName("IX_tblScopeJob_fk_librarscopetemplatejobid");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkWorkpermitid);

                entity.HasIndex(e => e.Scopejobcode);

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeJob_Scope_Modifydate");

                entity.HasIndex(e => new { e.FkScopeid, e.Scopejobcode })
                    .HasName("UK_tblScopeJob")
                    .IsUnique();

                entity.HasIndex(e => new { e.PkScopejobid, e.FkScopeid, e.Scopejobcode, e.Isenabled })
                    .HasName("IX_tblScopeJob_isenabled_with_includes");

                entity.Property(e => e.PkScopejobid).HasColumnName("pk_scopejobid");

                entity.Property(e => e.Copyprojectinfo)
                    .HasColumnName("copyprojectinfo")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobdataid).HasColumnName("fk_jobdataid");

                entity.Property(e => e.FkLibraryjobid).HasColumnName("fk_libraryjobid");

                entity.Property(e => e.FkLibraryscopetemplatejobid).HasColumnName("fk_libraryscopetemplatejobid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkWorkpermitid).HasColumnName("fk_workpermitid");

                entity.Property(e => e.Isenabled).HasColumnName("isenabled");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisionaccepteddate)
                    .HasColumnName("revisionaccepteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Schedulestatus).HasColumnName("schedulestatus");

                entity.Property(e => e.Schedulestatusdescription).HasColumnName("schedulestatusdescription");

                entity.Property(e => e.Scopejobcode)
                    .IsRequired()
                    .HasColumnName("scopejobcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Scopejobconstraintdate1)
                    .HasColumnName("scopejobconstraintdate1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobconstraintdate2)
                    .HasColumnName("scopejobconstraintdate2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobconstrainttype).HasColumnName("scopejobconstrainttype");

                entity.Property(e => e.Scopejobgroup)
                    .HasColumnName("scopejobgroup")
                    .HasMaxLength(10);

                entity.Property(e => e.Scopejobignoreconstraint).HasColumnName("scopejobignoreconstraint");

                entity.Property(e => e.Scopejobmemo).HasColumnName("scopejobmemo");

                entity.Property(e => e.Scopejobplannedduration)
                    .HasColumnName("scopejobplannedduration")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Scopejobplanupdate)
                    .HasColumnName("scopejobplanupdate")
                    .HasMaxLength(100);

                entity.Property(e => e.Scopejobsortorder).HasColumnName("scopejobsortorder");

                entity.HasOne(d => d.FkJobdata)
                    .WithMany(p => p.TblScopeJob)
                    .HasForeignKey(d => d.FkJobdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJob_tblJobData");

                entity.HasOne(d => d.FkLibraryjob)
                    .WithMany(p => p.TblScopeJob)
                    .HasForeignKey(d => d.FkLibraryjobid)
                    .HasConstraintName("FK_tblScopeJob_tblLibraryJob");

                entity.HasOne(d => d.FkLibraryscopetemplatejob)
                    .WithMany(p => p.TblScopeJob)
                    .HasForeignKey(d => d.FkLibraryscopetemplatejobid)
                    .HasConstraintName("FK_tblScopeJob_tblLibraryScopeTemplateJob");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeJob)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJob_tblScope");

                entity.HasOne(d => d.FkWorkpermit)
                    .WithMany(p => p.TblScopeJob)
                    .HasForeignKey(d => d.FkWorkpermitid)
                    .HasConstraintName("FK_tblScopeJob_tblWorkPermit");
            });

            modelBuilder.Entity<TblScopeJobCustomColumn>(entity =>
            {
                entity.HasKey(e => e.PkScopejobcustomcolumnid);

                entity.ToTable("tblScopeJobCustomColumn");

                entity.HasIndex(e => e.FkCustomcolumnid);

                entity.HasIndex(e => e.FkScopejobid);

                entity.HasIndex(e => new { e.FkScopejobid, e.FkCustomcolumnid })
                    .HasName("UK_tblScopeJobCustomColumn")
                    .IsUnique();

                entity.Property(e => e.PkScopejobcustomcolumnid).HasColumnName("pk_scopejobcustomcolumnid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCustomcolumnid).HasColumnName("fk_customcolumnid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopejobcustomcolumnvalue).HasColumnName("scopejobcustomcolumnvalue");

                entity.HasOne(d => d.FkCustomcolumn)
                    .WithMany(p => p.TblScopeJobCustomColumn)
                    .HasForeignKey(d => d.FkCustomcolumnid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobCustomColumn_tblCustomColumn");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblScopeJobCustomColumn)
                    .HasForeignKey(d => d.FkScopejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobCustomColumn_tblScopeJob");
            });

            modelBuilder.Entity<TblScopeJobDetail>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailid);

                entity.ToTable("tblScopeJobDetail");

                entity.HasIndex(e => e.FkJobdetaildataid);

                entity.HasIndex(e => e.FkJobdetailid);

                entity.HasIndex(e => e.FkScopejobid);

                entity.Property(e => e.PkScopejobdetailid).HasColumnName("pk_scopejobdetailid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkJobdetaildataid).HasColumnName("fk_jobdetaildataid");

                entity.Property(e => e.FkJobdetailid).HasColumnName("fk_jobdetailid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopejobdetailsortorder).HasColumnName("scopejobdetailsortorder");

                entity.HasOne(d => d.FkJobdetaildata)
                    .WithMany(p => p.TblScopeJobDetail)
                    .HasForeignKey(d => d.FkJobdetaildataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetail_tblJobDetailData");

                entity.HasOne(d => d.FkJobdetail)
                    .WithMany(p => p.TblScopeJobDetail)
                    .HasForeignKey(d => d.FkJobdetailid)
                    .HasConstraintName("FK_tblScopeJobDetail_tblJobDetail");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblScopeJobDetail)
                    .HasForeignKey(d => d.FkScopejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetail_tblScopeJob");
            });

            modelBuilder.Entity<TblScopeJobDetailResource>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourceid);

                entity.ToTable("tblScopeJobDetailResource");

                entity.HasIndex(e => e.FkCostcenterid);

                entity.HasIndex(e => e.FkJobdetailresourcedataid);

                entity.HasIndex(e => e.FkJobdetailresourceid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => e.FkScopejobdetailid);

                entity.HasIndex(e => new { e.FkScopejobdetailid, e.FkResourceid })
                    .HasName("UK_tblScopeJobDetailResource")
                    .IsUnique();

                entity.HasIndex(e => new { e.PkScopejobdetailresourceid, e.FkScopejobdetailid, e.FkResourceid, e.Resourceprogress, e.Resourcelocation })
                    .HasName("IX_tblScopeJobDetailResource_resourcelocation_with_includes");

                entity.Property(e => e.PkScopejobdetailresourceid).HasColumnName("pk_scopejobdetailresourceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCostcenterid).HasColumnName("fk_costcenterid");

                entity.Property(e => e.FkJobdetailresourcedataid).HasColumnName("fk_jobdetailresourcedataid");

                entity.Property(e => e.FkJobdetailresourceid).HasColumnName("fk_jobdetailresourceid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.FkScopejobdetailid).HasColumnName("fk_scopejobdetailid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourceactualfinishdate)
                    .HasColumnName("resourceactualfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Resourceactualstartdate)
                    .HasColumnName("resourceactualstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Resourceisautoapprove).HasColumnName("resourceisautoapprove");

                entity.Property(e => e.Resourceismanualactualtimeoverride).HasColumnName("resourceismanualactualtimeoverride");

                entity.Property(e => e.Resourceisready).HasColumnName("resourceisready");

                entity.Property(e => e.Resourcelocation)
                    .IsRequired()
                    .HasColumnName("resourcelocation")
                    .HasMaxLength(25);

                entity.Property(e => e.Resourceprogress).HasColumnName("resourceprogress");

                entity.Property(e => e.Resourceprogressmode)
                    .HasColumnName("resourceprogressmode")
                    .HasMaxLength(1);

                entity.Property(e => e.Resourceprogressticketcode)
                    .HasColumnName("resourceprogressticketcode")
                    .HasMaxLength(14);

                entity.Property(e => e.Resourceprogressusername)
                    .HasColumnName("resourceprogressusername")
                    .HasMaxLength(100);

                entity.Property(e => e.Resourceqcticketcode)
                    .HasColumnName("resourceqcticketcode")
                    .HasMaxLength(14);

                entity.Property(e => e.Resourceqcticketcodeold)
                    .HasColumnName("resourceqcticketcodeold")
                    .HasMaxLength(14);

                entity.Property(e => e.Scopejobdetailresourcesortorder).HasColumnName("scopejobdetailresourcesortorder");

                entity.HasOne(d => d.FkCostcenter)
                    .WithMany(p => p.TblScopeJobDetailResource)
                    .HasForeignKey(d => d.FkCostcenterid)
                    .HasConstraintName("FK_tblScopeJobDetailResource_tblCostCenter");

                entity.HasOne(d => d.FkJobdetailresourcedata)
                    .WithMany(p => p.TblScopeJobDetailResource)
                    .HasForeignKey(d => d.FkJobdetailresourcedataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResource_tblJobDetailResourceData");

                entity.HasOne(d => d.FkJobdetailresource)
                    .WithMany(p => p.TblScopeJobDetailResource)
                    .HasForeignKey(d => d.FkJobdetailresourceid)
                    .HasConstraintName("FK_tblScopeJobDetailResource_tblJobDetailResource");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblScopeJobDetailResource)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResource_tblResource");

                entity.HasOne(d => d.FkScopejobdetail)
                    .WithMany(p => p.TblScopeJobDetailResource)
                    .HasForeignKey(d => d.FkScopejobdetailid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResource_tblScopeJobDetail");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceCircumstance>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourcecircumstanceid);

                entity.ToTable("tblScopeJobDetailResourceCircumstance");

                entity.HasIndex(e => e.FkCircumstanceid);

                entity.HasIndex(e => e.FkScopejobdetailresourceid);

                entity.HasIndex(e => new { e.FkScopejobdetailresourceid, e.FkCircumstanceid })
                    .HasName("UK_tblScopeJobDetailResourceCircumstance")
                    .IsUnique();

                entity.Property(e => e.PkScopejobdetailresourcecircumstanceid).HasColumnName("pk_scopejobdetailresourcecircumstanceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCircumstanceid).HasColumnName("fk_circumstanceid");

                entity.Property(e => e.FkScopejobdetailresourceid).HasColumnName("fk_scopejobdetailresourceid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCircumstance)
                    .WithMany(p => p.TblScopeJobDetailResourceCircumstance)
                    .HasForeignKey(d => d.FkCircumstanceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceCircumstance_tblCircumstance");

                entity.HasOne(d => d.FkScopejobdetailresource)
                    .WithMany(p => p.TblScopeJobDetailResourceCircumstance)
                    .HasForeignKey(d => d.FkScopejobdetailresourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceCircumstance_tblScopeJobDetailResource");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceEstimate>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourceestimateid);

                entity.ToTable("tblScopeJobDetailResourceEstimate");

                entity.HasIndex(e => e.FkLibraryprocurementcontractpricelistid);

                entity.HasIndex(e => e.FkNormbaseid);

                entity.HasIndex(e => e.FkPropackexportresourceid);

                entity.HasIndex(e => e.FkScopejobdetailresourceid);

                entity.HasIndex(e => e.Wizardguid);

                entity.HasIndex(e => new { e.PkScopejobdetailresourceestimateid, e.FkScopejobdetailresourceid, e.FkLibraryprocurementcontractpricelistid, e.FkNormbaseid, e.Rowtype, e.Estimatehours, e.Quantity, e.Fixedprice, e.Requestorname, e.Status })
                    .HasName("IX_tblScopeJobDetailResourceEstimate_status_with_includes");

                entity.Property(e => e.PkScopejobdetailresourceestimateid).HasColumnName("pk_scopejobdetailresourceestimateid");

                entity.Property(e => e.Blindtype)
                    .HasColumnName("blindtype")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dia)
                    .HasColumnName("dia")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Dimension)
                    .HasColumnName("dimension")
                    .HasMaxLength(50);

                entity.Property(e => e.Drawingnumber)
                    .HasColumnName("drawingnumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Estimatehours)
                    .HasColumnName("estimatehours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Estimatememo).HasColumnName("estimatememo");

                entity.Property(e => e.Estimatesortorder).HasColumnName("estimatesortorder");

                entity.Property(e => e.Extrafloor).HasColumnName("extrafloor");

                entity.Property(e => e.Fixedprice)
                    .HasColumnName("fixedprice")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.FkLibraryprocurementcontractpricelistid).HasColumnName("fk_libraryprocurementcontractpricelistid");

                entity.Property(e => e.FkNormbaseid).HasColumnName("fk_normbaseid");

                entity.Property(e => e.FkPropackexportresourceid).HasColumnName("fk_propackexportresourceid");

                entity.Property(e => e.FkScopejobdetailresourceid).HasColumnName("fk_scopejobdetailresourceid");

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Length)
                    .HasColumnName("length")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.M2)
                    .HasColumnName("m2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.M3)
                    .HasColumnName("m3")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Plannedduration)
                    .HasColumnName("plannedduration")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Quantity)
                    .HasColumnName("quantity")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Requestordate)
                    .HasColumnName("requestordate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Requestorname)
                    .IsRequired()
                    .HasColumnName("requestorname")
                    .HasMaxLength(100);

                entity.Property(e => e.Rowtype)
                    .IsRequired()
                    .HasColumnName("rowtype")
                    .HasMaxLength(1);

                entity.Property(e => e.Scaffoldtag)
                    .HasColumnName("scaffoldtag")
                    .HasMaxLength(100);

                entity.Property(e => e.Scaffoldtype)
                    .HasColumnName("scaffoldtype")
                    .HasMaxLength(1);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasColumnName("status")
                    .HasMaxLength(1);

                entity.Property(e => e.Usertag)
                    .HasColumnName("usertag")
                    .HasMaxLength(50);

                entity.Property(e => e.Width)
                    .HasColumnName("width")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Wizardguid)
                    .HasColumnName("wizardguid")
                    .HasMaxLength(38);

                entity.Property(e => e.Wizardrownumber).HasColumnName("wizardrownumber");

                entity.HasOne(d => d.FkLibraryprocurementcontractpricelist)
                    .WithMany(p => p.TblScopeJobDetailResourceEstimate)
                    .HasForeignKey(d => d.FkLibraryprocurementcontractpricelistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceEstimate_tblLibraryProcurementContractPricelist");

                entity.HasOne(d => d.FkNormbase)
                    .WithMany(p => p.TblScopeJobDetailResourceEstimate)
                    .HasForeignKey(d => d.FkNormbaseid)
                    .HasConstraintName("FK_tblScopeJobDetailResourceEstimate_tblNormbase");

                entity.HasOne(d => d.FkPropackexportresource)
                    .WithMany(p => p.TblScopeJobDetailResourceEstimate)
                    .HasForeignKey(d => d.FkPropackexportresourceid)
                    .HasConstraintName("FK_tblScopeJobDetailResourceEstimate_tblPropackExportResource");

                entity.HasOne(d => d.FkScopejobdetailresource)
                    .WithMany(p => p.TblScopeJobDetailResourceEstimate)
                    .HasForeignKey(d => d.FkScopejobdetailresourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceEstimate_tblScopeJobDetailResource");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceEstimateCorrectionfactor>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourceestimatecorrectionfactorid);

                entity.ToTable("tblScopeJobDetailResourceEstimateCorrectionfactor");

                entity.HasIndex(e => e.FkCalccorfactorid);

                entity.HasIndex(e => e.FkScopejobdetailresourceestimateid)
                    .HasName("IX_tblScopeJobDetailResourceEstimateCorrectionfactor_fk_scopejobdetailresestimateid");

                entity.HasIndex(e => new { e.FkScopejobdetailresourceestimateid, e.FkCalccorfactorid })
                    .HasName("UK_tblScopeJobDetailResourceEstimateCorrectionfactor")
                    .IsUnique();

                entity.Property(e => e.PkScopejobdetailresourceestimatecorrectionfactorid).HasColumnName("pk_scopejobdetailresourceestimatecorrectionfactorid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalccorfactorid).HasColumnName("fk_calccorfactorid");

                entity.Property(e => e.FkScopejobdetailresourceestimateid).HasColumnName("fk_scopejobdetailresourceestimateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCalccorfactor)
                    .WithMany(p => p.TblScopeJobDetailResourceEstimateCorrectionfactor)
                    .HasForeignKey(d => d.FkCalccorfactorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceEstimateCorrectionfactor_tblCalcCorFactor");

                entity.HasOne(d => d.FkScopejobdetailresourceestimate)
                    .WithMany(p => p.TblScopeJobDetailResourceEstimateCorrectionfactor)
                    .HasForeignKey(d => d.FkScopejobdetailresourceestimateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceEstimateCorrectionfactor_tblScopeJobDetailResourceEstimate");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceMaterial>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourcematerialid);

                entity.ToTable("tblScopeJobDetailResourceMaterial");

                entity.HasIndex(e => e.FkMaterialid);

                entity.HasIndex(e => e.FkScopejobdetailresourceid)
                    .HasName("IX_tblScopeJobDetailResourceMaterial_fk_scopejobdetailresid");

                entity.Property(e => e.PkScopejobdetailresourcematerialid).HasColumnName("pk_scopejobdetailresourcematerialid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaterialid).HasColumnName("fk_materialid");

                entity.Property(e => e.FkScopejobdetailresourceid).HasColumnName("fk_scopejobdetailresourceid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMaterial)
                    .WithMany(p => p.TblScopeJobDetailResourceMaterial)
                    .HasForeignKey(d => d.FkMaterialid)
                    .HasConstraintName("FK_tblScopeJobDetailResourceMaterial_tblMaterial");

                entity.HasOne(d => d.FkScopejobdetailresource)
                    .WithMany(p => p.TblScopeJobDetailResourceMaterial)
                    .HasForeignKey(d => d.FkScopejobdetailresourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceMaterial_tblScopeJobDetailResource");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceProgressLog>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourceprogresslogid);

                entity.ToTable("tblScopeJobDetailResourceProgressLog");

                entity.HasIndex(e => e.DkScopejobdetailresourceid);

                entity.Property(e => e.PkScopejobdetailresourceprogresslogid).HasColumnName("pk_scopejobdetailresourceprogresslogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkScopejobdetailresourceid).HasColumnName("dk_scopejobdetailresourceid");

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction")
                    .HasMaxLength(100);

                entity.Property(e => e.Logdate)
                    .HasColumnName("logdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourceactualfinishdate)
                    .HasColumnName("resourceactualfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Resourceactualstartdate)
                    .HasColumnName("resourceactualstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Resourceismanualactualtimeoverride).HasColumnName("resourceismanualactualtimeoverride");

                entity.Property(e => e.Resourceprogress).HasColumnName("resourceprogress");

                entity.Property(e => e.Resourceprogressmode)
                    .HasColumnName("resourceprogressmode")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourceprogressusername)
                    .HasColumnName("resourceprogressusername")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourcequalitycontrol)
                    .HasColumnName("resourcequalitycontrol")
                    .HasMaxLength(100);

                entity.Property(e => e.Resourcetype).HasColumnName("resourcetype");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceTarget>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourcetargetid);

                entity.ToTable("tblScopeJobDetailResourceTarget");

                entity.HasIndex(e => e.FkScopejobdetailresourceid);

                entity.HasIndex(e => e.FkScopejobtargetid)
                    .HasName("IX_tblScopeJobDetailResourceTarget_tblScopeJobTarget");

                entity.HasIndex(e => e.FkTargetid);

                entity.HasIndex(e => new { e.FkScopejobdetailresourceid, e.FkTargetid })
                    .HasName("UK_tblScopeJobDetailResourceTarget")
                    .IsUnique();

                entity.Property(e => e.PkScopejobdetailresourcetargetid).HasColumnName("pk_scopejobdetailresourcetargetid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopejobdetailresourceid).HasColumnName("fk_scopejobdetailresourceid");

                entity.Property(e => e.FkScopejobtargetid).HasColumnName("fk_scopejobtargetid");

                entity.Property(e => e.FkTargetid).HasColumnName("fk_targetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourcetargetactualfinishdate)
                    .HasColumnName("resourcetargetactualfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Resourcetargetactualstartdate)
                    .HasColumnName("resourcetargetactualstartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Resourcetargethours)
                    .HasColumnName("resourcetargethours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Resourcetargetprogress).HasColumnName("resourcetargetprogress");

                entity.HasOne(d => d.FkScopejobdetailresource)
                    .WithMany(p => p.TblScopeJobDetailResourceTarget)
                    .HasForeignKey(d => d.FkScopejobdetailresourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceTarget_tblScopeJobDetailResource");

                entity.HasOne(d => d.FkScopejobtarget)
                    .WithMany(p => p.TblScopeJobDetailResourceTarget)
                    .HasForeignKey(d => d.FkScopejobtargetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceTarget_tblScopeJobTarget");

                entity.HasOne(d => d.FkTarget)
                    .WithMany(p => p.TblScopeJobDetailResourceTarget)
                    .HasForeignKey(d => d.FkTargetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResourceTarget_tblTarget");
            });

            modelBuilder.Entity<TblScopeJobDetailResourceToolsAndConsumables>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailresourcetoolsandconsumablesid);

                entity.ToTable("tblScopeJobDetailResourceToolsAndConsumables");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkScopejobdetailresourceid)
                    .HasName("IX_tblScopeJobDetailResourceToolsAndConsumables_fk_scopejobdetailresid");

                entity.HasIndex(e => e.FkToolsandconsumablesid);

                entity.Property(e => e.PkScopejobdetailresourcetoolsandconsumablesid).HasColumnName("pk_scopejobdetailresourcetoolsandconsumablesid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkScopejobdetailresourceid).HasColumnName("fk_scopejobdetailresourceid");

                entity.Property(e => e.FkToolsandconsumablesid).HasColumnName("fk_toolsandconsumablesid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resourcetoolsandconsumablesprice)
                    .HasColumnName("resourcetoolsandconsumablesprice")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Resourcetoolsandconsumablesquantity)
                    .HasColumnName("resourcetoolsandconsumablesquantity")
                    .HasColumnType("decimal(10, 2)");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblScopeJobDetailResourceToolsAndConsumables)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblScopeJobDetailResToolsAndConsumables_tblContractor");

                entity.HasOne(d => d.FkScopejobdetailresource)
                    .WithMany(p => p.TblScopeJobDetailResourceToolsAndConsumables)
                    .HasForeignKey(d => d.FkScopejobdetailresourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResToolsAndConsumables_tblScopeJobDetailResource");

                entity.HasOne(d => d.FkToolsandconsumables)
                    .WithMany(p => p.TblScopeJobDetailResourceToolsAndConsumables)
                    .HasForeignKey(d => d.FkToolsandconsumablesid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailResToolsAndConsumables_tblToolsAndConsumables");
            });

            modelBuilder.Entity<TblScopeJobDetailTarget>(entity =>
            {
                entity.HasKey(e => e.PkScopejobdetailtargetid);

                entity.ToTable("tblScopeJobDetailTarget");

                entity.HasIndex(e => e.FkScopejobdetailid);

                entity.HasIndex(e => e.FkTargetid);

                entity.HasIndex(e => new { e.FkScopejobdetailid, e.FkTargetid })
                    .HasName("UK_tblScopeJobDetailTarget")
                    .IsUnique();

                entity.Property(e => e.PkScopejobdetailtargetid).HasColumnName("pk_scopejobdetailtargetid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopejobdetailid).HasColumnName("fk_scopejobdetailid");

                entity.Property(e => e.FkTargetid).HasColumnName("fk_targetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopejobdetailname)
                    .HasColumnName("scopejobdetailname")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkScopejobdetail)
                    .WithMany(p => p.TblScopeJobDetailTarget)
                    .HasForeignKey(d => d.FkScopejobdetailid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailTarget_tblScopeJobDetail");

                entity.HasOne(d => d.FkTarget)
                    .WithMany(p => p.TblScopeJobDetailTarget)
                    .HasForeignKey(d => d.FkTargetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobDetailTarget_tblTarget");
            });

            modelBuilder.Entity<TblScopeJobPermit>(entity =>
            {
                entity.HasKey(e => e.PkScopejobpermitid);

                entity.ToTable("tblScopeJobPermit");

                entity.HasIndex(e => e.FkPermitid);

                entity.HasIndex(e => e.FkScopejobid);

                entity.HasIndex(e => new { e.FkScopejobid, e.FkPermitid })
                    .HasName("UK_tblScopeJobPermit")
                    .IsUnique();

                entity.Property(e => e.PkScopejobpermitid).HasColumnName("pk_scopejobpermitid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPermitid).HasColumnName("fk_permitid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopejobpermitisactivejob).HasColumnName("scopejobpermitisactivejob");

                entity.Property(e => e.Scopejobpermitisparent).HasColumnName("scopejobpermitisparent");

                entity.HasOne(d => d.FkPermit)
                    .WithMany(p => p.TblScopeJobPermit)
                    .HasForeignKey(d => d.FkPermitid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobPermit_tblPermit");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblScopeJobPermit)
                    .HasForeignKey(d => d.FkScopejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobPermit_tblScopeJob");
            });

            modelBuilder.Entity<TblScopeJobTarget>(entity =>
            {
                entity.HasKey(e => e.PkScopejobtargetid);

                entity.ToTable("tblScopeJobTarget");

                entity.HasIndex(e => e.FkCalendarid);

                entity.HasIndex(e => e.FkScopejobid);

                entity.HasIndex(e => e.FkTargetid);

                entity.Property(e => e.PkScopejobtargetid).HasColumnName("pk_scopejobtargetid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.FkTargetid).HasColumnName("fk_targetid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Progress).HasColumnName("progress");

                entity.Property(e => e.Scopejobtargetearlyfinishdate)
                    .HasColumnName("scopejobtargetearlyfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobtargetearlystartdate)
                    .HasColumnName("scopejobtargetearlystartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobtargetlatefinishdatedate)
                    .HasColumnName("scopejobtargetlatefinishdatedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobtargetlatestartdate)
                    .HasColumnName("scopejobtargetlatestartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobtargetplannedduration)
                    .HasColumnName("scopejobtargetplannedduration")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Scopejobtargetplannedfinishdate)
                    .HasColumnName("scopejobtargetplannedfinishdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Scopejobtargetplannedstartdate)
                    .HasColumnName("scopejobtargetplannedstartdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblScopeJobTarget)
                    .HasForeignKey(d => d.FkCalendarid)
                    .HasConstraintName("FK_tblScopeJobTarget_tblCalendar");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblScopeJobTarget)
                    .HasForeignKey(d => d.FkScopejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobTarget_tblScopeJob");

                entity.HasOne(d => d.FkTarget)
                    .WithMany(p => p.TblScopeJobTarget)
                    .HasForeignKey(d => d.FkTargetid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeJobTarget_tblTarget");
            });

            modelBuilder.Entity<TblScopeLabel>(entity =>
            {
                entity.HasKey(e => e.PkScopelabelid);

                entity.ToTable("tblScopeLabel");

                entity.HasIndex(e => e.FkLabelid)
                    .HasName("IX_tblScopeRequestLabel_fk_labelid");

                entity.HasIndex(e => e.FkScopeid)
                    .HasName("IX_tblScopeRequestLabel_fk_scoperequestid");

                entity.HasIndex(e => new { e.FkScopeid, e.FkLabelid })
                    .HasName("UC_tblScopeLabel")
                    .IsUnique();

                entity.Property(e => e.PkScopelabelid).HasColumnName("pk_scopelabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLabelid).HasColumnName("fk_labelid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLabel)
                    .WithMany(p => p.TblScopeLabel)
                    .HasForeignKey(d => d.FkLabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeLabel_tblLabel");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeLabel)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeLabel_tblScope");
            });

            modelBuilder.Entity<TblScopeLog>(entity =>
            {
                entity.HasKey(e => e.PkScopelogid);

                entity.ToTable("tblScopeLog");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeLog_Scopeid_Modifydate");

                entity.Property(e => e.PkScopelogid).HasColumnName("pk_scopelogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Roseruser)
                    .IsRequired()
                    .HasColumnName("roseruser")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeLog)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeLog_tblScope");
            });

            modelBuilder.Entity<TblScopeMaterial>(entity =>
            {
                entity.HasKey(e => e.PkScopematerialid);

                entity.ToTable("tblScopeMaterial");

                entity.HasIndex(e => e.FkMaterialid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkScopejobdetailresourcematerialid);

                entity.Property(e => e.PkScopematerialid).HasColumnName("pk_scopematerialid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaterialid).HasColumnName("fk_materialid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkScopejobdetailresourcematerialid).HasColumnName("fk_scopejobdetailresourcematerialid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMaterial)
                    .WithMany(p => p.TblScopeMaterial)
                    .HasForeignKey(d => d.FkMaterialid)
                    .HasConstraintName("FK_tblScopeMaterial_tblMaterial");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeMaterial)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeMaterial_tblScope");

                entity.HasOne(d => d.FkScopejobdetailresourcematerial)
                    .WithMany(p => p.TblScopeMaterial)
                    .HasForeignKey(d => d.FkScopejobdetailresourcematerialid)
                    .HasConstraintName("FK_tblScopeMaterial_tblScopeJobDetailResourceMaterial");
            });

            modelBuilder.Entity<TblScopeMemo>(entity =>
            {
                entity.HasKey(e => e.PkScopememo);

                entity.ToTable("tblScopeMemo");

                entity.Property(e => e.PkScopememo).HasColumnName("pk_scopememo");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopememosortorder).HasColumnName("scopememosortorder");

                entity.Property(e => e.Scopememotype).HasColumnName("scopememotype");
            });

            modelBuilder.Entity<TblScopeMilestone>(entity =>
            {
                entity.HasKey(e => e.PkScopemilestoneid);

                entity.ToTable("tblScopeMilestone", "rsy");

                entity.HasIndex(e => e.FkMilestoneid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkMilestoneid })
                    .HasName("IX_tblScopeMilestone_U1")
                    .IsUnique();

                entity.Property(e => e.PkScopemilestoneid).HasColumnName("pk_scopemilestoneid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMilestoneid).HasColumnName("fk_milestoneid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkMilestone)
                    .WithMany(p => p.TblScopeMilestone)
                    .HasForeignKey(d => d.FkMilestoneid)
                    .HasConstraintName("FK_tblScopeMilestone_fk_milestoneid");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeMilestone)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblScopeMilestone_tblScope");
            });

            modelBuilder.Entity<TblScopeMilestone1>(entity =>
            {
                entity.HasKey(e => e.PkScopemilestoneid);

                entity.ToTable("tblScopeMilestone");

                entity.HasIndex(e => e.FkMilestoneid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkMilestoneid })
                    .HasName("IX_tblScopeMilestone_U1")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeMilestone_Scope_Modifydate");

                entity.Property(e => e.PkScopemilestoneid).HasColumnName("pk_scopemilestoneid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMilestoneid).HasColumnName("fk_milestoneid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMilestone)
                    .WithMany(p => p.TblScopeMilestone1)
                    .HasForeignKey(d => d.FkMilestoneid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeMilestone_fk_milestoneid");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeMilestone1)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeMilestone_tblScope");
            });

            modelBuilder.Entity<TblScopePidRevision>(entity =>
            {
                entity.HasKey(e => e.PkScopepidid);

                entity.ToTable("tblScopePidRevision");

                entity.HasIndex(e => e.FkPidrevisionid)
                    .HasName("IX_tblScopePid_fk_pidrevisionid");

                entity.HasIndex(e => e.FkScopeid)
                    .HasName("IX_tblScopePid_fk_scopeid");

                entity.Property(e => e.PkScopepidid).HasColumnName("pk_scopepidid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPidrevisionid).HasColumnName("fk_pidrevisionid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPidrevision)
                    .WithMany(p => p.TblScopePidRevision)
                    .HasForeignKey(d => d.FkPidrevisionid)
                    .HasConstraintName("FK_tblScopePid_tblPidRevision");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopePidRevision)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopePid_tblScope");
            });

            modelBuilder.Entity<TblScopePolution>(entity =>
            {
                entity.HasKey(e => e.PkScopepolutionid);

                entity.ToTable("tblScopePolution");

                entity.HasIndex(e => e.FkCleanequipmentpartid);

                entity.HasIndex(e => e.FkCleanindexid);

                entity.HasIndex(e => e.FkCleaningmethodid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopepolutionid).HasColumnName("pk_scopepolutionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCleanequipmentpartid).HasColumnName("fk_cleanequipmentpartid");

                entity.Property(e => e.FkCleanindexid).HasColumnName("fk_cleanindexid");

                entity.Property(e => e.FkCleaningmethodid).HasColumnName("fk_cleaningmethodid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCleanequipmentpart)
                    .WithMany(p => p.TblScopePolution)
                    .HasForeignKey(d => d.FkCleanequipmentpartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopePolution_tblCleanEquipmentPart");

                entity.HasOne(d => d.FkCleanindex)
                    .WithMany(p => p.TblScopePolution)
                    .HasForeignKey(d => d.FkCleanindexid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopePolution_tblCleanIndex");

                entity.HasOne(d => d.FkCleaningmethod)
                    .WithMany(p => p.TblScopePolution)
                    .HasForeignKey(d => d.FkCleaningmethodid)
                    .HasConstraintName("FK_tblScopePolution_tblCleaningMethod");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopePolution)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopePolution_tblScope");
            });

            modelBuilder.Entity<TblScopePrio>(entity =>
            {
                entity.HasKey(e => e.PkScopeprioid);

                entity.ToTable("tblScopePrio");

                entity.HasIndex(e => e.Internalprio)
                    .HasName("IX_UNIQUE_INTERNALPRIO")
                    .IsUnique();

                entity.HasIndex(e => e.Scopepriocode)
                    .HasName("IX_UNIQUE_SCOPEPRIOCODE")
                    .IsUnique();

                entity.HasIndex(e => e.Scopepriodescription)
                    .HasName("IX_UNIQUE_SCOPEPRIODESCR")
                    .IsUnique();

                entity.Property(e => e.PkScopeprioid).HasColumnName("pk_scopeprioid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Internalprio).HasColumnName("internalprio");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopepriocode)
                    .IsRequired()
                    .HasColumnName("scopepriocode")
                    .HasMaxLength(10);

                entity.Property(e => e.Scopepriodescription)
                    .IsRequired()
                    .HasColumnName("scopepriodescription")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TblScopePunchlist>(entity =>
            {
                entity.HasKey(e => e.PkScopepunchlistid);

                entity.ToTable("tblScopePunchlist");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkPunchcategoryid);

                entity.HasIndex(e => e.FkPunchgroupid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.Punchnr })
                    .HasName("IX_tblScopePunchlist_U1")
                    .IsUnique();

                entity.Property(e => e.PkScopepunchlistid).HasColumnName("pk_scopepunchlistid");

                entity.Property(e => e.Accepteddate)
                    .HasColumnName("accepteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Accepteduser)
                    .HasColumnName("accepteduser")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Duedate)
                    .HasColumnName("duedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkPunchcategoryid).HasColumnName("fk_punchcategoryid");

                entity.Property(e => e.FkPunchgroupid).HasColumnName("fk_punchgroupid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Origindate)
                    .HasColumnName("origindate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Originuser)
                    .HasColumnName("originuser")
                    .HasMaxLength(100);

                entity.Property(e => e.Punchdescr)
                    .IsRequired()
                    .HasColumnName("punchdescr")
                    .HasMaxLength(500);

                entity.Property(e => e.Punchnr)
                    .HasColumnName("punchnr")
                    .HasMaxLength(10);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblScopePunchlist)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblScopePunchlist_fk_contractorid");

                entity.HasOne(d => d.FkPunchcategory)
                    .WithMany(p => p.TblScopePunchlist)
                    .HasForeignKey(d => d.FkPunchcategoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblPunchCategory_tblPunchCategory");

                entity.HasOne(d => d.FkPunchgroup)
                    .WithMany(p => p.TblScopePunchlist)
                    .HasForeignKey(d => d.FkPunchgroupid)
                    .HasConstraintName("FK_tblScopePunchlist_tblPunchGroup");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopePunchlist)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblscopePunchlist_tblScope");
            });

            modelBuilder.Entity<TblScopePunchlistDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkScopepunchlistdocumentlabelid);

                entity.ToTable("tblScopePunchlistDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkScopepunchlistid);

                entity.HasIndex(e => new { e.FkScopepunchlistid, e.FkDocumentlabelid })
                    .HasName("UK_tblScopePunchlistDocumentLabel")
                    .IsUnique();

                entity.Property(e => e.PkScopepunchlistdocumentlabelid).HasColumnName("pk_scopepunchlistdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkScopepunchlistid).HasColumnName("fk_scopepunchlistid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblScopePunchlistDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopePunchlistDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkScopepunchlist)
                    .WithMany(p => p.TblScopePunchlistDocumentLabel)
                    .HasForeignKey(d => d.FkScopepunchlistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopePunchlistDocumentLabel_tblScopepunchlist");
            });

            modelBuilder.Entity<TblScopeQaqcQuicklist>(entity =>
            {
                entity.HasKey(e => e.PkScopeqaqcquicklistid);

                entity.ToTable("tblScopeQaqcQuicklist");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkQaqcquicklistid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkQaqcquicklistid })
                    .HasName("IX_tblScopeQaqcQuicklist_U1")
                    .IsUnique();

                entity.Property(e => e.PkScopeqaqcquicklistid).HasColumnName("pk_scopeqaqcquicklistid");

                entity.Property(e => e.Accepteddate)
                    .HasColumnName("accepteddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Accepteduser)
                    .HasColumnName("accepteduser")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkQaqcquicklistid).HasColumnName("fk_qaqcquicklistid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Issueddate)
                    .HasColumnName("issueddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Issueduser)
                    .HasColumnName("issueduser")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveduser)
                    .HasColumnName("receiveduser")
                    .HasMaxLength(100);

                entity.Property(e => e.Riptest)
                    .HasColumnName("riptest")
                    .HasMaxLength(100);

                entity.Property(e => e.Roptest)
                    .HasColumnName("roptest")
                    .HasMaxLength(100);

                entity.Property(e => e.Thirdtest)
                    .HasColumnName("thirdtest")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblScopeQaqcQuicklist)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblScopeQaqcQuicklist_fk_contractorid");

                entity.HasOne(d => d.FkQaqcquicklist)
                    .WithMany(p => p.TblScopeQaqcQuicklist)
                    .HasForeignKey(d => d.FkQaqcquicklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeQaqcQuicklist_tblQaqcQuicklist");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeQaqcQuicklist)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeQaqcQuicklist_tblScope");
            });

            modelBuilder.Entity<TblScopeQuality>(entity =>
            {
                entity.HasKey(e => e.PkScopequalityid);

                entity.ToTable("tblScopeQuality");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.Scopequality, e.FkProjectid })
                    .HasName("UK_tblProjectScopeQuality")
                    .IsUnique();

                entity.Property(e => e.PkScopequalityid).HasColumnName("pk_scopequalityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Iserror).HasColumnName("iserror");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopequality)
                    .IsRequired()
                    .HasColumnName("scopequality")
                    .HasMaxLength(250);

                entity.Property(e => e.Weight).HasColumnName("weight");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblScopeQuality)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblProjectScopeQuality_tblProject");
            });

            modelBuilder.Entity<TblScopeQualityCheck>(entity =>
            {
                entity.HasKey(e => e.PkScopequalitycheckid);

                entity.ToTable("tblScopeQualityCheck");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkScopequalitycheckid).HasColumnName("pk_scopequalitycheckid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Qualitycheckdate)
                    .HasColumnName("qualitycheckdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Qualitycheckdescription)
                    .IsRequired()
                    .HasColumnName("qualitycheckdescription")
                    .HasMaxLength(500);

                entity.Property(e => e.Qualitychecktype)
                    .IsRequired()
                    .HasColumnName("qualitychecktype")
                    .HasColumnType("char(3)");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeQualityCheck)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeQualityCheck_tblScope");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblScopeQualityCheck)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeQualityCheck_tblUser");
            });

            modelBuilder.Entity<TblScopeRelation>(entity =>
            {
                entity.HasKey(e => e.PkScoperelationid);

                entity.ToTable("tblScopeRelation");

                entity.HasIndex(e => e.FkMilestoneid1)
                    .HasName("IX_tblRelation_fk_milestoneid1");

                entity.HasIndex(e => e.FkMilestoneid2)
                    .HasName("IX_tblRelation_fk_milestoneid2");

                entity.HasIndex(e => e.FkScopejobid1)
                    .HasName("IX_tblRelation_fk_scopejobid1");

                entity.HasIndex(e => e.FkScopejobid2)
                    .HasName("IX_tblRelation_fk_scopejobid2");

                entity.HasIndex(e => e.Gcrecord)
                    .HasName("tblScopeRelation_iGCRecord");

                entity.Property(e => e.PkScoperelationid).HasColumnName("pk_scoperelationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMilestoneid1).HasColumnName("fk_milestoneid1");

                entity.Property(e => e.FkMilestoneid2).HasColumnName("fk_milestoneid2");

                entity.Property(e => e.FkScopejobid1).HasColumnName("fk_scopejobid1");

                entity.Property(e => e.FkScopejobid2).HasColumnName("fk_scopejobid2");

                entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Relationlag).HasColumnName("relationlag");

                entity.Property(e => e.Relationtype)
                    .IsRequired()
                    .HasColumnName("relationtype")
                    .HasMaxLength(2);

                entity.HasOne(d => d.FkMilestoneid1Navigation)
                    .WithMany(p => p.TblScopeRelationFkMilestoneid1Navigation)
                    .HasForeignKey(d => d.FkMilestoneid1)
                    .HasConstraintName("FK_tblRelation_tblMilestone_1");

                entity.HasOne(d => d.FkMilestoneid2Navigation)
                    .WithMany(p => p.TblScopeRelationFkMilestoneid2Navigation)
                    .HasForeignKey(d => d.FkMilestoneid2)
                    .HasConstraintName("FK_tblRelation_tblMilestone_2");

                entity.HasOne(d => d.FkScopejobid1Navigation)
                    .WithMany(p => p.TblScopeRelationFkScopejobid1Navigation)
                    .HasForeignKey(d => d.FkScopejobid1)
                    .HasConstraintName("FK_tblRelation_tblScopeJob_1");

                entity.HasOne(d => d.FkScopejobid2Navigation)
                    .WithMany(p => p.TblScopeRelationFkScopejobid2Navigation)
                    .HasForeignKey(d => d.FkScopejobid2)
                    .HasConstraintName("FK_tblRelation_tblScopeJob_2");
            });

            modelBuilder.Entity<TblScopeRelationPosition>(entity =>
            {
                entity.HasKey(e => e.PkScoperelationpositionid);

                entity.ToTable("tblScopeRelationPosition");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkScopejobid);

                entity.HasIndex(e => e.FkScopemilestoneid);

                entity.HasIndex(e => e.FkScoperelationid);

                entity.HasIndex(e => e.Gcrecord)
                    .HasName("tblScopeRelationPosition_iGCRecord");

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeRelationPosition_Scope_Modifydate");

                entity.Property(e => e.PkScoperelationpositionid).HasColumnName("pk_scoperelationpositionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.FkScopemilestoneid).HasColumnName("fk_scopemilestoneid");

                entity.Property(e => e.FkScoperelationid).HasColumnName("fk_scoperelationid");

                entity.Property(e => e.Gcrecord).HasColumnName("GCRecord");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scoperelationpositionx).HasColumnName("scoperelationpositionx");

                entity.Property(e => e.Scoperelationpositiony).HasColumnName("scoperelationpositiony");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeRelationPosition)
                    .HasForeignKey(d => d.FkScopeid)
                    .HasConstraintName("FK_tblScopeRelationPosition_tblScope");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblScopeRelationPosition)
                    .HasForeignKey(d => d.FkScopejobid)
                    .HasConstraintName("FK_tblScopeRelationPosition_tblScopeJob");

                entity.HasOne(d => d.FkScopemilestone)
                    .WithMany(p => p.TblScopeRelationPosition)
                    .HasForeignKey(d => d.FkScopemilestoneid)
                    .HasConstraintName("FK_tblScopeRelationPosition_tblScopeMilestone");

                entity.HasOne(d => d.FkScoperelation)
                    .WithMany(p => p.TblScopeRelationPosition)
                    .HasForeignKey(d => d.FkScoperelationid)
                    .HasConstraintName("FK_tblScopeRelationPosition_tblScopeRelation");
            });

            modelBuilder.Entity<TblScopeRequestReview>(entity =>
            {
                entity.HasKey(e => e.PkScoperequestreviewid);

                entity.ToTable("tblScopeRequestReview");

                entity.HasIndex(e => e.FkScopeid)
                    .HasName("IX_tblScopeRequestReview_fk_scoperequestid");

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkScoperequestreviewid).HasColumnName("pk_scoperequestreviewid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reviewdate)
                    .HasColumnName("reviewdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reviewdescription)
                    .IsRequired()
                    .HasColumnName("reviewdescription")
                    .HasMaxLength(500);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeRequestReview)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeRequestReview_tblScope");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblScopeRequestReview)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeRequestReview_tblUser");
            });

            modelBuilder.Entity<TblScopeRequestRevision>(entity =>
            {
                entity.HasKey(e => e.PkScoperequestrevisionid);

                entity.ToTable("tblScopeRequestRevision");

                entity.HasIndex(e => e.FkRevisionid);

                entity.HasIndex(e => e.FkScopeid)
                    .HasName("IX_tblScopeRequestRevision_fk_scoperequestid");

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeRequestRevision_Scope_Modifydate");

                entity.Property(e => e.PkScoperequestrevisionid).HasColumnName("pk_scoperequestrevisionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRevisionid).HasColumnName("fk_revisionid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRevision)
                    .WithMany(p => p.TblScopeRequestRevision)
                    .HasForeignKey(d => d.FkRevisionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeRequestRevision_tblRevision");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeRequestRevision)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeRequestRevision_tblScope");
            });

            modelBuilder.Entity<TblScopeResponsible>(entity =>
            {
                entity.HasKey(e => e.PkScoperesponsibleid);

                entity.ToTable("tblScopeResponsible");

                entity.HasIndex(e => e.Scoperesponsible)
                    .HasName("IX_tblScopeResponsible_scoperesponsible")
                    .IsUnique();

                entity.Property(e => e.PkScoperesponsibleid).HasColumnName("pk_scoperesponsibleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Descr)
                    .IsRequired()
                    .HasColumnName("descr")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scoperesponsible)
                    .IsRequired()
                    .HasColumnName("scoperesponsible")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<TblScopeReview>(entity =>
            {
                entity.HasKey(e => e.PkScopereviewid);

                entity.ToTable("tblScopeReview", "rsy");

                entity.HasIndex(e => e.FkReviewgroupid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkReviewgroupid })
                    .HasName("IX_tblScopeReview_U1")
                    .IsUnique();

                entity.Property(e => e.PkScopereviewid).HasColumnName("pk_scopereviewid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkReviewgroupid).HasColumnName("fk_reviewgroupid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Handlingdate)
                    .HasColumnName("handlingdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Handlingmemo)
                    .HasColumnName("handlingmemo")
                    .HasMaxLength(500);

                entity.Property(e => e.Handlingstatus)
                    .HasColumnName("handlingstatus")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Reviewdate)
                    .HasColumnName("reviewdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Reviewmemo)
                    .HasColumnName("reviewmemo")
                    .HasMaxLength(4000);

                entity.HasOne(d => d.FkReviewgroup)
                    .WithMany(p => p.TblScopeReview)
                    .HasForeignKey(d => d.FkReviewgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeReview_tblReviewGroup");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeReview)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeReview_tblScope");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblScopeReview)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblScopeReview_fk_userid");
            });

            modelBuilder.Entity<TblScopeScopeCategory>(entity =>
            {
                entity.HasKey(e => e.PkScopecategoryid);

                entity.ToTable("tblScopeScopeCategory");

                entity.HasIndex(e => e.FkScopecategoryid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopecategoryid).HasColumnName("pk_scopecategoryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopecategoryid).HasColumnName("fk_scopecategoryid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScopecategory)
                    .WithMany(p => p.TblScopeScopeCategory)
                    .HasForeignKey(d => d.FkScopecategoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeCategory_tblScopeCategory");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeScopeCategory)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeCategory_tblScope");
            });

            modelBuilder.Entity<TblScopeScopeCustom>(entity =>
            {
                entity.HasKey(e => e.PkScopescopecustomid);

                entity.ToTable("tblScopeScopeCustom");

                entity.HasIndex(e => e.FkScopecustomid);

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopescopecustomid).HasColumnName("pk_scopescopecustomid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Customvalue)
                    .IsRequired()
                    .HasColumnName("customvalue")
                    .HasMaxLength(1000);

                entity.Property(e => e.FkScopecustomid).HasColumnName("fk_scopecustomid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScopecustom)
                    .WithMany(p => p.TblScopeScopeCustom)
                    .HasForeignKey(d => d.FkScopecustomid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeScopeCustom_tblScopeCustom");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeScopeCustom)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeScopeCustom_tblScope");
            });

            modelBuilder.Entity<TblScopeScopeQuality>(entity =>
            {
                entity.HasKey(e => e.PkScopescopequalityid);

                entity.ToTable("tblScopeScopeQuality");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkScopequalityid);

                entity.HasIndex(e => new { e.FkScopequalityid, e.FkScopeid })
                    .HasName("UK_tblScopeScopeQuality")
                    .IsUnique();

                entity.Property(e => e.PkScopescopequalityid).HasColumnName("pk_scopescopequalityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Earnedquality)
                    .HasColumnName("earnedquality")
                    .HasColumnType("decimal(8, 3)");

                entity.Property(e => e.Failreason).HasColumnName("failreason");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkScopequalityid).HasColumnName("fk_scopequalityid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeScopeQuality)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeScopeQuality_tblScope");

                entity.HasOne(d => d.FkScopequality)
                    .WithMany(p => p.TblScopeScopeQuality)
                    .HasForeignKey(d => d.FkScopequalityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeScopeQuality_tblScopeQuality");
            });

            modelBuilder.Entity<TblScopeStatus>(entity =>
            {
                entity.HasKey(e => e.PkScopestatusid);

                entity.ToTable("tblScopeStatus");

                entity.Property(e => e.PkScopestatusid).HasColumnName("pk_scopestatusid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopestatus)
                    .IsRequired()
                    .HasColumnName("scopestatus")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<TblScopeSubDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkScopesubdisciplineid);

                entity.ToTable("tblScopeSubDiscipline");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkSubdisciplineid })
                    .HasName("UC_ScopeSubDiscipline")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeSubDiscipline_Scope_Modifydate");

                entity.Property(e => e.PkScopesubdisciplineid).HasColumnName("pk_scopesubdisciplineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Crew)
                    .HasColumnName("crew")
                    .HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Durationhrs).HasColumnName("durationhrs");

                entity.Property(e => e.Eqprentalsbudget).HasColumnName("eqprentalsbudget");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.Manhrsbudget).HasColumnName("manhrsbudget");

                entity.Property(e => e.Matbudget).HasColumnName("matbudget");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Oldtaskdescription)
                    .HasColumnName("_oldtaskdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblScopeSubDiscipline)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblScopeSubDiscipline_tblContractor");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeSubDiscipline)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeSubDiscipline_tblScope");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblScopeSubDiscipline)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeSubDiscipline_tblSubDiscipline");
            });

            modelBuilder.Entity<TblScopeTagsMisc>(entity =>
            {
                entity.HasKey(e => e.PkScopetagsmiscid);

                entity.ToTable("tblScopeTagsMisc");

                entity.HasIndex(e => e.FkScopeid);

                entity.Property(e => e.PkScopetagsmiscid).HasColumnName("pk_scopetagsmiscid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Tagmiscdescr)
                    .IsRequired()
                    .HasColumnName("tagmiscdescr")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeTagsMisc)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeTagsMisc_tblScope");
            });

            modelBuilder.Entity<TblScopeTestSystem>(entity =>
            {
                entity.HasKey(e => e.PkScopetestsystemid);

                entity.ToTable("tblScopeTestSystem");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkTestsystemid);

                entity.HasIndex(e => new { e.FkScopeid, e.FkTestsystemid })
                    .HasName("UK_tblScopeTestSystem")
                    .IsUnique();

                entity.Property(e => e.PkScopetestsystemid).HasColumnName("pk_scopetestsystemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkTestsystemid).HasColumnName("fk_testsystemid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeTestSystem)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeTestSystem_tblScope");

                entity.HasOne(d => d.FkTestsystem)
                    .WithMany(p => p.TblScopeTestSystem)
                    .HasForeignKey(d => d.FkTestsystemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeTestSystem_tblTestSystem");
            });

            modelBuilder.Entity<TblScopeType>(entity =>
            {
                entity.HasKey(e => e.PkScopetypeid);

                entity.ToTable("tblScopeType");

                entity.HasIndex(e => e.Scopetypecode)
                    .HasName("IX_tblScopeType_scopetype")
                    .IsUnique();

                entity.Property(e => e.PkScopetypeid).HasColumnName("pk_scopetypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Scopetypecode)
                    .IsRequired()
                    .HasColumnName("scopetypecode")
                    .HasMaxLength(10);

                entity.Property(e => e.ScopetypedescriptionL1)
                    .IsRequired()
                    .HasColumnName("scopetypedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopetypedescriptionL2)
                    .HasColumnName("scopetypedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopetypedescriptionL3)
                    .HasColumnName("scopetypedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopetypedescriptionL4)
                    .HasColumnName("scopetypedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.ScopetypedescriptionL5)
                    .HasColumnName("scopetypedescription_l5")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblScopeWpcode>(entity =>
            {
                entity.HasKey(e => e.PkScopewpcodeid);

                entity.ToTable("tblScopeWpcode");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkpreparationcodeid)
                    .HasName("IX_tblScopeWpcode_fk_wpcodeid");

                entity.HasIndex(e => new { e.FkScopeid, e.FkWorkpreparationcodeid })
                    .HasName("IX_tblScopeWpcode_U1")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkScopeid, e.Modifydate })
                    .HasName("IX_tblScopeWPCode_Scope_Modifydate");

                entity.Property(e => e.PkScopewpcodeid).HasColumnName("pk_scopewpcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dateapproved)
                    .HasColumnName("dateapproved")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dateissued)
                    .HasColumnName("dateissued")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dateready)
                    .HasColumnName("dateready")
                    .HasColumnType("datetime");

                entity.Property(e => e.Datereceived)
                    .HasColumnName("datereceived")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkpreparationcodeid).HasColumnName("fk_workpreparationcodeid");

                entity.Property(e => e.Hours)
                    .HasColumnName("hours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Isroute).HasColumnName("isroute");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Wpcodememo)
                    .HasColumnName("wpcodememo")
                    .HasMaxLength(500);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeWpcode)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeWpcode_tblScope");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblScopeWpcode)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeWpcode_fk_userid");

                entity.HasOne(d => d.FkWorkpreparationcode)
                    .WithMany(p => p.TblScopeWpcode)
                    .HasForeignKey(d => d.FkWorkpreparationcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeWpcode_fk_workpreparationcodeid");
            });

            modelBuilder.Entity<TblScopeWpphaseProgress>(entity =>
            {
                entity.HasKey(e => e.PkScopewpphaseprogressid);

                entity.ToTable("tblScopeWpphaseProgress");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => e.FkWorkpreparationphaseid)
                    .HasName("IX_tblScopeWpphaseProgress_fk_wpphaseid");

                entity.HasIndex(e => new { e.FkScopeid, e.FkWorkpreparationphaseid })
                    .HasName("IX_tblScopeWpphaseProgress_U1")
                    .IsUnique();

                entity.Property(e => e.PkScopewpphaseprogressid).HasColumnName("pk_scopewpphaseprogressid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.FkWorkpreparationphaseid).HasColumnName("fk_workpreparationphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Readydate)
                    .HasColumnName("readydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Readyuser)
                    .HasColumnName("readyuser")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblScopeWpphaseProgress)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeWpphaseProgress_tblScope");

                entity.HasOne(d => d.FkWorkpreparationphase)
                    .WithMany(p => p.TblScopeWpphaseProgress)
                    .HasForeignKey(d => d.FkWorkpreparationphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeWpphaseProgress_fk_workpreparationphaseid");
            });

            modelBuilder.Entity<TblSetting>(entity =>
            {
                entity.HasKey(e => e.PkSettingid);

                entity.ToTable("tblSetting");

                entity.HasIndex(e => e.FkDefaultlogoid);

                entity.HasIndex(e => e.FkMasterdatainterfacelogoid);

                entity.Property(e => e.PkSettingid).HasColumnName("pk_settingid");

                entity.Property(e => e.Accdbdataprovider)
                    .HasColumnName("accdbdataprovider")
                    .HasMaxLength(100);

                entity.Property(e => e.Activitycodelength).HasColumnName("activitycodelength");

                entity.Property(e => e.Activityprogressordertype).HasColumnName("activityprogressordertype");

                entity.Property(e => e.Actualfinishtime)
                    .HasColumnName("actualfinishtime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Actualstarttime)
                    .HasColumnName("actualstarttime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Attachmentcopypath)
                    .HasColumnName("attachmentcopypath")
                    .HasMaxLength(250);

                entity.Property(e => e.Attachmentsavemethod).HasColumnName("attachmentsavemethod");

                entity.Property(e => e.Autocleanuptempfolder).HasColumnName("autocleanuptempfolder");

                entity.Property(e => e.Autologon).HasColumnName("autologon");

                entity.Property(e => e.Autosendemailonactioncreation).HasColumnName("autosendemailonactioncreation");

                entity.Property(e => e.Autosendmailtoprojectleaderonreviewscompleted).HasColumnName("autosendmailtoprojectleaderonreviewscompleted");

                entity.Property(e => e.Calcmaintenance).HasColumnName("calcmaintenance");

                entity.Property(e => e.Calcproduction).HasColumnName("calcproduction");

                entity.Property(e => e.Certificatennrisprefixwithautonumber).HasColumnName("certificatennrisprefixwithautonumber");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Currency)
                    .HasColumnName("currency")
                    .HasMaxLength(10);

                entity.Property(e => e.Daextimeout).HasColumnName("daextimeout");

                entity.Property(e => e.Dayspasswordisvalid).HasColumnName("dayspasswordisvalid");

                entity.Property(e => e.Dbversion).HasColumnName("dbversion");

                entity.Property(e => e.Defaultcalendarworkhours)
                    .IsRequired()
                    .HasColumnName("defaultcalendarworkhours")
                    .HasColumnType("char(672)");

                entity.Property(e => e.Denyaddingdeletedscopes).HasColumnName("denyaddingdeletedscopes");

                entity.Property(e => e.Distanceinkm).HasColumnName("distanceinkm");

                entity.Property(e => e.Documentnrformat)
                    .HasColumnName("documentnrformat")
                    .HasMaxLength(50);

                entity.Property(e => e.Estimatedfactor)
                    .HasColumnName("estimatedfactor")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Finalqcmemo).HasColumnName("finalqcmemo");

                entity.Property(e => e.Firstdayofweek).HasColumnName("firstdayofweek");

                entity.Property(e => e.FkDefaultlogoid).HasColumnName("fk_defaultlogoid");

                entity.Property(e => e.FkMasterdatainterfacelogoid).HasColumnName("fk_masterdatainterfacelogoid");

                entity.Property(e => e.Hidedeleted).HasColumnName("hidedeleted");

                entity.Property(e => e.Hightimeout).HasColumnName("hightimeout");

                entity.Property(e => e.Historicalpasswordstokeep).HasColumnName("historicalpasswordstokeep");

                entity.Property(e => e.Hourbookamount).HasColumnName("hourbookamount");

                entity.Property(e => e.Httprequesttimeout).HasColumnName("httprequesttimeout");

                entity.Property(e => e.Importkeyfield).HasColumnName("importkeyfield");

                entity.Property(e => e.Invertriskaxis).HasColumnName("invertriskaxis");

                entity.Property(e => e.Isolationactivitysequence).HasColumnName("isolationactivitysequence");

                entity.Property(e => e.Mandatoryscanafterprogress).HasColumnName("mandatoryscanafterprogress");

                entity.Property(e => e.Maxcyclelength).HasColumnName("maxcyclelength");

                entity.Property(e => e.Maxloginattempt).HasColumnName("maxloginattempt");

                entity.Property(e => e.Maxsuggestions).HasColumnName("maxsuggestions");

                entity.Property(e => e.Maxtimeout).HasColumnName("maxtimeout");

                entity.Property(e => e.Mdbdataprovider)
                    .HasColumnName("mdbdataprovider")
                    .HasMaxLength(100);

                entity.Property(e => e.Mdbtninterfacecaption)
                    .HasColumnName("mdbtninterfacecaption")
                    .HasMaxLength(50);

                entity.Property(e => e.Minsuggestionpercentage).HasColumnName("minsuggestionpercentage");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normaltimeout).HasColumnName("normaltimeout");

                entity.Property(e => e.Overallriskcaption)
                    .IsRequired()
                    .HasColumnName("overallriskcaption")
                    .HasMaxLength(50);

                entity.Property(e => e.P6apibatchsize).HasColumnName("p6apibatchsize");

                entity.Property(e => e.P6apipath)
                    .IsRequired()
                    .HasColumnName("p6apipath")
                    .HasMaxLength(200);

                entity.Property(e => e.P6apiversion)
                    .HasColumnName("p6apiversion")
                    .HasMaxLength(100);

                entity.Property(e => e.P6exportallsbsmilestones).HasColumnName("p6exportallsbsmilestones");

                entity.Property(e => e.P6exportroles).HasColumnName("p6exportroles");

                entity.Property(e => e.P6heartbeattimeout).HasColumnName("p6heartbeattimeout");

                entity.Property(e => e.P6instancename)
                    .HasColumnName("p6instancename")
                    .HasMaxLength(200);

                entity.Property(e => e.P6javaexepath)
                    .IsRequired()
                    .HasColumnName("p6javaexepath")
                    .HasMaxLength(200);

                entity.Property(e => e.P6javainitialheapsize).HasColumnName("p6javainitialheapsize");

                entity.Property(e => e.P6javamaximumheapsize).HasColumnName("p6javamaximumheapsize");

                entity.Property(e => e.P6maxactivityidlength).HasColumnName("p6maxactivityidlength");

                entity.Property(e => e.P6pmdbpassword)
                    .IsRequired()
                    .HasColumnName("p6pmdbpassword")
                    .HasMaxLength(100);

                entity.Property(e => e.P6pmdbusername)
                    .IsRequired()
                    .HasColumnName("p6pmdbusername")
                    .HasMaxLength(100);

                entity.Property(e => e.Passwordcharminimumcount).HasColumnName("passwordcharminimumcount");

                entity.Property(e => e.Passwordrequirecapitalchar).HasColumnName("passwordrequirecapitalchar");

                entity.Property(e => e.Passwordrequirenonalphachar).HasColumnName("passwordrequirenonalphachar");

                entity.Property(e => e.Passwordrequirenumericchar).HasColumnName("passwordrequirenumericchar");

                entity.Property(e => e.Permitplanningdate).HasColumnName("permitplanningdate");

                entity.Property(e => e.Postqcmemo).HasColumnName("postqcmemo");

                entity.Property(e => e.Prefilldatadate).HasColumnName("prefilldatadate");

                entity.Property(e => e.Preqcmemo).HasColumnName("preqcmemo");

                entity.Property(e => e.Progressloginurl)
                    .HasColumnName("progressloginurl")
                    .HasMaxLength(200);

                entity.Property(e => e.Ptwnrformat)
                    .HasColumnName("ptwnrformat")
                    .HasMaxLength(50);

                entity.Property(e => e.Repairrelations).HasColumnName("repairrelations");

                entity.Property(e => e.Reportpaperkind).HasColumnName("reportpaperkind");

                entity.Property(e => e.Reportpaperkindlargereport).HasColumnName("reportpaperkindlargereport");

                entity.Property(e => e.Reviewcountfull).HasColumnName("reviewcountfull");

                entity.Property(e => e.Riskchecklistcountfull).HasColumnName("riskchecklistcountfull");

                entity.Property(e => e.Riskusevalues).HasColumnName("riskusevalues");

                entity.Property(e => e.Rpt04)
                    .IsRequired()
                    .HasColumnName("rpt04")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RptLi02)
                    .IsRequired()
                    .HasColumnName("rptLI02")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RptLi04)
                    .IsRequired()
                    .HasColumnName("rptLI04")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RptWp00)
                    .IsRequired()
                    .HasColumnName("rptWP00")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.RptWp01)
                    .IsRequired()
                    .HasColumnName("rptWP01")
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Sigbox1)
                    .IsRequired()
                    .HasColumnName("sigbox1")
                    .HasMaxLength(35);

                entity.Property(e => e.Sigbox2)
                    .IsRequired()
                    .HasColumnName("sigbox2")
                    .HasMaxLength(35);

                entity.Property(e => e.Sigbox3)
                    .IsRequired()
                    .HasColumnName("sigbox3")
                    .HasMaxLength(35);

                entity.Property(e => e.Sigbox4)
                    .IsRequired()
                    .HasColumnName("sigbox4")
                    .HasMaxLength(35);

                entity.Property(e => e.Sigbox5)
                    .IsRequired()
                    .HasColumnName("sigbox5")
                    .HasMaxLength(35);

                entity.Property(e => e.Sigbox6)
                    .IsRequired()
                    .HasColumnName("sigbox6")
                    .HasMaxLength(35);

                entity.Property(e => e.Startnumberchangerequest).HasColumnName("startnumberchangerequest");

                entity.Property(e => e.Supportedopenfiles)
                    .HasColumnName("supportedopenfiles")
                    .HasMaxLength(150);

                entity.Property(e => e.Supporteduploadfiles)
                    .HasColumnName("supporteduploadfiles")
                    .HasMaxLength(150);

                entity.Property(e => e.Technicaldatareportbasedon).HasColumnName("technicaldatareportbasedon");

                entity.Property(e => e.Technicaldatareportdepth).HasColumnName("technicaldatareportdepth");

                entity.Property(e => e.Technicaldatareportseparator)
                    .HasColumnName("technicaldatareportseparator")
                    .HasMaxLength(5);

                entity.Property(e => e.Tempfolder)
                    .HasColumnName("tempfolder")
                    .HasMaxLength(260);

                entity.Property(e => e.Touchcanbookdaysback).HasColumnName("touchcanbookdaysback");

                entity.Property(e => e.Touchclockovertimeafterminutes).HasColumnName("touchclockovertimeafterminutes");

                entity.Property(e => e.Touchendtimeexceptionminutes).HasColumnName("touchendtimeexceptionminutes");

                entity.Property(e => e.Touchfont)
                    .HasColumnName("touchfont")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Touchidletime).HasColumnName("touchidletime");

                entity.Property(e => e.Touchisbrutonetto).HasColumnName("touchisbrutonetto");

                entity.Property(e => e.Touchistimetracking).HasColumnName("touchistimetracking");

                entity.Property(e => e.Touchisuserscopefiltering).HasColumnName("touchisuserscopefiltering");

                entity.Property(e => e.Touchlookahead).HasColumnName("touchlookahead");

                entity.Property(e => e.Touchmaxhoursday)
                    .HasColumnName("touchmaxhoursday")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Touchnbhcanbookdaysforward).HasColumnName("touchnbhcanbookdaysforward");

                entity.Property(e => e.Touchnbhenabled).HasColumnName("touchnbhenabled");

                entity.Property(e => e.Touchpinisrequired).HasColumnName("touchpinisrequired");

                entity.Property(e => e.Touchquestionidletime).HasColumnName("touchquestionidletime");

                entity.Property(e => e.Touchroundendtime).HasColumnName("touchroundendtime");

                entity.Property(e => e.Touchroundstarttime).HasColumnName("touchroundstarttime");

                entity.Property(e => e.Touchscopefield).HasColumnName("touchscopefield");

                entity.Property(e => e.Touchscreenrefreshtime).HasColumnName("touchscreenrefreshtime");

                entity.Property(e => e.Touchstarttimeexceptionminutes).HasColumnName("touchstarttimeexceptionminutes");

                entity.Property(e => e.Usecloseconfirmation).HasColumnName("usecloseconfirmation");

                entity.Property(e => e.Usedefaultdocumentlabelattachments).HasColumnName("usedefaultdocumentlabelattachments");

                entity.Property(e => e.Useencryption).HasColumnName("useencryption");

                entity.Property(e => e.Usescoperequestnoforrosersystems).HasColumnName("usescoperequestnoforrosersystems");

                entity.Property(e => e.Usestartwork).HasColumnName("usestartwork");

                entity.Property(e => e.Visualqcmemo).HasColumnName("visualqcmemo");

                entity.Property(e => e.Wikipassword)
                    .HasColumnName("wikipassword")
                    .HasMaxLength(50);

                entity.Property(e => e.Wikiurl)
                    .IsRequired()
                    .HasColumnName("wikiurl")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Wikiusername)
                    .HasColumnName("wikiusername")
                    .HasMaxLength(50);

                entity.Property(e => e.Wisigbox1)
                    .IsRequired()
                    .HasColumnName("wisigbox1")
                    .HasMaxLength(35);

                entity.Property(e => e.Wisigbox2)
                    .IsRequired()
                    .HasColumnName("wisigbox2")
                    .HasMaxLength(35);

                entity.Property(e => e.Wisigbox3)
                    .IsRequired()
                    .HasColumnName("wisigbox3")
                    .HasMaxLength(35);

                entity.Property(e => e.Wisigbox4)
                    .IsRequired()
                    .HasColumnName("wisigbox4")
                    .HasMaxLength(35);

                entity.Property(e => e.Wisigbox5)
                    .IsRequired()
                    .HasColumnName("wisigbox5")
                    .HasMaxLength(35);

                entity.Property(e => e.Wisigbox6)
                    .IsRequired()
                    .HasColumnName("wisigbox6")
                    .HasMaxLength(35);

                entity.HasOne(d => d.FkDefaultlogo)
                    .WithMany(p => p.TblSettingFkDefaultlogo)
                    .HasForeignKey(d => d.FkDefaultlogoid)
                    .HasConstraintName("FK_tblSetting_tblLogo");

                entity.HasOne(d => d.FkMasterdatainterfacelogo)
                    .WithMany(p => p.TblSettingFkMasterdatainterfacelogo)
                    .HasForeignKey(d => d.FkMasterdatainterfacelogoid)
                    .HasConstraintName("FK_tblSetting_tblLogo_masterdatainterfacelogoid");
            });

            modelBuilder.Entity<TblSetting1>(entity =>
            {
                entity.HasKey(e => e.PkSettingid);

                entity.ToTable("tblSetting", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.Property(e => e.PkSettingid).HasColumnName("pk_settingid");

                entity.Property(e => e.Allowclearprogress).HasColumnName("allowclearprogress");

                entity.Property(e => e.Allowcustomjob).HasColumnName("allowcustomjob");

                entity.Property(e => e.Allowcustommaterial).HasColumnName("allowcustommaterial");

                entity.Property(e => e.Allowdoceditonfreeze).HasColumnName("allowdoceditonfreeze");

                entity.Property(e => e.Allowdoceditonscopefreeze).HasColumnName("allowdoceditonscopefreeze");

                entity.Property(e => e.Allowrebookprogress).HasColumnName("allowrebookprogress");

                entity.Property(e => e.Allowwpholderplancardeditonfreeze).HasColumnName("allowwpholderplancardeditonfreeze");

                entity.Property(e => e.Applyprocurementcorrectionfactorstoestimates).HasColumnName("applyprocurementcorrectionfactorstoestimates");

                entity.Property(e => e.Correctnormbaseswithprice).HasColumnName("correctnormbaseswithprice");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Ho1caption)
                    .HasColumnName("ho1caption")
                    .HasMaxLength(10);

                entity.Property(e => e.Ho2caption)
                    .HasColumnName("ho2caption")
                    .HasMaxLength(10);

                entity.Property(e => e.Iserroremail).HasColumnName("iserroremail");

                entity.Property(e => e.Lastimportdate)
                    .HasColumnName("lastimportdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Multiplyprocurementcorrectionfactors)
                    .HasColumnName("multiplyprocurementcorrectionfactors")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.P3actprefix)
                    .IsRequired()
                    .HasColumnName("p3actprefix")
                    .HasMaxLength(20);

                entity.Property(e => e.P3mlstformat)
                    .IsRequired()
                    .HasColumnName("p3mlstformat")
                    .HasMaxLength(50);

                entity.Property(e => e.PdfexpallowA3).HasColumnName("pdfexpallowA3");

                entity.Property(e => e.Pdfexpfilepresuf)
                    .IsRequired()
                    .HasColumnName("pdfexpfilepresuf")
                    .HasMaxLength(35);

                entity.Property(e => e.Pdfexpfoldergrouping)
                    .HasColumnName("pdfexpfoldergrouping")
                    .HasMaxLength(10);

                entity.Property(e => e.Pdfexpimgquality).HasColumnName("pdfexpimgquality");

                entity.Property(e => e.Pg01groupcolumn1)
                    .IsRequired()
                    .HasColumnName("pg01groupcolumn1")
                    .HasMaxLength(100);

                entity.Property(e => e.Pg01groupcolumn2)
                    .IsRequired()
                    .HasColumnName("pg01groupcolumn2")
                    .HasMaxLength(100);

                entity.Property(e => e.Pg01groupcolumn3)
                    .IsRequired()
                    .HasColumnName("pg01groupcolumn3")
                    .HasMaxLength(100);

                entity.Property(e => e.Pg01groupcolumn4)
                    .IsRequired()
                    .HasColumnName("pg01groupcolumn4")
                    .HasMaxLength(100);

                entity.Property(e => e.Pg01maingroup)
                    .HasColumnName("pg01maingroup")
                    .HasMaxLength(100);

                entity.Property(e => e.Pg01maingroupcolor).HasColumnName("pg01maingroupcolor");

                entity.Property(e => e.Pg01offsetdate).HasColumnName("pg01offsetdate");

                entity.Property(e => e.Pg01qualitycontrol).HasColumnName("pg01qualitycontrol");

                entity.Property(e => e.Pg01showfinishdate).HasColumnName("pg01showfinishdate");

                entity.Property(e => e.Pg01typedate)
                    .IsRequired()
                    .HasColumnName("pg01typedate")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Pg05grouping).HasColumnName("pg05grouping");

                entity.Property(e => e.Pg05sort).HasColumnName("pg05sort");

                entity.Property(e => e.Pg10enddate)
                    .HasColumnName("pg10enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pg10settings)
                    .HasColumnName("pg10settings")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pg10startdate)
                    .HasColumnName("pg10startdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pl01customdate1)
                    .HasColumnName("pl01customdate1")
                    .HasMaxLength(250);

                entity.Property(e => e.Pl01customdate2)
                    .HasColumnName("pl01customdate2")
                    .HasMaxLength(250);

                entity.Property(e => e.Pl01showprogress).HasColumnName("pl01showprogress");

                entity.Property(e => e.Primaryreportfield)
                    .IsRequired()
                    .HasColumnName("primaryreportfield")
                    .HasMaxLength(50);

                entity.Property(e => e.Qc04printpunch).HasColumnName("qc04printpunch");

                entity.Property(e => e.Renderpdfdpi).HasColumnName("renderpdfdpi");

                entity.Property(e => e.Reportheaderfield).HasColumnName("reportheaderfield");

                entity.Property(e => e.Resourceappearance).HasColumnName("resourceappearance");

                entity.Property(e => e.Rrrequiredbeforefreeze).HasColumnName("rrrequiredbeforefreeze");

                entity.Property(e => e.Secondaryreportfield)
                    .IsRequired()
                    .HasColumnName("secondaryreportfield")
                    .HasMaxLength(50);

                entity.Property(e => e.Syncscopeswithscheduleit).HasColumnName("syncscopeswithscheduleit");

                entity.Property(e => e.Webtimeregistrationenabled).HasColumnName("webtimeregistrationenabled");

                entity.Property(e => e.Wp01barcode).HasColumnName("wp01barcode");

                entity.Property(e => e.Wp01showjobduration).HasColumnName("wp01showjobduration");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblSetting1)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSetting_fk_projectid");
            });

            modelBuilder.Entity<TblShortcode>(entity =>
            {
                entity.HasKey(e => e.PkShortcodeid);

                entity.ToTable("tblShortcode");

                entity.HasIndex(e => e.FkEquipmentcodeid);

                entity.HasIndex(e => e.Shortcode)
                    .HasName("IX_tblShortcode")
                    .IsUnique();

                entity.HasIndex(e => e.ShortcodedescriptionL1)
                    .HasName("IX_tblShortcode2")
                    .IsUnique();

                entity.Property(e => e.PkShortcodeid).HasColumnName("pk_shortcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkEquipmentcodeid).HasColumnName("fk_equipmentcodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Shortcode)
                    .IsRequired()
                    .HasColumnName("shortcode")
                    .HasMaxLength(10);

                entity.Property(e => e.ShortcodedescriptionL1)
                    .IsRequired()
                    .HasColumnName("shortcodedescription_l1")
                    .HasMaxLength(250);

                entity.Property(e => e.ShortcodedescriptionL2)
                    .HasColumnName("shortcodedescription_l2")
                    .HasMaxLength(250);

                entity.Property(e => e.ShortcodedescriptionL3)
                    .HasColumnName("shortcodedescription_l3")
                    .HasMaxLength(250);

                entity.Property(e => e.ShortcodedescriptionL4)
                    .HasColumnName("shortcodedescription_l4")
                    .HasMaxLength(250);

                entity.Property(e => e.ShortcodedescriptionL5)
                    .HasColumnName("shortcodedescription_l5")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkEquipmentcode)
                    .WithMany(p => p.TblShortcode)
                    .HasForeignKey(d => d.FkEquipmentcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcode_tblEquipmentCode");
            });

            modelBuilder.Entity<TblShortcodeHoGroupSub>(entity =>
            {
                entity.HasKey(e => e.PkShortcodehogroupsubid);

                entity.ToTable("tblShortcodeHoGroupSub", "rsy");

                entity.HasIndex(e => e.FkHogroupsubid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => new { e.FkShortcodeid, e.FkHogroupsubid, e.FkProjectid })
                    .HasName("IX_tblShortcodeHoGroupSub_U1")
                    .IsUnique();

                entity.Property(e => e.PkShortcodehogroupsubid).HasColumnName("pk_shortcodehogroupsubid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHogroupsubid).HasColumnName("fk_hogroupsubid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkHogroupsub)
                    .WithMany(p => p.TblShortcodeHoGroupSub)
                    .HasForeignKey(d => d.FkHogroupsubid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeHoGroupSub_tblHandoverGroupSub");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblShortcodeHoGroupSub)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeHoGroupSub_fk_projectid");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblShortcodeHoGroupSub)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeHoGroupSub_fk_shortcodeid");
            });

            modelBuilder.Entity<TblShortcodeQaqcQuicklist>(entity =>
            {
                entity.HasKey(e => e.PkShortcodeqaqcquicklistid);

                entity.ToTable("tblShortcodeQaqcQuicklist", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkQaqcquicklistid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => new { e.FkShortcodeid, e.FkQaqcquicklistid, e.FkProjectid })
                    .HasName("IX_tblShortcodeQaqcQuicklist_U1")
                    .IsUnique();

                entity.Property(e => e.PkShortcodeqaqcquicklistid).HasColumnName("pk_shortcodeqaqcquicklistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkQaqcquicklistid).HasColumnName("fk_qaqcquicklistid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblShortcodeQaqcQuicklist)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeQaqcQuicklist_fk_projectid");

                entity.HasOne(d => d.FkQaqcquicklist)
                    .WithMany(p => p.TblShortcodeQaqcQuicklist)
                    .HasForeignKey(d => d.FkQaqcquicklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeQaqcQuicklist_tblQaqcQuicklist");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblShortcodeQaqcQuicklist)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeQaqcQuicklist_fk_shortcodeid");
            });

            modelBuilder.Entity<TblShortcodeTemplate>(entity =>
            {
                entity.HasKey(e => e.PkShortcodetemplateid);

                entity.ToTable("tblShortcodeTemplate", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => new { e.FkShortcodeid, e.FkProjectid, e.Templatedescr })
                    .HasName("IX_tblShortcodeTemplate_U2")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkShortcodeid, e.FkProjectid, e.Templatenr })
                    .HasName("IX_tblShortcodeTemplate_U1")
                    .IsUnique();

                entity.Property(e => e.PkShortcodetemplateid).HasColumnName("pk_shortcodetemplateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.Isdefaulttemplate).HasColumnName("isdefaulttemplate");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Templatedescr)
                    .HasColumnName("templatedescr")
                    .HasMaxLength(100);

                entity.Property(e => e.Templatenr)
                    .IsRequired()
                    .HasColumnName("templatenr")
                    .HasMaxLength(4);

                entity.Property(e => e.Wpholderhrs)
                    .HasColumnName("wpholderhrs")
                    .HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblShortcodeTemplate)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeTemplate_fk_projectid");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblShortcodeTemplate)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeTemplate_fk_shortcodeid");
            });

            modelBuilder.Entity<TblShortcodeTemplateWpcode>(entity =>
            {
                entity.HasKey(e => e.PkShortcodetemplatewpcodeid);

                entity.ToTable("tblShortcodeTemplateWpcode", "rsy");

                entity.HasIndex(e => e.FkShortcodetemplateid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkpreparationcodeid)
                    .HasName("IX_tblShortcodeTemplateWpcode_fk_wpcodeid");

                entity.HasIndex(e => new { e.FkShortcodetemplateid, e.FkWorkpreparationcodeid })
                    .HasName("IX_tblShortcodeTemplateWpcode_U1")
                    .IsUnique();

                entity.Property(e => e.PkShortcodetemplatewpcodeid).HasColumnName("pk_shortcodetemplatewpcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkShortcodetemplateid).HasColumnName("fk_shortcodetemplateid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkpreparationcodeid).HasColumnName("fk_workpreparationcodeid");

                entity.Property(e => e.Hours)
                    .HasColumnName("hours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Isroute).HasColumnName("isroute");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkShortcodetemplate)
                    .WithMany(p => p.TblShortcodeTemplateWpcode)
                    .HasForeignKey(d => d.FkShortcodetemplateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeTemplateWpcode_fk_shortcodetemplateid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblShortcodeTemplateWpcode)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblShortcodeTemplateWpcode_fk_userid");

                entity.HasOne(d => d.FkWorkpreparationcode)
                    .WithMany(p => p.TblShortcodeTemplateWpcode)
                    .HasForeignKey(d => d.FkWorkpreparationcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblShortcodeTemplateWpcode_fk_workpreparationcodeid");
            });

            modelBuilder.Entity<TblSignboxes>(entity =>
            {
                entity.HasKey(e => e.PkSignboxesid);

                entity.ToTable("tblSignboxes");

                entity.Property(e => e.PkSignboxesid).HasColumnName("pk_signboxesid");

                entity.Property(e => e.Applicationenum).HasColumnName("applicationenum");

                entity.Property(e => e.Blindliststatusenum).HasColumnName("blindliststatusenum");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Displayorder).HasColumnName("displayorder");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Reportname)
                    .IsRequired()
                    .HasColumnName("reportname")
                    .HasMaxLength(150);

                entity.Property(e => e.Signboxname)
                    .IsRequired()
                    .HasColumnName("signboxname")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<TblSnapshot>(entity =>
            {
                entity.HasKey(e => e.PkSnapshotid);

                entity.ToTable("tblSnapshot");

                entity.HasIndex(e => e.FkProjectid)
                    .HasName("IX_tblSnapShot_fk_projectid");

                entity.Property(e => e.PkSnapshotid).HasColumnName("pk_snapshotid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Snapshotcolor).HasColumnName("snapshotcolor");

                entity.Property(e => e.Snapshotname)
                    .IsRequired()
                    .HasColumnName("snapshotname")
                    .HasMaxLength(50);

                entity.Property(e => e.Snapshotstatus).HasColumnName("snapshotstatus");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblSnapshot)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("fk_projectid_tblsnapshot");
            });

            modelBuilder.Entity<TblSnapshotMilestone>(entity =>
            {
                entity.HasKey(e => e.PkSnapshotmilestoneid);

                entity.ToTable("tblSnapshotMilestone");

                entity.HasIndex(e => e.FkMilestoneid)
                    .HasName("IX_tblSnapshotMilestone_fk_snapshotid");

                entity.HasIndex(e => new { e.FkSnapshotid, e.FkMilestoneid })
                    .HasName("uc_tblSnapshotMilestone_fk_snapshotid_fk_milestoneid")
                    .IsUnique();

                entity.Property(e => e.PkSnapshotmilestoneid).HasColumnName("pk_snapshotmilestoneid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Earlystart)
                    .HasColumnName("earlystart")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkMilestoneid).HasColumnName("fk_milestoneid");

                entity.Property(e => e.FkSnapshotid).HasColumnName("fk_snapshotid");

                entity.Property(e => e.Freefloat).HasColumnName("freefloat");

                entity.Property(e => e.Latestart)
                    .HasColumnName("latestart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Plannedstart)
                    .HasColumnName("plannedstart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Totalfloat).HasColumnName("totalfloat");

                entity.HasOne(d => d.FkMilestone)
                    .WithMany(p => p.TblSnapshotMilestone)
                    .HasForeignKey(d => d.FkMilestoneid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SnapshotMilestone_tblmilestone_fk_milestoneid");
            });

            modelBuilder.Entity<TblSnapshotScopeJob>(entity =>
            {
                entity.HasKey(e => e.PkSnapshotscopejobid);

                entity.ToTable("tblSnapshotScopeJob");

                entity.HasIndex(e => e.FkScopejobid);

                entity.HasIndex(e => e.FkSnapshotid);

                entity.HasIndex(e => new { e.FkSnapshotid, e.FkScopejobid })
                    .HasName("uc_tblSnapshotScopeJob_fk_snapshotid_fk_scopejobid")
                    .IsUnique();

                entity.Property(e => e.PkSnapshotscopejobid).HasColumnName("pk_snapshotscopejobid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Earlyfinish)
                    .HasColumnName("earlyfinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Earlystart)
                    .HasColumnName("earlystart")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkScopejobid).HasColumnName("fk_scopejobid");

                entity.Property(e => e.FkSnapshotid).HasColumnName("fk_snapshotid");

                entity.Property(e => e.Freefloat).HasColumnName("freefloat");

                entity.Property(e => e.Latefinish)
                    .HasColumnName("latefinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Latestart)
                    .HasColumnName("latestart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Plannedfinish)
                    .HasColumnName("plannedfinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Plannedstart)
                    .HasColumnName("plannedstart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Totalfloat).HasColumnName("totalfloat");

                entity.HasOne(d => d.FkScopejob)
                    .WithMany(p => p.TblSnapshotScopeJob)
                    .HasForeignKey(d => d.FkScopejobid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_scopejobid_tblscopejob");

                entity.HasOne(d => d.FkSnapshot)
                    .WithMany(p => p.TblSnapshotScopeJob)
                    .HasForeignKey(d => d.FkSnapshotid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_snapshotid_tblsnapshot");
            });

            modelBuilder.Entity<TblSubDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkSubdisciplineid);

                entity.ToTable("tblSubDiscipline");

                entity.HasIndex(e => e.FkMaindisciplineid);

                entity.HasIndex(e => e.Subdisciplinecode)
                    .HasName("UK_tblSubDiscipline_code")
                    .IsUnique();

                entity.HasIndex(e => e.SubdisciplinedescriptionL1)
                    .HasName("UK_tblSubDiscipline_description")
                    .IsUnique();

                entity.Property(e => e.PkSubdisciplineid).HasColumnName("pk_subdisciplineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaindisciplineid).HasColumnName("fk_maindisciplineid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Normbasetype)
                    .HasColumnName("normbasetype")
                    .HasColumnType("char(1)");

                entity.Property(e => e.Subdisciplinecode)
                    .IsRequired()
                    .HasColumnName("subdisciplinecode")
                    .HasMaxLength(50);

                entity.Property(e => e.SubdisciplinedescriptionL1)
                    .IsRequired()
                    .HasColumnName("subdisciplinedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.SubdisciplinedescriptionL2)
                    .HasColumnName("subdisciplinedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.SubdisciplinedescriptionL3)
                    .HasColumnName("subdisciplinedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.SubdisciplinedescriptionL4)
                    .HasColumnName("subdisciplinedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.SubdisciplinedescriptionL5)
                    .HasColumnName("subdisciplinedescription_l5")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkMaindiscipline)
                    .WithMany(p => p.TblSubDiscipline)
                    .HasForeignKey(d => d.FkMaindisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSubDiscipline_tblMainDiscipline");
            });

            modelBuilder.Entity<TblSubMaterialGroup>(entity =>
            {
                entity.HasKey(e => e.PkSubmaterialgroupid);

                entity.ToTable("tblSubMaterialGroup");

                entity.HasIndex(e => e.FkMainmaterialgroupid);

                entity.HasIndex(e => new { e.Submatgroupcode, e.FkMainmaterialgroupid })
                    .HasName("IX_tblMaterialGroup")
                    .IsUnique();

                entity.Property(e => e.PkSubmaterialgroupid).HasColumnName("pk_submaterialgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMainmaterialgroupid).HasColumnName("fk_mainmaterialgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.SubmaterialgroupdescriptionL1)
                    .IsRequired()
                    .HasColumnName("submaterialgroupdescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.SubmaterialgroupdescriptionL2)
                    .HasColumnName("submaterialgroupdescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.SubmaterialgroupdescriptionL3)
                    .HasColumnName("submaterialgroupdescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.SubmaterialgroupdescriptionL4)
                    .HasColumnName("submaterialgroupdescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.SubmaterialgroupdescriptionL5)
                    .HasColumnName("submaterialgroupdescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Submatgroupcode)
                    .IsRequired()
                    .HasColumnName("submatgroupcode")
                    .HasMaxLength(10);

                entity.HasOne(d => d.FkMainmaterialgroup)
                    .WithMany(p => p.TblSubMaterialGroup)
                    .HasForeignKey(d => d.FkMainmaterialgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSubMaterialGroup_tblMainMaterialGroup");
            });

            modelBuilder.Entity<TblSubPhase>(entity =>
            {
                entity.HasKey(e => e.PkSubphaseid);

                entity.ToTable("tblSubPhase");

                entity.HasIndex(e => e.Subphasecode)
                    .HasName("uc_subphasecode")
                    .IsUnique();

                entity.HasIndex(e => e.SubphasedescriptionL1)
                    .HasName("uc_subphasedescription")
                    .IsUnique();

                entity.Property(e => e.PkSubphaseid).HasColumnName("pk_subphaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Subphasecode)
                    .IsRequired()
                    .HasColumnName("subphasecode")
                    .HasMaxLength(2);

                entity.Property(e => e.SubphasedescriptionL1)
                    .IsRequired()
                    .HasColumnName("subphasedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.SubphasedescriptionL2)
                    .HasColumnName("subphasedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.SubphasedescriptionL3)
                    .HasColumnName("subphasedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.SubphasedescriptionL4)
                    .HasColumnName("subphasedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.SubphasedescriptionL5)
                    .HasColumnName("subphasedescription_l5")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblSubProject>(entity =>
            {
                entity.HasKey(e => e.PkSubprojectid);

                entity.ToTable("tblSubProject");

                entity.HasIndex(e => e.FkCalendarid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.PkSubprojectid);

                entity.HasIndex(e => new { e.Subprojectname, e.FkProjectid })
                    .HasName("subprojectname")
                    .IsUnique();

                entity.Property(e => e.PkSubprojectid).HasColumnName("pk_subprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCalendarid).HasColumnName("fk_calendarid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.Property(e => e.Subprojectearlyfinish)
                    .HasColumnName("subprojectearlyfinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subprojectearlystart)
                    .HasColumnName("subprojectearlystart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subprojectlatefinish)
                    .HasColumnName("subprojectlatefinish")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subprojectlatestart)
                    .HasColumnName("subprojectlatestart")
                    .HasColumnType("datetime");

                entity.Property(e => e.Subprojectname)
                    .IsRequired()
                    .HasColumnName("subprojectname")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkCalendar)
                    .WithMany(p => p.TblSubProject)
                    .HasForeignKey(d => d.FkCalendarid)
                    .HasConstraintName("FK_tblsubproject_tblCalendar");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblSubProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblSubProject_tblProject");
            });

            modelBuilder.Entity<TblSubSbs>(entity =>
            {
                entity.HasKey(e => e.PkSubsbsid);

                entity.ToTable("tblSubSBS");

                entity.HasIndex(e => e.Exportcode)
                    .HasName("UK_tblSubSBS_exportcode")
                    .IsUnique();

                entity.HasIndex(e => e.FkMainsbsid);

                entity.HasIndex(e => new { e.FkMainsbsid, e.Subsbscode })
                    .HasName("UK_tblSubSBS_code")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkMainsbsid, e.Subsbsdescription })
                    .HasName("UK_tblSubSBS_description")
                    .IsUnique();

                entity.Property(e => e.PkSubsbsid).HasColumnName("pk_subsbsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Exportcode)
                    .IsRequired()
                    .HasColumnName("exportcode")
                    .HasColumnType("char(3)");

                entity.Property(e => e.FkMainsbsid).HasColumnName("fk_mainsbsid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Subsbscode)
                    .IsRequired()
                    .HasColumnName("subsbscode")
                    .HasMaxLength(100);

                entity.Property(e => e.Subsbsdescription)
                    .IsRequired()
                    .HasColumnName("subsbsdescription")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkMainsbs)
                    .WithMany(p => p.TblSubSbs)
                    .HasForeignKey(d => d.FkMainsbsid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSubSBS_tblMainSBS");
            });

            modelBuilder.Entity<TblSubToolsAndConsumablesGroup>(entity =>
            {
                entity.HasKey(e => e.PkSubtoolsandconsumablesgroupid);

                entity.ToTable("tblSubToolsAndConsumablesGroup");

                entity.HasIndex(e => e.FkMaintoolsandconsumablesgroupid);

                entity.Property(e => e.PkSubtoolsandconsumablesgroupid).HasColumnName("pk_subtoolsandconsumablesgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaintoolsandconsumablesgroupid).HasColumnName("fk_maintoolsandconsumablesgroupid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Subtoolsandconsumablesgroupcode)
                    .IsRequired()
                    .HasColumnName("subtoolsandconsumablesgroupcode")
                    .HasMaxLength(10);

                entity.Property(e => e.SubtoolsandconsumablesgroupdescriptionL1)
                    .IsRequired()
                    .HasColumnName("subtoolsandconsumablesgroupdescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.SubtoolsandconsumablesgroupdescriptionL2)
                    .HasColumnName("subtoolsandconsumablesgroupdescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.SubtoolsandconsumablesgroupdescriptionL3)
                    .HasColumnName("subtoolsandconsumablesgroupdescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.SubtoolsandconsumablesgroupdescriptionL4)
                    .HasColumnName("subtoolsandconsumablesgroupdescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.SubtoolsandconsumablesgroupdescriptionL5)
                    .HasColumnName("subtoolsandconsumablesgroupdescription_l5")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkMaintoolsandconsumablesgroup)
                    .WithMany(p => p.TblSubToolsAndConsumablesGroup)
                    .HasForeignKey(d => d.FkMaintoolsandconsumablesgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSubToolsAndConsumablesGroup_tblMainToolsAndConsumablesGroup");
            });

            modelBuilder.Entity<TblSymbol>(entity =>
            {
                entity.HasKey(e => e.PkSymbolid);

                entity.ToTable("tblSymbol");

                entity.HasIndex(e => e.FkSymbolcategoryid);

                entity.HasIndex(e => e.Symbolcode)
                    .HasName("UK_tblSymbol_code")
                    .IsUnique();

                entity.Property(e => e.PkSymbolid).HasColumnName("pk_symbolid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkSymbolcategoryid).HasColumnName("fk_symbolcategoryid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Symbolcode)
                    .IsRequired()
                    .HasColumnName("symbolcode")
                    .HasMaxLength(50);

                entity.Property(e => e.SymboldescriptionL1)
                    .IsRequired()
                    .HasColumnName("symboldescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.SymboldescriptionL2)
                    .HasColumnName("symboldescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.SymboldescriptionL3)
                    .HasColumnName("symboldescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.SymboldescriptionL4)
                    .HasColumnName("symboldescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.SymboldescriptionL5)
                    .HasColumnName("symboldescription_l5")
                    .HasMaxLength(100);

                entity.Property(e => e.Symbolimage).HasColumnName("symbolimage");

                entity.HasOne(d => d.FkSymbolcategory)
                    .WithMany(p => p.TblSymbol)
                    .HasForeignKey(d => d.FkSymbolcategoryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblSymbol_tblSymbolCategory");
            });

            modelBuilder.Entity<TblSymbolCategory>(entity =>
            {
                entity.HasKey(e => e.PkSymbolcategoryid);

                entity.ToTable("tblSymbolCategory");

                entity.Property(e => e.PkSymbolcategoryid).HasColumnName("pk_symbolcategoryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Symbolcategorycode)
                    .IsRequired()
                    .HasColumnName("symbolcategorycode")
                    .HasMaxLength(10);

                entity.Property(e => e.SymbolcategorydescriptionL1)
                    .IsRequired()
                    .HasColumnName("symbolcategorydescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.SymbolcategorydescriptionL2)
                    .HasColumnName("symbolcategorydescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.SymbolcategorydescriptionL3)
                    .HasColumnName("symbolcategorydescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.SymbolcategorydescriptionL4)
                    .HasColumnName("symbolcategorydescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.SymbolcategorydescriptionL5)
                    .HasColumnName("symbolcategorydescription_l5")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblSyncChanged>(entity =>
            {
                entity.HasKey(e => e.PkSyncchangedid);

                entity.ToTable("tblSyncChanged");

                entity.HasIndex(e => new { e.Syncchangeddatabaseid, e.Syncchangedtype, e.Syncchangedtypename })
                    .HasName("UK_SyncTypeDatabaseId")
                    .IsUnique();

                entity.Property(e => e.PkSyncchangedid).HasColumnName("pk_syncchangedid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Syncchangeddatabaseid).HasColumnName("syncchangeddatabaseid");

                entity.Property(e => e.Syncchangedhash)
                    .IsRequired()
                    .HasColumnName("syncchangedhash");

                entity.Property(e => e.Syncchangedtype).HasColumnName("syncchangedtype");

                entity.Property(e => e.Syncchangedtypename)
                    .HasColumnName("syncchangedtypename")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblSystemLog>(entity =>
            {
                entity.HasKey(e => e.PkSystemlogid);

                entity.ToTable("tblSystemLog");

                entity.Property(e => e.PkSystemlogid).HasColumnName("pk_systemlogid");

                entity.Property(e => e.Application)
                    .IsRequired()
                    .HasColumnName("application")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Functionname)
                    .IsRequired()
                    .HasColumnName("functionname")
                    .HasMaxLength(50);

                entity.Property(e => e.Logaction)
                    .IsRequired()
                    .HasColumnName("logaction")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnName("username")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<TblTarget>(entity =>
            {
                entity.HasKey(e => e.PkTargetid);

                entity.ToTable("tblTarget");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Targetnr })
                    .HasName("IX_tblTarget")
                    .IsUnique();

                entity.Property(e => e.PkTargetid).HasColumnName("pk_targetid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(100);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Targetcolor).HasColumnName("targetcolor");

                entity.Property(e => e.Targetnr).HasColumnName("targetnr");

                entity.Property(e => e.Targetstatus).HasColumnName("targetstatus");

                entity.Property(e => e.Updatetobaseline).HasColumnName("updatetobaseline");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblTarget)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTarget_tblProject");
            });

            modelBuilder.Entity<TblTemplateBlindPoint>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointid);

                entity.ToTable("tblTemplateBlindPoint");

                entity.HasIndex(e => e.Blindpointno)
                    .HasName("UK_tblTemplateBlindPoint_blindpointno")
                    .IsUnique();

                entity.HasIndex(e => e.FkAdditionalboltdiameterdiaid);

                entity.HasIndex(e => e.FkAdditionalboltdiameterdnid);

                entity.HasIndex(e => e.FkAdditionalbolttypeid);

                entity.HasIndex(e => e.FkBlindlisttypeid);

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.HasIndex(e => e.FkBoltBasematerialid);

                entity.HasIndex(e => e.FkBoltCertificateid);

                entity.HasIndex(e => e.FkBoltareaUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltdiameterdiaid);

                entity.HasIndex(e => e.FkBoltdiameterdnid);

                entity.HasIndex(e => e.FkBoltelongationUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltingid);

                entity.HasIndex(e => e.FkBoltlgripUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltlimitsUnitofmeasurementid);

                entity.HasIndex(e => e.FkBoltstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttensioncheckUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttensiontightenUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttorqmaxvalueUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttorqvalueUnitofmeasurementid);

                entity.HasIndex(e => e.FkBolttypeid);

                entity.HasIndex(e => e.FkBreaklooseUnitofmeasurementid);

                entity.HasIndex(e => e.FkCompressionidUnitofmeasurementid);

                entity.HasIndex(e => e.FkConnectionid);

                entity.HasIndex(e => e.FkCriticalityid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkElevationid);

                entity.HasIndex(e => e.FkFinalreqboltstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkFinalreqstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkFlangeBasematerialid);

                entity.HasIndex(e => e.FkFlangesubtypeid);

                entity.HasIndex(e => e.FkFlangetypeid);

                entity.HasIndex(e => e.FkFrictionid);

                entity.HasIndex(e => e.FkGasketBasematerialid);

                entity.HasIndex(e => e.FkGaskettypeid);

                entity.HasIndex(e => e.FkGridid);

                entity.HasIndex(e => e.FkGriplengthUnitofmeasurementid);

                entity.HasIndex(e => e.FkJackpressureUnitofmeasurementid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkLubricantid);

                entity.HasIndex(e => e.FkMaterialpipespecid);

                entity.HasIndex(e => e.FkMaxoffsetflangefacesid);

                entity.HasIndex(e => e.FkMaxtensioningpressUnitofmeasurementid);

                entity.HasIndex(e => e.FkNutBasematerialid);

                entity.HasIndex(e => e.FkPass1Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass2Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass3Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass4Unitofmeasurementid);

                entity.HasIndex(e => e.FkPass5Unitofmeasurementid);

                entity.HasIndex(e => e.FkPipelineid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkPumpsettingUnitofmeasurementid);

                entity.HasIndex(e => e.FkQaqcreportid);

                entity.HasIndex(e => e.FkRelaxationfactorUnitofmeasurementid);

                entity.HasIndex(e => e.FkReqboltloadUnitofmeasurementid);

                entity.HasIndex(e => e.FkResidualboltstressUnitofmeasurementid);

                entity.HasIndex(e => e.FkResidualbolttensionUnitofmeasurementid);

                entity.HasIndex(e => e.FkRingjointid);

                entity.HasIndex(e => e.FkSubsbsid1);

                entity.HasIndex(e => e.FkSubsbsid2);

                entity.HasIndex(e => e.FkSubsbsid3);

                entity.HasIndex(e => e.FkSwUnitofmeasurementid);

                entity.HasIndex(e => e.FkTensioningvalueAUnitofmeasurementid);

                entity.HasIndex(e => e.FkTensioningvalueBUnitofmeasurementid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => e.FkThreadformid);

                entity.HasIndex(e => e.FkToolareaUnitofmeasurementid);

                entity.HasIndex(e => e.FkTorqtypeid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWashersBasematerialid);

                entity.HasIndex(e => e.FkWashersthkUnitofmeasurementid);

                entity.HasIndex(e => e.FkWeldnormid);

                entity.HasIndex(e => e.FkYieldpointUnitofmeasurementid);

                entity.Property(e => e.PkTemplateblindpointid).HasColumnName("pk_templateblindpointid");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.Additionalboltlengthinch)
                    .HasColumnName("additionalboltlengthinch")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Additionalboltlengthmm)
                    .HasColumnName("additionalboltlengthmm")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Additionalboltqty).HasColumnName("additionalboltqty");

                entity.Property(e => e.Additionalboltsqty).HasColumnName("additionalboltsqty");

                entity.Property(e => e.Blindpointdescription)
                    .HasColumnName("blindpointdescription")
                    .HasMaxLength(150);

                entity.Property(e => e.Blindpointno)
                    .IsRequired()
                    .HasColumnName("blindpointno")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltarea)
                    .HasColumnName("boltarea")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltarticleno).HasColumnName("boltarticleno");

                entity.Property(e => e.Boltelongation)
                    .HasColumnName("boltelongation")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltelongationmethod)
                    .HasColumnName("boltelongationmethod")
                    .HasMaxLength(100);

                entity.Property(e => e.Boltingapprovedby)
                    .HasColumnName("boltingapprovedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltingapproveddate)
                    .HasColumnName("boltingapproveddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Boltlengthinch)
                    .HasColumnName("boltlengthinch")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltlengthmm)
                    .HasColumnName("boltlengthmm")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Boltlgrip)
                    .HasColumnName("boltlgrip")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltlimits)
                    .HasColumnName("boltlimits")
                    .HasMaxLength(50);

                entity.Property(e => e.Boltqty).HasColumnName("boltqty");

                entity.Property(e => e.Boltstress).HasColumnName("boltstress");

                entity.Property(e => e.Bolttensioncheck).HasColumnName("bolttensioncheck");

                entity.Property(e => e.Bolttensiontighten).HasColumnName("bolttensiontighten");

                entity.Property(e => e.Bolttorqmaxvalue).HasColumnName("bolttorqmaxvalue");

                entity.Property(e => e.Bolttorqvalue)
                    .HasColumnName("bolttorqvalue")
                    .HasMaxLength(50);

                entity.Property(e => e.Breakloosepressure).HasColumnName("breakloosepressure");

                entity.Property(e => e.Compression).HasColumnName("compression");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Elevationexact)
                    .HasColumnName("elevationexact")
                    .HasMaxLength(50);

                entity.Property(e => e.Finalreqboltstress).HasColumnName("finalreqboltstress");

                entity.Property(e => e.Finalreqstress).HasColumnName("finalreqstress");

                entity.Property(e => e.FkAdditionalboltdiameterdiaid).HasColumnName("fk_additionalboltdiameterdiaid");

                entity.Property(e => e.FkAdditionalboltdiameterdnid).HasColumnName("fk_additionalboltdiameterdnid");

                entity.Property(e => e.FkAdditionalbolttypeid).HasColumnName("fk_additionalbolttypeid");

                entity.Property(e => e.FkBlindlisttypeid).HasColumnName("fk_blindlisttypeid");

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.FkBoltBasematerialid).HasColumnName("fk_bolt_basematerialid");

                entity.Property(e => e.FkBoltCertificateid).HasColumnName("fk_bolt_certificateid");

                entity.Property(e => e.FkBoltareaUnitofmeasurementid).HasColumnName("fk_boltarea_unitofmeasurementid");

                entity.Property(e => e.FkBoltdiameterdiaid).HasColumnName("fk_boltdiameterdiaid");

                entity.Property(e => e.FkBoltdiameterdnid).HasColumnName("fk_boltdiameterdnid");

                entity.Property(e => e.FkBoltelongationUnitofmeasurementid).HasColumnName("fk_boltelongation_unitofmeasurementid");

                entity.Property(e => e.FkBoltingid).HasColumnName("fk_boltingid");

                entity.Property(e => e.FkBoltlgripUnitofmeasurementid).HasColumnName("fk_boltlgrip_unitofmeasurementid");

                entity.Property(e => e.FkBoltlimitsUnitofmeasurementid).HasColumnName("fk_boltlimits_unitofmeasurementid");

                entity.Property(e => e.FkBoltstressUnitofmeasurementid).HasColumnName("fk_boltstress_unitofmeasurementid");

                entity.Property(e => e.FkBolttensioncheckUnitofmeasurementid).HasColumnName("fk_bolttensioncheck_unitofmeasurementid");

                entity.Property(e => e.FkBolttensiontightenUnitofmeasurementid).HasColumnName("fk_bolttensiontighten_unitofmeasurementid");

                entity.Property(e => e.FkBolttorqmaxvalueUnitofmeasurementid).HasColumnName("fk_bolttorqmaxvalue_unitofmeasurementid");

                entity.Property(e => e.FkBolttorqvalueUnitofmeasurementid).HasColumnName("fk_bolttorqvalue_unitofmeasurementid");

                entity.Property(e => e.FkBolttypeid).HasColumnName("fk_bolttypeid");

                entity.Property(e => e.FkBreaklooseUnitofmeasurementid).HasColumnName("fk_breakloose_unitofmeasurementid");

                entity.Property(e => e.FkCompressionidUnitofmeasurementid).HasColumnName("fk_compressionid_unitofmeasurementid");

                entity.Property(e => e.FkConnectionid).HasColumnName("fk_connectionid");

                entity.Property(e => e.FkCriticalityid).HasColumnName("fk_criticalityid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkElevationid).HasColumnName("fk_elevationid");

                entity.Property(e => e.FkFinalreqboltstressUnitofmeasurementid).HasColumnName("fk_finalreqboltstress_unitofmeasurementid");

                entity.Property(e => e.FkFinalreqstressUnitofmeasurementid).HasColumnName("fk_finalreqstress_unitofmeasurementid");

                entity.Property(e => e.FkFlangeBasematerialid).HasColumnName("fk_flange_basematerialid");

                entity.Property(e => e.FkFlangesubtypeid).HasColumnName("fk_flangesubtypeid");

                entity.Property(e => e.FkFlangetypeid).HasColumnName("fk_flangetypeid");

                entity.Property(e => e.FkFrictionid).HasColumnName("fk_frictionid");

                entity.Property(e => e.FkGasketBasematerialid).HasColumnName("fk_gasket_basematerialid");

                entity.Property(e => e.FkGaskettypeid).HasColumnName("fk_gaskettypeid");

                entity.Property(e => e.FkGridid).HasColumnName("fk_gridid");

                entity.Property(e => e.FkGriplengthUnitofmeasurementid).HasColumnName("fk_griplength_unitofmeasurementid");

                entity.Property(e => e.FkJackpressureUnitofmeasurementid).HasColumnName("fk_jackpressure_unitofmeasurementid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkLubricantid).HasColumnName("fk_lubricantid");

                entity.Property(e => e.FkMaterialpipespecid).HasColumnName("fk_materialpipespecid");

                entity.Property(e => e.FkMaxoffsetflangefacesid).HasColumnName("fk_maxoffsetflangefacesid");

                entity.Property(e => e.FkMaxtensioningpressUnitofmeasurementid).HasColumnName("fk_maxtensioningpress_unitofmeasurementid");

                entity.Property(e => e.FkNutBasematerialid).HasColumnName("fk_nut_basematerialid");

                entity.Property(e => e.FkPass1Unitofmeasurementid).HasColumnName("fk_pass1_unitofmeasurementid");

                entity.Property(e => e.FkPass2Unitofmeasurementid).HasColumnName("fk_pass2_unitofmeasurementid");

                entity.Property(e => e.FkPass3Unitofmeasurementid).HasColumnName("fk_pass3_unitofmeasurementid");

                entity.Property(e => e.FkPass4Unitofmeasurementid).HasColumnName("fk_pass4_unitofmeasurementid");

                entity.Property(e => e.FkPass5Unitofmeasurementid).HasColumnName("fk_pass5_unitofmeasurementid");

                entity.Property(e => e.FkPipelineid).HasColumnName("fk_pipelineid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkPumpsettingUnitofmeasurementid).HasColumnName("fk_pumpsetting_unitofmeasurementid");

                entity.Property(e => e.FkQaqcreportid).HasColumnName("fk_qaqcreportid");

                entity.Property(e => e.FkRelaxationfactorUnitofmeasurementid).HasColumnName("fk_relaxationfactor_unitofmeasurementid");

                entity.Property(e => e.FkReqboltloadUnitofmeasurementid).HasColumnName("fk_reqboltload_unitofmeasurementid");

                entity.Property(e => e.FkResidualboltstressUnitofmeasurementid).HasColumnName("fk_residualboltstress_unitofmeasurementid");

                entity.Property(e => e.FkResidualbolttensionUnitofmeasurementid).HasColumnName("fk_residualbolttension_unitofmeasurementid");

                entity.Property(e => e.FkRingjointid).HasColumnName("fk_ringjointid");

                entity.Property(e => e.FkSubsbsid1).HasColumnName("fk_subsbsid1");

                entity.Property(e => e.FkSubsbsid2).HasColumnName("fk_subsbsid2");

                entity.Property(e => e.FkSubsbsid3).HasColumnName("fk_subsbsid3");

                entity.Property(e => e.FkSwUnitofmeasurementid).HasColumnName("fk_sw_unitofmeasurementid");

                entity.Property(e => e.FkTensioningvalueAUnitofmeasurementid).HasColumnName("fk_tensioningvalue_a_unitofmeasurementid");

                entity.Property(e => e.FkTensioningvalueBUnitofmeasurementid).HasColumnName("fk_tensioningvalue_b_unitofmeasurementid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.FkThreadformid).HasColumnName("fk_threadformid");

                entity.Property(e => e.FkToolareaUnitofmeasurementid).HasColumnName("fk_toolarea_unitofmeasurementid");

                entity.Property(e => e.FkTorqtypeid).HasColumnName("fk_torqtypeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWashersBasematerialid).HasColumnName("fk_washers_basematerialid");

                entity.Property(e => e.FkWashersthkUnitofmeasurementid).HasColumnName("fk_washersthk_unitofmeasurementid");

                entity.Property(e => e.FkWeldnormid).HasColumnName("fk_weldnormid");

                entity.Property(e => e.FkYieldpointUnitofmeasurementid).HasColumnName("fk_yieldpoint_unitofmeasurementid");

                entity.Property(e => e.Flangeno)
                    .HasColumnName("flangeno")
                    .HasMaxLength(50);

                entity.Property(e => e.Gasketarticlenumer).HasColumnName("gasketarticlenumer");

                entity.Property(e => e.Gasketid)
                    .HasColumnName("gasketid")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Gasketod)
                    .HasColumnName("gasketod")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Gasketthk).HasColumnName("gasketthk");

                entity.Property(e => e.Griplength).HasColumnName("griplength");

                entity.Property(e => e.Hazards)
                    .HasColumnName("hazards")
                    .HasMaxLength(100);

                entity.Property(e => e.Isdeleted)
                    .HasColumnName("isdeleted")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jackpressuretouse).HasColumnName("jackpressuretouse");

                entity.Property(e => e.Linedflange)
                    .HasColumnName("linedflange")
                    .HasMaxLength(50);

                entity.Property(e => e.Liningtype)
                    .HasColumnName("liningtype")
                    .HasMaxLength(50);

                entity.Property(e => e.Location)
                    .HasColumnName("location")
                    .HasMaxLength(100);

                entity.Property(e => e.Maxtensioningpress).HasColumnName("maxtensioningpress");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(100);

                entity.Property(e => e.Normpostype).HasColumnName("normpostype");

                entity.Property(e => e.Nozzlenumber)
                    .HasColumnName("nozzlenumber")
                    .HasMaxLength(50);

                entity.Property(e => e.Numberoftensionersrequired).HasColumnName("numberoftensionersrequired");

                entity.Property(e => e.Pass1).HasColumnName("pass1");

                entity.Property(e => e.Pass1percentage).HasColumnName("pass1percentage");

                entity.Property(e => e.Pass2).HasColumnName("pass2");

                entity.Property(e => e.Pass2percentage).HasColumnName("pass2percentage");

                entity.Property(e => e.Pass3).HasColumnName("pass3");

                entity.Property(e => e.Pass3percentage).HasColumnName("pass3percentage");

                entity.Property(e => e.Pass4).HasColumnName("pass4");

                entity.Property(e => e.Pass4percentage).HasColumnName("pass4percentage");

                entity.Property(e => e.Pass5).HasColumnName("pass5");

                entity.Property(e => e.Pass5percentage).HasColumnName("pass5percentage");

                entity.Property(e => e.Protectioncap)
                    .HasColumnName("protectioncap")
                    .HasMaxLength(100);

                entity.Property(e => e.Pumpsetting).HasColumnName("pumpsetting");

                entity.Property(e => e.Refbox).HasColumnName("refbox");

                entity.Property(e => e.Refid)
                    .HasColumnName("refid")
                    .HasMaxLength(10);

                entity.Property(e => e.Relaxationfactor).HasColumnName("relaxationfactor");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(250);

                entity.Property(e => e.Reqboltload).HasColumnName("reqboltload");

                entity.Property(e => e.Requiredboltloadvalue).HasColumnName("requiredboltloadvalue");

                entity.Property(e => e.Residualboltstress).HasColumnName("residualboltstress");

                entity.Property(e => e.Residualbolttension).HasColumnName("residualbolttension");

                entity.Property(e => e.Reviewedby)
                    .HasColumnName("reviewedby")
                    .HasMaxLength(50);

                entity.Property(e => e.Revieweddate)
                    .HasColumnName("revieweddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rfididentifier)
                    .HasColumnName("rfididentifier")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Safetymemo)
                    .HasColumnName("safetymemo")
                    .HasMaxLength(500);

                entity.Property(e => e.Specialboltinfo)
                    .HasColumnName("specialboltinfo")
                    .HasMaxLength(100);

                entity.Property(e => e.Specialnote)
                    .HasColumnName("specialnote")
                    .HasMaxLength(200);

                entity.Property(e => e.Sw)
                    .HasColumnName("sw")
                    .HasMaxLength(50);

                entity.Property(e => e.Templateblindpointtype).HasColumnName("templateblindpointtype");

                entity.Property(e => e.Tensioningvaluea).HasColumnName("tensioningvaluea");

                entity.Property(e => e.Tensioningvalueb).HasColumnName("tensioningvalueb");

                entity.Property(e => e.Threadpitch)
                    .HasColumnName("threadpitch")
                    .HasMaxLength(50);

                entity.Property(e => e.Tightentorquedgreased).HasColumnName("tightentorquedgreased");

                entity.Property(e => e.Tightentorquedungreased).HasColumnName("tightentorquedungreased");

                entity.Property(e => e.Toolarea).HasColumnName("toolarea");

                entity.Property(e => e.Washersqty).HasColumnName("washersqty");

                entity.Property(e => e.Washersthk).HasColumnName("washersthk");

                entity.Property(e => e.Wpmemo)
                    .HasColumnName("wpmemo")
                    .HasMaxLength(500);

                entity.Property(e => e.Wrenchsizetype)
                    .HasColumnName("wrenchsizetype")
                    .HasMaxLength(50);

                entity.Property(e => e.Yieldpercentage).HasColumnName("yieldpercentage");

                entity.Property(e => e.Yieldpoint).HasColumnName("yieldpoint");

                entity.HasOne(d => d.FkAdditionalboltdiameterdia)
                    .WithMany(p => p.TblTemplateBlindPointFkAdditionalboltdiameterdia)
                    .HasForeignKey(d => d.FkAdditionalboltdiameterdiaid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblboltdiameterAdditionalDia");

                entity.HasOne(d => d.FkAdditionalboltdiameterdn)
                    .WithMany(p => p.TblTemplateBlindPointFkAdditionalboltdiameterdn)
                    .HasForeignKey(d => d.FkAdditionalboltdiameterdnid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblboltdiameterAdditionalDn");

                entity.HasOne(d => d.FkAdditionalbolttype)
                    .WithMany(p => p.TblTemplateBlindPointFkAdditionalbolttype)
                    .HasForeignKey(d => d.FkAdditionalbolttypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblAdditionalBoltType");

                entity.HasOne(d => d.FkBlindlisttype)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkBlindlisttypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBlindListType");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBlindType");

                entity.HasOne(d => d.FkBoltBasematerial)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltBasematerial)
                    .HasForeignKey(d => d.FkBoltBasematerialid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBaseMaterial3");

                entity.HasOne(d => d.FkBoltCertificate)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltCertificate)
                    .HasForeignKey(d => d.FkBoltCertificateid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBaseMaterial4");

                entity.HasOne(d => d.FkBoltareaUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltareaUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltareaUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement27");

                entity.HasOne(d => d.FkBoltdiameterdia)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltdiameterdia)
                    .HasForeignKey(d => d.FkBoltdiameterdiaid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblboltdiameterDia");

                entity.HasOne(d => d.FkBoltdiameterdn)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltdiameterdn)
                    .HasForeignKey(d => d.FkBoltdiameterdnid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblboltdiameterDn");

                entity.HasOne(d => d.FkBoltelongationUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltelongationUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltelongationUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement1");

                entity.HasOne(d => d.FkBolting)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkBoltingid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBolting");

                entity.HasOne(d => d.FkBoltlgripUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltlgripUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltlgripUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement30");

                entity.HasOne(d => d.FkBoltlimitsUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltlimitsUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltlimitsUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement28");

                entity.HasOne(d => d.FkBoltstressUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBoltstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkBoltstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement29");

                entity.HasOne(d => d.FkBolttensioncheckUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBolttensioncheckUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttensioncheckUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement7");

                entity.HasOne(d => d.FkBolttensiontightenUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBolttensiontightenUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttensiontightenUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement6");

                entity.HasOne(d => d.FkBolttorqmaxvalueUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBolttorqmaxvalueUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttorqmaxvalueUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement31");

                entity.HasOne(d => d.FkBolttorqvalueUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBolttorqvalueUnitofmeasurement)
                    .HasForeignKey(d => d.FkBolttorqvalueUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement32");

                entity.HasOne(d => d.FkBolttype)
                    .WithMany(p => p.TblTemplateBlindPointFkBolttype)
                    .HasForeignKey(d => d.FkBolttypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBoltType");

                entity.HasOne(d => d.FkBreaklooseUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkBreaklooseUnitofmeasurement)
                    .HasForeignKey(d => d.FkBreaklooseUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement5");

                entity.HasOne(d => d.FkCompressionidUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkCompressionidUnitofmeasurement)
                    .HasForeignKey(d => d.FkCompressionidUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement24");

                entity.HasOne(d => d.FkConnection)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkConnectionid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblConnection");

                entity.HasOne(d => d.FkCriticality)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkCriticalityid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblcriticality");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblTemplateBlindPointFkDia)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblTemplateBlindPointFkDn)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblDn");

                entity.HasOne(d => d.FkElevation)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkElevationid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblElevation");

                entity.HasOne(d => d.FkFinalreqboltstressUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkFinalreqboltstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkFinalreqboltstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement13");

                entity.HasOne(d => d.FkFinalreqstressUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkFinalreqstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkFinalreqstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement12");

                entity.HasOne(d => d.FkFlangeBasematerial)
                    .WithMany(p => p.TblTemplateBlindPointFkFlangeBasematerial)
                    .HasForeignKey(d => d.FkFlangeBasematerialid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBaseMaterial1");

                entity.HasOne(d => d.FkFlangesubtype)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkFlangesubtypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblFlangeSubType");

                entity.HasOne(d => d.FkFlangetype)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkFlangetypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblFlangeType");

                entity.HasOne(d => d.FkFriction)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkFrictionid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblFriction");

                entity.HasOne(d => d.FkGasketBasematerial)
                    .WithMany(p => p.TblTemplateBlindPointFkGasketBasematerial)
                    .HasForeignKey(d => d.FkGasketBasematerialid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBaseMaterial2");

                entity.HasOne(d => d.FkGaskettype)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkGaskettypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblGasketType");

                entity.HasOne(d => d.FkGrid)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkGridid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblGrid");

                entity.HasOne(d => d.FkGriplengthUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkGriplengthUnitofmeasurement)
                    .HasForeignKey(d => d.FkGriplengthUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement15");

                entity.HasOne(d => d.FkJackpressureUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkJackpressureUnitofmeasurement)
                    .HasForeignKey(d => d.FkJackpressureUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement2");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblLbs");

                entity.HasOne(d => d.FkLubricant)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkLubricantid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblLubricant");

                entity.HasOne(d => d.FkMaterialpipespec)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkMaterialpipespecid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblMaterialPipeSpec");

                entity.HasOne(d => d.FkMaxoffsetflangefaces)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkMaxoffsetflangefacesid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblMaxOffsetFlangeFaces");

                entity.HasOne(d => d.FkMaxtensioningpressUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkMaxtensioningpressUnitofmeasurement)
                    .HasForeignKey(d => d.FkMaxtensioningpressUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement8");

                entity.HasOne(d => d.FkNutBasematerial)
                    .WithMany(p => p.TblTemplateBlindPointFkNutBasematerial)
                    .HasForeignKey(d => d.FkNutBasematerialid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBaseMaterial5");

                entity.HasOne(d => d.FkPass1Unitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkPass1Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass1Unitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement19");

                entity.HasOne(d => d.FkPass2Unitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkPass2Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass2Unitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement20");

                entity.HasOne(d => d.FkPass3Unitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkPass3Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass3Unitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement21");

                entity.HasOne(d => d.FkPass4Unitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkPass4Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass4Unitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement22");

                entity.HasOne(d => d.FkPass5Unitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkPass5Unitofmeasurement)
                    .HasForeignKey(d => d.FkPass5Unitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement23");

                entity.HasOne(d => d.FkPipeline)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkPipelineid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblPipeline");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblPn");

                entity.HasOne(d => d.FkPumpsettingUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkPumpsettingUnitofmeasurement)
                    .HasForeignKey(d => d.FkPumpsettingUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement18");

                entity.HasOne(d => d.FkQaqcreport)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkQaqcreportid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblQaqcReport");

                entity.HasOne(d => d.FkRelaxationfactorUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkRelaxationfactorUnitofmeasurement)
                    .HasForeignKey(d => d.FkRelaxationfactorUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement11");

                entity.HasOne(d => d.FkReqboltloadUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkReqboltloadUnitofmeasurement)
                    .HasForeignKey(d => d.FkReqboltloadUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement14");

                entity.HasOne(d => d.FkResidualboltstressUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkResidualboltstressUnitofmeasurement)
                    .HasForeignKey(d => d.FkResidualboltstressUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement9");

                entity.HasOne(d => d.FkResidualbolttensionUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkResidualbolttensionUnitofmeasurement)
                    .HasForeignKey(d => d.FkResidualbolttensionUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement10");

                entity.HasOne(d => d.FkRingjoint)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkRingjointid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblRingJoint");

                entity.HasOne(d => d.FkSubsbsid1Navigation)
                    .WithMany(p => p.TblTemplateBlindPointFkSubsbsid1Navigation)
                    .HasForeignKey(d => d.FkSubsbsid1)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblSubSBS");

                entity.HasOne(d => d.FkSubsbsid2Navigation)
                    .WithMany(p => p.TblTemplateBlindPointFkSubsbsid2Navigation)
                    .HasForeignKey(d => d.FkSubsbsid2)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblSubSBS1");

                entity.HasOne(d => d.FkSubsbsid3Navigation)
                    .WithMany(p => p.TblTemplateBlindPointFkSubsbsid3Navigation)
                    .HasForeignKey(d => d.FkSubsbsid3)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblSubSBS2");

                entity.HasOne(d => d.FkSwUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkSwUnitofmeasurement)
                    .HasForeignKey(d => d.FkSwUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement26");

                entity.HasOne(d => d.FkTensioningvalueAUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkTensioningvalueAUnitofmeasurement)
                    .HasForeignKey(d => d.FkTensioningvalueAUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement3");

                entity.HasOne(d => d.FkTensioningvalueBUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkTensioningvalueBUnitofmeasurement)
                    .HasForeignKey(d => d.FkTensioningvalueBUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement4");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblThickness");

                entity.HasOne(d => d.FkThreadform)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkThreadformid)
                    .HasConstraintName("FK_tblTemplateBlindpoint_tblThreadForm");

                entity.HasOne(d => d.FkToolareaUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkToolareaUnitofmeasurement)
                    .HasForeignKey(d => d.FkToolareaUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement17");

                entity.HasOne(d => d.FkTorqtype)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkTorqtypeid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblTorqType");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUser");

                entity.HasOne(d => d.FkWashersBasematerial)
                    .WithMany(p => p.TblTemplateBlindPointFkWashersBasematerial)
                    .HasForeignKey(d => d.FkWashersBasematerialid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblBaseMaterial6");

                entity.HasOne(d => d.FkWashersthkUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkWashersthkUnitofmeasurement)
                    .HasForeignKey(d => d.FkWashersthkUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement25");

                entity.HasOne(d => d.FkWeldnorm)
                    .WithMany(p => p.TblTemplateBlindPoint)
                    .HasForeignKey(d => d.FkWeldnormid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblWeldNorm");

                entity.HasOne(d => d.FkYieldpointUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointFkYieldpointUnitofmeasurement)
                    .HasForeignKey(d => d.FkYieldpointUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPoint_tblUnitOfMeasurement16");
            });

            modelBuilder.Entity<TblTemplateBlindPointActivity>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointactivityid);

                entity.ToTable("tblTemplateBlindPointActivity");

                entity.HasIndex(e => e.FkActivityid);

                entity.HasIndex(e => e.FkBlindtypeid);

                entity.HasIndex(e => e.FkBolttypeid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkGaskettypeid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => new { e.FkTemplateblindpointid, e.FkMainphaseid, e.FkSubphaseid, e.Grouping })
                    .HasName("IX_tblTemplateBlindPointActivity")
                    .IsUnique();

                entity.Property(e => e.PkTemplateblindpointactivityid).HasColumnName("pk_templateblindpointactivityid");

                entity.Property(e => e.Actionby).HasColumnName("actionby");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkActivityid).HasColumnName("fk_activityid");

                entity.Property(e => e.FkBlindtypeid).HasColumnName("fk_blindtypeid");

                entity.Property(e => e.FkBolttypeid).HasColumnName("fk_bolttypeid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkGaskettypeid).HasColumnName("fk_gaskettypeid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.Grouping)
                    .HasColumnName("grouping")
                    .HasMaxLength(10);

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Needsfinalqc).HasColumnName("needsfinalqc");

                entity.Property(e => e.Needspostqc).HasColumnName("needspostqc");

                entity.Property(e => e.Needspreqc).HasColumnName("needspreqc");

                entity.Property(e => e.Needsvisualqc).HasColumnName("needsvisualqc");

                entity.Property(e => e.Seqno).HasColumnName("seqno");

                entity.HasOne(d => d.FkActivity)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkActivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblActivity");

                entity.HasOne(d => d.FkBlindtype)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkBlindtypeid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblBlindType");

                entity.HasOne(d => d.FkBolttype)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkBolttypeid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblBoltType");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblDn");

                entity.HasOne(d => d.FkGaskettype)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkGaskettypeid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblGasketType");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblLbs");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblMainPhase");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblPn");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblSubPhase");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivity_tblTemplateBlindPoint");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblTemplateBlindPointActivity)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblTemplateBlindpointActivity_tblThickness");
            });

            modelBuilder.Entity<TblTemplateBlindPointActivityChecklist>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointactivitychecklistid);

                entity.ToTable("tblTemplateBlindPointActivityChecklist");

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkTemplateblindpointactivityid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkTemplateblindpointactivityid, e.FkChecklistid, e.Activityqctype })
                    .HasName("UK_tblTemplateBlindPointActivityChecklist")
                    .IsUnique();

                entity.Property(e => e.PkTemplateblindpointactivitychecklistid).HasColumnName("pk_templateblindpointactivitychecklistid");

                entity.Property(e => e.Activityqctype).HasColumnName("activityqctype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkTemplateblindpointactivityid).HasColumnName("fk_templateblindpointactivityid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Neededdate)
                    .HasColumnName("neededdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblTemplateBlindPointActivityChecklist)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivityChecklist_tblChecklist");

                entity.HasOne(d => d.FkTemplateblindpointactivity)
                    .WithMany(p => p.TblTemplateBlindPointActivityChecklist)
                    .HasForeignKey(d => d.FkTemplateblindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivityChecklist_tblTemplateBlindPointActivity");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTemplateBlindPointActivityChecklist)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivityChecklist_tblUser");
            });

            modelBuilder.Entity<TblTemplateBlindPointActivityCircumstance>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointactivitycircumstanceid);

                entity.ToTable("tblTemplateBlindPointActivityCircumstance");

                entity.HasIndex(e => e.FkCircumstanceid);

                entity.HasIndex(e => e.FkTemplateblindpointactivityid);

                entity.Property(e => e.PkTemplateblindpointactivitycircumstanceid).HasColumnName("pk_templateblindpointactivitycircumstanceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCircumstanceid).HasColumnName("fk_circumstanceid");

                entity.Property(e => e.FkTemplateblindpointactivityid).HasColumnName("fk_templateblindpointactivityid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCircumstance)
                    .WithMany(p => p.TblTemplateBlindPointActivityCircumstance)
                    .HasForeignKey(d => d.FkCircumstanceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivityCircumstance_tblCircumstance");

                entity.HasOne(d => d.FkTemplateblindpointactivity)
                    .WithMany(p => p.TblTemplateBlindPointActivityCircumstance)
                    .HasForeignKey(d => d.FkTemplateblindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointActivityCircumstance_tblBlindPointActivity");
            });

            modelBuilder.Entity<TblTemplateBlindpointActivityMaterial>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointactivitymaterialid);

                entity.ToTable("tblTemplateBlindpointActivityMaterial");

                entity.HasIndex(e => e.FkMaterialid);

                entity.HasIndex(e => e.FkTemplateblindpointactivityid)
                    .HasName("IX_tblTemplateBlindPointActivityMaterial_fk_templateblindpointactivityid");

                entity.Property(e => e.PkTemplateblindpointactivitymaterialid).HasColumnName("pk_templateblindpointactivitymaterialid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaterialid).HasColumnName("fk_materialid");

                entity.Property(e => e.FkTemplateblindpointactivityid).HasColumnName("fk_templateblindpointactivityid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMaterial)
                    .WithMany(p => p.TblTemplateBlindpointActivityMaterial)
                    .HasForeignKey(d => d.FkMaterialid)
                    .HasConstraintName("FK_tblTemplateBlindPointActivityMaterial_tblMaterial");

                entity.HasOne(d => d.FkTemplateblindpointactivity)
                    .WithMany(p => p.TblTemplateBlindpointActivityMaterial)
                    .HasForeignKey(d => d.FkTemplateblindpointactivityid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindpointActivityMaterial_tblTemplateBlindPointActivity");
            });

            modelBuilder.Entity<TblTemplateBlindPointChecklist>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointchecklistid);

                entity.ToTable("tblTemplateBlindPointChecklist");

                entity.HasIndex(e => e.FkChecklistid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkTemplateblindpointid, e.FkChecklistid })
                    .HasName("UK_tblTemplateBlindPointChecklist")
                    .IsUnique();

                entity.Property(e => e.PkTemplateblindpointchecklistid).HasColumnName("pk_templateblindpointchecklistid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkChecklistid).HasColumnName("fk_checklistid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Neededdate)
                    .HasColumnName("neededdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Receiveddate)
                    .HasColumnName("receiveddate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkChecklist)
                    .WithMany(p => p.TblTemplateBlindPointChecklist)
                    .HasForeignKey(d => d.FkChecklistid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointChecklist_tblChecklist");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindPointChecklist)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointChecklist_tblTemplateBlindPoint");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTemplateBlindPointChecklist)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblTemplateBlindPointChecklist_tblUser");
            });

            modelBuilder.Entity<TblTemplateBlindPointDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointdisciplineid);

                entity.ToTable("tblTemplateBlindPointDiscipline");

                entity.HasIndex(e => e.FkBoltdiameterdiaid);

                entity.HasIndex(e => e.FkBoltdiameterdnid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDisciplinecodeid);

                entity.HasIndex(e => e.FkDisciplinetypeid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkSubdisciplineid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => e.FkUnitofmeasurementid);

                entity.Property(e => e.PkTemplateblindpointdisciplineid).HasColumnName("pk_templateblindpointdisciplineid");

                entity.Property(e => e.Confirmationdate)
                    .HasColumnName("confirmationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Confirmationuser)
                    .HasColumnName("confirmationuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBoltdiameterdiaid).HasColumnName("fk_boltdiameterdiaid");

                entity.Property(e => e.FkBoltdiameterdnid).HasColumnName("fk_boltdiameterdnid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDisciplinecodeid).HasColumnName("fk_disciplinecodeid");

                entity.Property(e => e.FkDisciplinetypeid).HasColumnName("fk_disciplinetypeid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.FkUnitofmeasurementid).HasColumnName("fk_unitofmeasurementid");

                entity.Property(e => e.Flangeinstructionno)
                    .HasColumnName("flangeinstructionno")
                    .HasMaxLength(50);

                entity.Property(e => e.Height)
                    .HasColumnName("height")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Hours)
                    .HasColumnName("hours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Length)
                    .HasColumnName("length")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.M2)
                    .HasColumnName("m2")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.M3)
                    .HasColumnName("m3")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(500);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.Width)
                    .HasColumnName("width")
                    .HasColumnType("decimal(8, 2)");

                entity.HasOne(d => d.FkBoltdiameterdia)
                    .WithMany(p => p.TblTemplateBlindPointDisciplineFkBoltdiameterdia)
                    .HasForeignKey(d => d.FkBoltdiameterdiaid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblboltdiameterDia");

                entity.HasOne(d => d.FkBoltdiameterdn)
                    .WithMany(p => p.TblTemplateBlindPointDisciplineFkBoltdiameterdn)
                    .HasForeignKey(d => d.FkBoltdiameterdnid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblboltdiameterDn");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblContractor");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblTemplateBlindPointDisciplineFkDia)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblDia");

                entity.HasOne(d => d.FkDisciplinecode)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkDisciplinecodeid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblDisciplineCode");

                entity.HasOne(d => d.FkDisciplinetype)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkDisciplinetypeid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblDisciplineType");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblTemplateBlindPointDisciplineFkDn)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblDn");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblSubDiscipline");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblTemplateBlindPoint");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblThickness");

                entity.HasOne(d => d.FkUnitofmeasurement)
                    .WithMany(p => p.TblTemplateBlindPointDiscipline)
                    .HasForeignKey(d => d.FkUnitofmeasurementid)
                    .HasConstraintName("FK_tblTemplateBlindPointDiscipline_tblUnitOfMeasurement");
            });

            modelBuilder.Entity<TblTemplateBlindPointDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointdocumentlabelid);

                entity.ToTable("tblTemplateBlindPointDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => new { e.FkTemplateblindpointid, e.FkDocumentlabelid })
                    .HasName("UK_tblTemplateBlindPointDocumentLabel_fk_templateblindpointid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkTemplateblindpointdocumentlabelid).HasColumnName("pk_templateblindpointdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblTemplateBlindPointDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindPointDocumentLabel)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointDocumentLabel_tblTemplateBlindPoint");
            });

            modelBuilder.Entity<TblTemplateBlindPointGraph>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointgraphid);

                entity.ToTable("tblTemplateBlindPointGraph", "isolation");

                entity.Property(e => e.PkTemplateblindpointgraphid).HasColumnName("pk_templateblindpointgraphid");

                entity.Property(e => e.DkTemplateblindpointid).HasColumnName("dk_templateblindpointid");

                entity.Property(e => e.Lastmodified)
                    .HasColumnName("lastmodified")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<TblTemplateBlindPointHazard>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointhazardid);

                entity.ToTable("tblTemplateBlindPointHazard");

                entity.HasIndex(e => e.FkHazardid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => new { e.FkTemplateblindpointid, e.FkHazardid })
                    .HasName("UK_tblTemplateBlindPointHazard")
                    .IsUnique();

                entity.Property(e => e.PkTemplateblindpointhazardid).HasColumnName("pk_templateblindpointhazardid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkHazardid).HasColumnName("fk_hazardid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkHazard)
                    .WithMany(p => p.TblTemplateBlindPointHazard)
                    .HasForeignKey(d => d.FkHazardid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointHazard_tblHazard");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindPointHazard)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointHazard_tblTemplateBlindPoint");
            });

            modelBuilder.Entity<TblTemplateBlindpointPlantdata>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointplantdataid);

                entity.ToTable("tblTemplateBlindpointPlantdata");

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => new { e.FkTemplateblindpointid, e.FkPlantdataid })
                    .HasName("IX_tblTemplateBlindpointPlantdata");

                entity.Property(e => e.PkTemplateblindpointplantdataid).HasColumnName("pk_templateblindpointplantdataid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPlantdataid).HasColumnName("fk_plantdataid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPlantdata)
                    .WithMany(p => p.TblTemplateBlindpointPlantdata)
                    .HasForeignKey(d => d.FkPlantdataid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindpointPlantdata_tblPlantData");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindpointPlantdata)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindpointPlantdata_tblTemplateBlindPoint");
            });

            modelBuilder.Entity<TblTemplateBlindPointProduct>(entity =>
            {
                entity.HasKey(e => e.PkTemplateblindpointproductid);

                entity.ToTable("tblTemplateBlindPointProduct");

                entity.HasIndex(e => e.FkProductid);

                entity.HasIndex(e => e.FkTemplateblindpointid);

                entity.HasIndex(e => new { e.FkTemplateblindpointid, e.FkProductid })
                    .HasName("UQ_tblTemplateBlindPointProduct")
                    .IsUnique();

                entity.Property(e => e.PkTemplateblindpointproductid).HasColumnName("pk_templateblindpointproductid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProductid).HasColumnName("fk_productid");

                entity.Property(e => e.FkTemplateblindpointid).HasColumnName("fk_templateblindpointid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.TblTemplateBlindPointProduct)
                    .HasForeignKey(d => d.FkProductid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointProduct_tblProduct");

                entity.HasOne(d => d.FkTemplateblindpoint)
                    .WithMany(p => p.TblTemplateBlindPointProduct)
                    .HasForeignKey(d => d.FkTemplateblindpointid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateBlindPointProduct_tblTemplateBlindPoint");
            });

            modelBuilder.Entity<TblTemplateMilestone>(entity =>
            {
                entity.HasKey(e => e.PkTemplatemilestoneid);

                entity.ToTable("tblTemplateMilestone");

                entity.HasIndex(e => e.FkProjectid)
                    .HasName("IX_tblMilestone_fk_projectid");

                entity.HasIndex(e => new { e.FkProjectid, e.Milestonedescr })
                    .HasName("IX_tblMilestone_U1")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProjectid, e.Sortorder, e.Milestonetype })
                    .HasName("IX_tblMilestone_U2")
                    .IsUnique();

                entity.Property(e => e.PkTemplatemilestoneid).HasColumnName("pk_templatemilestoneid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Milestonecolor).HasColumnName("milestonecolor");

                entity.Property(e => e.Milestonedescr)
                    .IsRequired()
                    .HasColumnName("milestonedescr")
                    .HasMaxLength(100);

                entity.Property(e => e.Milestonetype)
                    .IsRequired()
                    .HasColumnName("milestonetype")
                    .HasMaxLength(4);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Sortorder)
                    .IsRequired()
                    .HasColumnName("sortorder")
                    .HasMaxLength(4);

                entity.Property(e => e.Startfinish).HasColumnName("startfinish");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblTemplateMilestone)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTemplateMilestone_tblProject");
            });

            modelBuilder.Entity<TblTestSystem>(entity =>
            {
                entity.HasKey(e => e.PkTestsystemid);

                entity.ToTable("tblTestSystem");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkHoldtimeunitofmeasurementid);

                entity.HasIndex(e => e.FkPressureunitofmeasurementid);

                entity.HasIndex(e => e.FkTestsystemmediumid);

                entity.HasIndex(e => e.Testsystemnr)
                    .HasName("UK_tblTestSystem_testsystemnr")
                    .IsUnique();

                entity.Property(e => e.PkTestsystemid).HasColumnName("pk_testsystemid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkHoldtimeunitofmeasurementid).HasColumnName("fk_holdtimeunitofmeasurementid");

                entity.Property(e => e.FkPressureunitofmeasurementid).HasColumnName("fk_pressureunitofmeasurementid");

                entity.Property(e => e.FkTestsystemmediumid).HasColumnName("fk_testsystemmediumid");

                entity.Property(e => e.Holdtime)
                    .HasColumnName("holdtime")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pressure).HasColumnName("pressure");

                entity.Property(e => e.Testsystemdescription)
                    .HasColumnName("testsystemdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Testsystemnr)
                    .IsRequired()
                    .HasColumnName("testsystemnr")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblTestSystem)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTestSystem_tblContractor");

                entity.HasOne(d => d.FkHoldtimeunitofmeasurement)
                    .WithMany(p => p.TblTestSystemFkHoldtimeunitofmeasurement)
                    .HasForeignKey(d => d.FkHoldtimeunitofmeasurementid)
                    .HasConstraintName("FK_tblTestSystem_HoldTime_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkPressureunitofmeasurement)
                    .WithMany(p => p.TblTestSystemFkPressureunitofmeasurement)
                    .HasForeignKey(d => d.FkPressureunitofmeasurementid)
                    .HasConstraintName("FK_tblTestSystem_Pressure_tblUnitOfMeasurement");

                entity.HasOne(d => d.FkTestsystemmedium)
                    .WithMany(p => p.TblTestSystem)
                    .HasForeignKey(d => d.FkTestsystemmediumid)
                    .HasConstraintName("FK_tblTestSystem_tblTestSystemMedium");
            });

            modelBuilder.Entity<TblTestSystemMedium>(entity =>
            {
                entity.HasKey(e => e.PkTestsystemmediumid);

                entity.ToTable("tblTestSystemMedium");

                entity.Property(e => e.PkTestsystemmediumid).HasColumnName("pk_testsystemmediumid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<TblTestSystemPressure>(entity =>
            {
                entity.HasKey(e => e.PkTestsystempressureid);

                entity.ToTable("tblTestSystemPressure");

                entity.Property(e => e.PkTestsystempressureid).HasColumnName("pk_testsystempressureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<TblThickness>(entity =>
            {
                entity.HasKey(e => e.PkThicknessid);

                entity.ToTable("tblThickness");

                entity.HasIndex(e => e.Thicknessdescription)
                    .HasName("UK_tblThickness_description")
                    .IsUnique();

                entity.Property(e => e.PkThicknessid).HasColumnName("pk_thicknessid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Thicknessdescription)
                    .IsRequired()
                    .HasColumnName("thicknessdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Thicknessvalue)
                    .HasColumnName("thicknessvalue")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<TblThicknessAlternative>(entity =>
            {
                entity.HasKey(e => e.PkThicknessalternativeid);

                entity.ToTable("tblThicknessAlternative");

                entity.HasIndex(e => e.FkThicknessid);

                entity.Property(e => e.PkThicknessalternativeid).HasColumnName("pk_thicknessalternativeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Thicknessalternativedescription)
                    .IsRequired()
                    .HasColumnName("thicknessalternativedescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblThicknessAlternative)
                    .HasForeignKey(d => d.FkThicknessid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblThicknessAlternative_tblThickness");
            });

            modelBuilder.Entity<TblThreadForm>(entity =>
            {
                entity.HasKey(e => e.PkThreadformid);

                entity.ToTable("tblThreadForm");

                entity.HasIndex(e => e.Threadformcode)
                    .HasName("UK_tblthreadform_code")
                    .IsUnique();

                entity.HasIndex(e => e.Threadformdescription)
                    .HasName("UK_tblthreadform_description")
                    .IsUnique();

                entity.Property(e => e.PkThreadformid).HasColumnName("pk_threadformid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Threadformcode)
                    .IsRequired()
                    .HasColumnName("threadformcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Threadformdescription)
                    .IsRequired()
                    .HasColumnName("threadformdescription")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblTimekeeping>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingid);

                entity.ToTable("tblTimekeeping");

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkTimekeepingid).HasColumnName("pk_timekeepingid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Datetimein)
                    .HasColumnName("datetimein")
                    .HasColumnType("datetime");

                entity.Property(e => e.Datetimeout)
                    .HasColumnName("datetimeout")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Gateinname)
                    .HasColumnName("gateinname")
                    .HasMaxLength(50);

                entity.Property(e => e.Gateoutname)
                    .HasColumnName("gateoutname")
                    .HasMaxLength(50);

                entity.Property(e => e.Guid)
                    .HasColumnName("guid")
                    .HasColumnType("char(38)");

                entity.Property(e => e.Imagein).HasColumnName("imagein");

                entity.Property(e => e.Imageout).HasColumnName("imageout");

                entity.Property(e => e.Mergedate)
                    .HasColumnName("mergedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTimekeeping)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeeping_fk_useridforeign");
            });

            modelBuilder.Entity<TblTimekeepingCutoff>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingcutoffid);

                entity.ToTable("tblTimekeepingCutoff");

                entity.HasIndex(e => e.FkWorkflowstatetransitionid)
                    .HasName("UQ_tblTimekeepingCutoff")
                    .IsUnique();

                entity.Property(e => e.PkTimekeepingcutoffid).HasColumnName("pk_timekeepingcutoffid");

                entity.Property(e => e.Businessdaysafter).HasColumnName("businessdaysafter");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWorkflowstatetransitionid).HasColumnName("fk_workflowstatetransitionid");

                entity.Property(e => e.Frequencyenumvalue).HasColumnName("frequencyenumvalue");

                entity.Property(e => e.Frequencytimes).HasColumnName("frequencytimes");

                entity.Property(e => e.Hoursbefore).HasColumnName("hoursbefore");

                entity.Property(e => e.Minutesbefore).HasColumnName("minutesbefore");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkWorkflowstatetransition)
                    .WithOne(p => p.TblTimekeepingCutoff)
                    .HasForeignKey<TblTimekeepingCutoff>(d => d.FkWorkflowstatetransitionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingCutoff_tblWorkflowStateTransition");
            });

            modelBuilder.Entity<TblTimekeepingEntry>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingentryid);

                entity.ToTable("tblTimekeepingEntry");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkTimekeepingentrytypeid);

                entity.HasIndex(e => e.FkTimekeepingid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkTimekeepingentryid).HasColumnName("pk_timekeepingentryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.DkScopeid).HasColumnName("dk_scopeid");

                entity.Property(e => e.DkScopejobdetailresourceid).HasColumnName("dk_scopejobdetailresourceid");

                entity.Property(e => e.DkScopejobid).HasColumnName("dk_scopejobid");

                entity.Property(e => e.Entrydate)
                    .HasColumnName("entrydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkTimekeepingentrytypeid).HasColumnName("fk_timekeepingentrytypeid");

                entity.Property(e => e.FkTimekeepingid).HasColumnName("fk_timekeepingid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Grosshours).HasColumnName("grosshours");

                entity.Property(e => e.Hours)
                    .HasColumnName("hours")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Ischangedbytimeit).HasColumnName("ischangedbytimeit");

                entity.Property(e => e.Istimespentonly).HasColumnName("istimespentonly");

                entity.Property(e => e.Markingtype).HasColumnName("markingtype");

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(400);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nethours).HasColumnName("nethours");

                entity.Property(e => e.Overtimehours).HasColumnName("overtimehours");

                entity.Property(e => e.Starttime)
                    .HasColumnName("starttime")
                    .HasColumnType("datetime");

                entity.Property(e => e.Stoptime)
                    .HasColumnName("stoptime")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblTimekeepingEntry)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblTimekeepingEntry_tblProject");

                entity.HasOne(d => d.FkTimekeepingentrytype)
                    .WithMany(p => p.TblTimekeepingEntry)
                    .HasForeignKey(d => d.FkTimekeepingentrytypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntry_tblTimekeepingEntryType");

                entity.HasOne(d => d.FkTimekeeping)
                    .WithMany(p => p.TblTimekeepingEntry)
                    .HasForeignKey(d => d.FkTimekeepingid)
                    .HasConstraintName("FK_tblTimekeepingEntry_tblTimekeeping");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTimekeepingEntry)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntry_tblUser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblTimekeepingEntry)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .HasConstraintName("FK_tblTimekeepingEntry_tblWorkflowState");
            });

            modelBuilder.Entity<TblTimekeepingEntryCircum>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingentrycircumid);

                entity.ToTable("tblTimekeepingEntryCircum");

                entity.HasIndex(e => e.FkCircumstanceid);

                entity.HasIndex(e => e.FkTimekeepingentryid);

                entity.Property(e => e.PkTimekeepingentrycircumid).HasColumnName("pk_timekeepingentrycircumid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkCircumstanceid).HasColumnName("fk_circumstanceid");

                entity.Property(e => e.FkTimekeepingentryid).HasColumnName("fk_timekeepingentryid");

                entity.Property(e => e.Hrs)
                    .HasColumnName("hrs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkCircumstance)
                    .WithMany(p => p.TblTimekeepingEntryCircum)
                    .HasForeignKey(d => d.FkCircumstanceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntryCircum_tblCircumstance");

                entity.HasOne(d => d.FkTimekeepingentry)
                    .WithMany(p => p.TblTimekeepingEntryCircum)
                    .HasForeignKey(d => d.FkTimekeepingentryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntryCircum_tblTimekeepingEntry");
            });

            modelBuilder.Entity<TblTimekeepingEntryInefficiency>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingentryinefficiencyid);

                entity.ToTable("tblTimekeepingEntryInefficiency");

                entity.HasIndex(e => e.FkTimekeepingentryid);

                entity.HasIndex(e => e.FkTimekeepinginefficientietypeid);

                entity.Property(e => e.PkTimekeepingentryinefficiencyid).HasColumnName("pk_timekeepingentryinefficiencyid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkTimekeepingentryid).HasColumnName("fk_timekeepingentryid");

                entity.Property(e => e.FkTimekeepinginefficientietypeid).HasColumnName("fk_timekeepinginefficientietypeid");

                entity.Property(e => e.Hrs)
                    .HasColumnName("hrs")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkTimekeepingentry)
                    .WithMany(p => p.TblTimekeepingEntryInefficiency)
                    .HasForeignKey(d => d.FkTimekeepingentryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntryInefficiency_tblTimekeepingEntry");

                entity.HasOne(d => d.FkTimekeepinginefficientietype)
                    .WithMany(p => p.TblTimekeepingEntryInefficiency)
                    .HasForeignKey(d => d.FkTimekeepinginefficientietypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntryInefficiency_tblTimekeepingInEfficientieType");
            });

            modelBuilder.Entity<TblTimekeepingEntryLog>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingentrylogid);

                entity.ToTable("tblTimekeepingEntryLog");

                entity.HasIndex(e => e.FkTimekeepingentryid);

                entity.Property(e => e.PkTimekeepingentrylogid).HasColumnName("pk_timekeepingentrylogid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkTimekeepingentryid).HasColumnName("fk_timekeepingentryid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Newstate)
                    .IsRequired()
                    .HasColumnName("newstate")
                    .HasMaxLength(50);

                entity.Property(e => e.Previousstate)
                    .HasColumnName("previousstate")
                    .HasMaxLength(50);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasColumnName("remark")
                    .HasMaxLength(255);

                entity.HasOne(d => d.FkTimekeepingentry)
                    .WithMany(p => p.TblTimekeepingEntryLog)
                    .HasForeignKey(d => d.FkTimekeepingentryid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingEntryLog_tblTimekeepingEntry");
            });

            modelBuilder.Entity<TblTimekeepingEntryType>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingentrytypeid);

                entity.ToTable("tblTimekeepingEntryType");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => new { e.FkContractorid, e.Timekeepingentrytypecode })
                    .HasName("IX_tblTimekeepingEntryType_U1")
                    .IsUnique();

                entity.Property(e => e.PkTimekeepingentrytypeid).HasColumnName("pk_timekeepingentrytypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Isbillable).HasColumnName("isbillable");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Timekeepingentrytypecode)
                    .IsRequired()
                    .HasColumnName("timekeepingentrytypecode")
                    .HasMaxLength(10);

                entity.Property(e => e.Timekeepingentrytypedescription)
                    .IsRequired()
                    .HasColumnName("timekeepingentrytypedescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblTimekeepingEntryType)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblTimekeepingEntryType_tblContractor");
            });

            modelBuilder.Entity<TblTimekeepingInEfficientieType>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepinginefficientieTypeid);

                entity.ToTable("tblTimekeepingInEfficientieType");

                entity.HasIndex(e => e.Timekeepinginefficientietypecode)
                    .HasName("IX_tblTimekeepingInEfficientieType")
                    .IsUnique();

                entity.Property(e => e.PkTimekeepinginefficientieTypeid).HasColumnName("pk_timekeepinginefficientieTypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Timekeepinginefficientietypecode)
                    .IsRequired()
                    .HasColumnName("timekeepinginefficientietypecode")
                    .HasMaxLength(10);

                entity.Property(e => e.TimekeepinginefficientietypedescriptionL1)
                    .IsRequired()
                    .HasColumnName("timekeepinginefficientietypedescription_l1")
                    .HasMaxLength(100);

                entity.Property(e => e.TimekeepinginefficientietypedescriptionL2)
                    .HasColumnName("timekeepinginefficientietypedescription_l2")
                    .HasMaxLength(100);

                entity.Property(e => e.TimekeepinginefficientietypedescriptionL3)
                    .HasColumnName("timekeepinginefficientietypedescription_l3")
                    .HasMaxLength(100);

                entity.Property(e => e.TimekeepinginefficientietypedescriptionL4)
                    .HasColumnName("timekeepinginefficientietypedescription_l4")
                    .HasMaxLength(100);

                entity.Property(e => e.TimekeepinginefficientietypedescriptionL5)
                    .HasColumnName("timekeepinginefficientietypedescription_l5")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblTimekeepingMainCode>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingmaincodeid);

                entity.ToTable("tblTimekeepingMainCode");

                entity.HasIndex(e => e.Maincodedescr)
                    .HasName("UK_tblTimekeepingMainCode_maincodedescr")
                    .IsUnique();

                entity.Property(e => e.PkTimekeepingmaincodeid).HasColumnName("pk_timekeepingmaincodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Maincodedescr)
                    .IsRequired()
                    .HasColumnName("maincodedescr")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblTimekeepingMileage>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingmileageid);

                entity.ToTable("tblTimekeepingMileage");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkTimekeepingmileagetypeid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkTimekeepingmileageid).HasColumnName("pk_timekeepingmileageid");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Distance)
                    .HasColumnName("distance")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkTimekeepingmileagetypeid).HasColumnName("fk_timekeepingmileagetypeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Ischangedbytimeit).HasColumnName("ischangedbytimeit");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Registrationdate)
                    .HasColumnName("registrationdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblTimekeepingMileage)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tblTimekeepingMileage_tblProject");

                entity.HasOne(d => d.FkTimekeepingmileagetype)
                    .WithMany(p => p.TblTimekeepingMileage)
                    .HasForeignKey(d => d.FkTimekeepingmileagetypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tblTimekeepingMileage_tblTimekeepingMileageType");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTimekeepingMileage)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingMileage_fk_userid");
            });

            modelBuilder.Entity<TblTimeKeepingMileageType>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingmileagetypeid);

                entity.ToTable("tblTimeKeepingMileageType");

                entity.HasIndex(e => e.FkContractorid);

                entity.Property(e => e.PkTimekeepingmileagetypeid).HasColumnName("pk_timekeepingmileagetypeid");

                entity.Property(e => e.Commentname)
                    .IsRequired()
                    .HasColumnName("commentname")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.Ispaid).HasColumnName("ispaid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Typecode)
                    .IsRequired()
                    .HasColumnName("typecode")
                    .HasMaxLength(5);

                entity.Property(e => e.Typedescription)
                    .IsRequired()
                    .HasColumnName("typedescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblTimeKeepingMileageType)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_tblTimekeepingMileageType_tblContractor");
            });

            modelBuilder.Entity<TblTimekeepingPeriod>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingperiodid);

                entity.ToTable("tblTimekeepingPeriod");

                entity.Property(e => e.PkTimekeepingperiodid).HasColumnName("pk_timekeepingperiodid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Cycleenumvalue).HasColumnName("cycleenumvalue");

                entity.Property(e => e.Length).HasColumnName("length");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Splitday).HasColumnName("splitday");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Timekeepingperiodcode)
                    .IsRequired()
                    .HasColumnName("timekeepingperiodcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Timekeepingperiodname)
                    .IsRequired()
                    .HasColumnName("timekeepingperiodname")
                    .HasMaxLength(100);

                entity.Property(e => e.Workdays).HasColumnName("workdays");
            });

            modelBuilder.Entity<TblTimekeepingSheet>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingsheetid);

                entity.ToTable("tblTimekeepingSheet");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkTimekeepingsheetid).HasColumnName("pk_timekeepingsheetid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblTimekeepingSheet)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingSheet_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblTimekeepingSheet)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingSheet_tblUser");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblTimekeepingSheet)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingSheet_tblWorkflowState");
            });

            modelBuilder.Entity<TblTimekeepingSubCode>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingsubcodeid);

                entity.ToTable("tblTimekeepingSubCode");

                entity.HasIndex(e => e.FkTimekeepingmaincodeid);

                entity.HasIndex(e => e.Subcodedescr)
                    .HasName("UK_tblTimekeepingSubCode_subcodedescr")
                    .IsUnique();

                entity.Property(e => e.PkTimekeepingsubcodeid).HasColumnName("pk_timekeepingsubcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkTimekeepingmaincodeid).HasColumnName("fk_timekeepingmaincodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Subcodedescr)
                    .IsRequired()
                    .HasColumnName("subcodedescr")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkTimekeepingmaincode)
                    .WithMany(p => p.TblTimekeepingSubCode)
                    .HasForeignKey(d => d.FkTimekeepingmaincodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingSubCode_fk_timekeepingmaincodeid");
            });

            modelBuilder.Entity<TblTimekeepingTraffic>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingtrafficid);

                entity.ToTable("tblTimekeepingTraffic");

                entity.Property(e => e.PkTimekeepingtrafficid).HasColumnName("pk_timekeepingtrafficid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Maxvalue).HasColumnName("maxvalue");

                entity.Property(e => e.Minvalue).HasColumnName("minvalue");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblTimekeepingTrafficData>(entity =>
            {
                entity.HasKey(e => e.PkTimekeepingtrafficdata);

                entity.ToTable("tblTimekeepingTrafficData");

                entity.HasIndex(e => e.FkTimekeepingtrafficid);

                entity.Property(e => e.PkTimekeepingtrafficdata).HasColumnName("pk_timekeepingtrafficdata");

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkTimekeepingtrafficid).HasColumnName("fk_timekeepingtrafficid");

                entity.Property(e => e.Maxvalue).HasColumnName("maxvalue");

                entity.Property(e => e.Minvalue).HasColumnName("minvalue");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkTimekeepingtraffic)
                    .WithMany(p => p.TblTimekeepingTrafficData)
                    .HasForeignKey(d => d.FkTimekeepingtrafficid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblTimekeepingTrafficData_tblTimekeepingTraffic");
            });

            modelBuilder.Entity<TblToken>(entity =>
            {
                entity.HasKey(e => e.PkTokenid);

                entity.ToTable("tblToken");

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.Sessionid)
                    .HasName("UQ__tblToken__84B9F7FEBA753680")
                    .IsUnique();

                entity.Property(e => e.PkTokenid).HasColumnName("pk_tokenid");

                entity.Property(e => e.Authenticationtoken)
                    .IsRequired()
                    .HasColumnName("authenticationtoken")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Devicetoken)
                    .HasColumnName("devicetoken")
                    .HasMaxLength(250);

                entity.Property(e => e.Expireson)
                    .HasColumnName("expireson")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Issuedon)
                    .HasColumnName("issuedon")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sessionid).HasColumnName("sessionid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblToken)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblToken_tblUser");
            });

            modelBuilder.Entity<TblToolBoxItem>(entity =>
            {
                entity.HasKey(e => e.PkToolboxitemid);

                entity.ToTable("tblToolBoxItem");

                entity.Property(e => e.PkToolboxitemid).HasColumnName("pk_toolboxitemid");

                entity.Property(e => e.Bordercolor).HasColumnName("bordercolor");

                entity.Property(e => e.Bordervisible).HasColumnName("bordervisible");

                entity.Property(e => e.Borderwidth).HasColumnName("borderwidth");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontbold).HasColumnName("fontbold");

                entity.Property(e => e.Fontfamily)
                    .IsRequired()
                    .HasColumnName("fontfamily")
                    .HasMaxLength(50);

                entity.Property(e => e.Fontitalic).HasColumnName("fontitalic");

                entity.Property(e => e.Fontsize).HasColumnName("fontsize");

                entity.Property(e => e.Fontunderline).HasColumnName("fontunderline");

                entity.Property(e => e.Forecolor).HasColumnName("forecolor");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Toolboxitemname)
                    .IsRequired()
                    .HasColumnName("toolboxitemname")
                    .HasMaxLength(250);

                entity.Property(e => e.Width).HasColumnName("width");
            });

            modelBuilder.Entity<TblToolBoxItemPart>(entity =>
            {
                entity.HasKey(e => e.PkToolboxitempartid);

                entity.ToTable("tblToolBoxItemPart");

                entity.HasIndex(e => e.FkToolboxitemid);

                entity.Property(e => e.PkToolboxitempartid).HasColumnName("pk_toolboxitempartid");

                entity.Property(e => e.Basepermititemparttype).HasColumnName("basepermititemparttype");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Datadrivenforeignkey).HasColumnName("datadrivenforeignkey");

                entity.Property(e => e.FkToolboxitemid).HasColumnName("fk_toolboxitemid");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.Islinked).HasColumnName("islinked");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Signaturestamptype).HasColumnName("signaturestamptype");

                entity.Property(e => e.Stampandsignatureposition).HasColumnName("stampandsignatureposition");

                entity.Property(e => e.Textvalue)
                    .HasColumnName("textvalue")
                    .HasMaxLength(2000);

                entity.Property(e => e.Toolboxitempartsubtype).HasColumnName("toolboxitempartsubtype");

                entity.Property(e => e.Width).HasColumnName("width");

                entity.Property(e => e.Xpos).HasColumnName("xpos");

                entity.Property(e => e.Ypos).HasColumnName("ypos");

                entity.HasOne(d => d.FkToolboxitem)
                    .WithMany(p => p.TblToolBoxItemPart)
                    .HasForeignKey(d => d.FkToolboxitemid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblToolBoxItemPart_tblToolBoxItem");
            });

            modelBuilder.Entity<TblToolsAndConsumables>(entity =>
            {
                entity.HasKey(e => e.PkToolsandconsumablesid);

                entity.ToTable("tblToolsAndConsumables");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkSubtoolsandconsumablesgroupid);

                entity.HasIndex(e => e.FkUnitofmeasurementid);

                entity.Property(e => e.PkToolsandconsumablesid).HasColumnName("pk_toolsandconsumablesid");

                entity.Property(e => e.Articlenr)
                    .HasColumnName("articlenr")
                    .HasMaxLength(20);

                entity.Property(e => e.Capacity)
                    .HasColumnName("capacity")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Extra)
                    .HasColumnName("extra")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkSubtoolsandconsumablesgroupid).HasColumnName("fk_subtoolsandconsumablesgroupid");

                entity.Property(e => e.FkUnitofmeasurementid).HasColumnName("fk_unitofmeasurementid");

                entity.Property(e => e.Iscustom).HasColumnName("iscustom");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nm)
                    .HasColumnName("nm")
                    .HasMaxLength(50);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(4000);

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Sw)
                    .HasColumnName("sw")
                    .HasMaxLength(50);

                entity.Property(e => e.ToolsandconsumablesdescriptionL1)
                    .HasColumnName("toolsandconsumablesdescription_l1")
                    .HasMaxLength(250);

                entity.Property(e => e.ToolsandconsumablesdescriptionL2)
                    .HasColumnName("toolsandconsumablesdescription_l2")
                    .HasMaxLength(250);

                entity.Property(e => e.ToolsandconsumablesdescriptionL3)
                    .HasColumnName("toolsandconsumablesdescription_l3")
                    .HasMaxLength(250);

                entity.Property(e => e.ToolsandconsumablesdescriptionL4)
                    .HasColumnName("toolsandconsumablesdescription_l4")
                    .HasMaxLength(250);

                entity.Property(e => e.ToolsandconsumablesdescriptionL5)
                    .HasColumnName("toolsandconsumablesdescription_l5")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblToolsAndConsumables)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblToolsAndConsumables_tblContractor");

                entity.HasOne(d => d.FkSubtoolsandconsumablesgroup)
                    .WithMany(p => p.TblToolsAndConsumables)
                    .HasForeignKey(d => d.FkSubtoolsandconsumablesgroupid)
                    .HasConstraintName("FK_tblToolsAndConsumables_tblSubToolsAndConsumablesGroup");

                entity.HasOne(d => d.FkUnitofmeasurement)
                    .WithMany(p => p.TblToolsAndConsumables)
                    .HasForeignKey(d => d.FkUnitofmeasurementid)
                    .HasConstraintName("FK_tblToolsAndConsumables_tblUnitOfMeasurement");
            });

            modelBuilder.Entity<TblTorqType>(entity =>
            {
                entity.HasKey(e => e.PkTorqtypeid);

                entity.ToTable("tblTorqType");

                entity.HasIndex(e => e.Torqtypecode)
                    .HasName("UQ_tblTorqType")
                    .IsUnique();

                entity.Property(e => e.PkTorqtypeid).HasColumnName("pk_torqtypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Torqtypecode)
                    .IsRequired()
                    .HasColumnName("torqtypecode")
                    .HasMaxLength(50);

                entity.Property(e => e.Torqtypedescription)
                    .IsRequired()
                    .HasColumnName("torqtypedescription")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<TblUnit>(entity =>
            {
                entity.HasKey(e => e.PkUnitid);

                entity.ToTable("tblUnit");

                entity.HasIndex(e => e.Exportcode)
                    .HasName("IX_tblUnit_2")
                    .IsUnique();

                entity.HasIndex(e => e.FkProcessareaid)
                    .HasName("IX_tblUnit_1");

                entity.HasIndex(e => new { e.FkProcessareaid, e.Unit })
                    .HasName("IX_tblUnit")
                    .IsUnique();

                entity.Property(e => e.PkUnitid).HasColumnName("pk_unitid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Exportcode)
                    .IsRequired()
                    .HasColumnName("exportcode")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.FkProcessareaid).HasColumnName("fk_processareaid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasColumnName("unit")
                    .HasMaxLength(50);

                entity.Property(e => e.Unitdescription)
                    .IsRequired()
                    .HasColumnName("unitdescription")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkProcessarea)
                    .WithMany(p => p.TblUnit)
                    .HasForeignKey(d => d.FkProcessareaid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUnit_tblProcessarea");
            });

            modelBuilder.Entity<TblUnitOfMeasurement>(entity =>
            {
                entity.HasKey(e => e.PkUnitofmeasurementid);

                entity.ToTable("tblUnitOfMeasurement");

                entity.HasIndex(e => e.Code)
                    .HasName("IX_tblUnitOfMeasurement")
                    .IsUnique();

                entity.Property(e => e.PkUnitofmeasurementid).HasColumnName("pk_unitofmeasurementid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblUser>(entity =>
            {
                entity.HasKey(e => e.PkUserid);

                entity.ToTable("tblUser");

                entity.HasIndex(e => e.FkApplicationcreatedid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkLanguageid);

                entity.HasIndex(e => e.FkSubcontractorid);

                entity.HasIndex(e => e.FkTimekeepingprojectid);

                entity.HasIndex(e => e.FkTimekeepingresourceid);

                entity.HasIndex(e => e.FkTimekeepingsubcodeid);

                entity.HasIndex(e => e.PkUserid)
                    .HasName("IX_tblScopeChecklist_fk_neededuserid");

                entity.HasIndex(e => e.Username)
                    .HasName("UK_tblUser_username")
                    .IsUnique();

                entity.Property(e => e.PkUserid).HasColumnName("pk_userid");

                entity.Property(e => e.Autologonname).HasColumnName("autologonname");

                entity.Property(e => e.Cardcustombarcode)
                    .HasColumnName("cardcustombarcode")
                    .HasMaxLength(100);

                entity.Property(e => e.Cardissueddate)
                    .HasColumnName("cardissueddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Cardreturneddate)
                    .HasColumnName("cardreturneddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Carlicenseplate)
                    .HasColumnName("carlicenseplate")
                    .HasMaxLength(100);

                entity.Property(e => e.Cellphonenumberhome)
                    .HasColumnName("cellphonenumberhome")
                    .HasMaxLength(20);

                entity.Property(e => e.Cellphonenumberwork)
                    .HasColumnName("cellphonenumberwork")
                    .HasMaxLength(20);

                entity.Property(e => e.City)
                    .HasColumnName("city")
                    .HasMaxLength(100);

                entity.Property(e => e.Country)
                    .HasColumnName("country")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Dateofbirth)
                    .HasColumnName("dateofbirth")
                    .HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .HasColumnName("department")
                    .HasMaxLength(255);

                entity.Property(e => e.Driverslicense)
                    .HasColumnName("driverslicense")
                    .HasMaxLength(100);

                entity.Property(e => e.Emailaddresshome)
                    .HasColumnName("emailaddresshome")
                    .HasMaxLength(250);

                entity.Property(e => e.Emailaddresswork)
                    .HasColumnName("emailaddresswork")
                    .HasMaxLength(250);

                entity.Property(e => e.Fax)
                    .HasColumnName("fax")
                    .HasMaxLength(100);

                entity.Property(e => e.Firstname)
                    .HasColumnName("firstname")
                    .HasMaxLength(75);

                entity.Property(e => e.Fiscalnr)
                    .HasColumnName("fiscalnr")
                    .HasMaxLength(100);

                entity.Property(e => e.FkApplicationcreatedid).HasColumnName("fk_applicationcreatedid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkLanguageid).HasColumnName("fk_languageid");

                entity.Property(e => e.FkSubcontractorid).HasColumnName("fk_subcontractorid");

                entity.Property(e => e.FkTimekeepingprojectid).HasColumnName("fk_timekeepingprojectid");

                entity.Property(e => e.FkTimekeepingresourceid).HasColumnName("fk_timekeepingresourceid");

                entity.Property(e => e.FkTimekeepingsubcodeid).HasColumnName("fk_timekeepingsubcodeid");

                entity.Property(e => e.Housenumber).HasColumnName("housenumber");

                entity.Property(e => e.Housenumberext)
                    .HasColumnName("housenumberext")
                    .HasMaxLength(10);

                entity.Property(e => e.Humanresourcenr)
                    .HasColumnName("humanresourcenr")
                    .HasMaxLength(50);

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Isfirstlogon).HasColumnName("isfirstlogon");

                entity.Property(e => e.Isreadonly).HasColumnName("isreadonly");

                entity.Property(e => e.Lastname)
                    .HasColumnName("lastname")
                    .HasMaxLength(75);

                entity.Property(e => e.Loginattempt)
                    .HasColumnName("loginattempt")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Memo)
                    .HasColumnName("memo")
                    .HasMaxLength(4000);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Nationality)
                    .HasColumnName("nationality")
                    .HasMaxLength(100);

                entity.Property(e => e.Passportnumber)
                    .HasColumnName("passportnumber")
                    .HasMaxLength(100);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasColumnName("password")
                    .HasMaxLength(255);

                entity.Property(e => e.Passwordmodified)
                    .HasColumnName("passwordmodified")
                    .HasColumnType("datetime");

                entity.Property(e => e.Permissionschanged)
                    .HasColumnName("permissionschanged")
                    .HasColumnType("datetime");

                entity.Property(e => e.Phonenumberhome)
                    .HasColumnName("phonenumberhome")
                    .HasMaxLength(20);

                entity.Property(e => e.Phonenumberwork)
                    .HasColumnName("phonenumberwork")
                    .HasMaxLength(20);

                entity.Property(e => e.Photo).HasColumnName("photo");

                entity.Property(e => e.Pincode)
                    .HasColumnName("pincode")
                    .HasMaxLength(4);

                entity.Property(e => e.Placeofbirth)
                    .HasColumnName("placeofbirth")
                    .HasMaxLength(100);

                entity.Property(e => e.Postalcode)
                    .HasColumnName("postalcode")
                    .HasMaxLength(10);

                entity.Property(e => e.Preposition)
                    .HasColumnName("preposition")
                    .HasMaxLength(75);

                entity.Property(e => e.Safetytraining)
                    .HasColumnName("safetytraining")
                    .HasMaxLength(100);

                entity.Property(e => e.Sex)
                    .HasColumnName("sex")
                    .HasMaxLength(10);

                entity.Property(e => e.Signaturestamp).HasColumnName("signaturestamp");

                entity.Property(e => e.Socialnr)
                    .HasColumnName("socialnr")
                    .HasMaxLength(100);

                entity.Property(e => e.Street)
                    .HasColumnName("street")
                    .HasMaxLength(100);

                entity.Property(e => e.Templockeduntil)
                    .HasColumnName("templockeduntil")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Userfunction)
                    .HasColumnName("userfunction")
                    .HasMaxLength(1000);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasColumnName("username")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkApplicationcreated)
                    .WithMany(p => p.TblUser)
                    .HasForeignKey(d => d.FkApplicationcreatedid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUser_fk_applicationcreatedid");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblUserFkContractor)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblUser_tblContractor");

                entity.HasOne(d => d.FkLanguage)
                    .WithMany(p => p.TblUser)
                    .HasForeignKey(d => d.FkLanguageid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUser_tblLanguage");

                entity.HasOne(d => d.FkSubcontractor)
                    .WithMany(p => p.TblUserFkSubcontractor)
                    .HasForeignKey(d => d.FkSubcontractorid)
                    .HasConstraintName("FK_tblUser_tblContractor_subcontractor");

                entity.HasOne(d => d.FkTimekeepingproject)
                    .WithMany(p => p.TblUser)
                    .HasForeignKey(d => d.FkTimekeepingprojectid)
                    .HasConstraintName("FK_tblUser_tblProject");

                entity.HasOne(d => d.FkTimekeepingresource)
                    .WithMany(p => p.TblUser)
                    .HasForeignKey(d => d.FkTimekeepingresourceid)
                    .HasConstraintName("FK_tblUser_tblResource");

                entity.HasOne(d => d.FkTimekeepingsubcode)
                    .WithMany(p => p.TblUser)
                    .HasForeignKey(d => d.FkTimekeepingsubcodeid)
                    .HasConstraintName("FK_tblUser_tblTimekeepingSubCode");
            });

            modelBuilder.Entity<TblUserApplicationProject>(entity =>
            {
                entity.HasKey(e => e.PkUserapplicationprojectid);

                entity.ToTable("tblUserApplicationProject");

                entity.HasIndex(e => e.FkApplicationid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkApplicationid, e.FkProjectid })
                    .HasName("UQ_tblUserApplicationProject")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkUserid, e.FkProjectid, e.FkApplicationid })
                    .HasName("IX_tblUserApplicationProject_fk_applicationid_with_includes");

                entity.Property(e => e.PkUserapplicationprojectid).HasColumnName("pk_userapplicationprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblUserApplicationProject)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserApplicationProject_tblApplication");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserApplicationProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblUserApplicationProject_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserApplicationProject)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserApplicationProject_tblUser");
            });

            modelBuilder.Entity<TblUserApplicationProjectRight>(entity =>
            {
                entity.HasKey(e => e.PkUserapplicationprojectrightid);

                entity.ToTable("tblUserApplicationProjectRight");

                entity.HasIndex(e => e.FkRightid);

                entity.HasIndex(e => e.FkUserapplicationprojectid);

                entity.HasIndex(e => new { e.FkUserapplicationprojectid, e.FkRightid })
                    .HasName("UQ_tblUserApplicationProjectRight")
                    .IsUnique();

                entity.Property(e => e.PkUserapplicationprojectrightid).HasColumnName("pk_userapplicationprojectrightid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRightid).HasColumnName("fk_rightid");

                entity.Property(e => e.FkUserapplicationprojectid).HasColumnName("fk_userapplicationprojectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Overridevalue).HasColumnName("overridevalue");

                entity.HasOne(d => d.FkRight)
                    .WithMany(p => p.TblUserApplicationProjectRight)
                    .HasForeignKey(d => d.FkRightid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserApplicationProjectRight_tblRight");

                entity.HasOne(d => d.FkUserapplicationproject)
                    .WithMany(p => p.TblUserApplicationProjectRight)
                    .HasForeignKey(d => d.FkUserapplicationprojectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserApplicationProjectRight_tblUserApplicationProject");
            });

            modelBuilder.Entity<TblUserApplicationProjectRole>(entity =>
            {
                entity.HasKey(e => e.PkUserapplicationprojectroleid);

                entity.ToTable("tblUserApplicationProjectRole");

                entity.HasIndex(e => e.FkRoleid);

                entity.HasIndex(e => e.FkUserapplicationprojectid);

                entity.HasIndex(e => new { e.FkUserapplicationprojectid, e.FkRoleid })
                    .HasName("UQ_tblUserApplicationProjectRole")
                    .IsUnique();

                entity.Property(e => e.PkUserapplicationprojectroleid).HasColumnName("pk_userapplicationprojectroleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRoleid).HasColumnName("fk_roleid");

                entity.Property(e => e.FkUserapplicationprojectid).HasColumnName("fk_userapplicationprojectid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRole)
                    .WithMany(p => p.TblUserApplicationProjectRole)
                    .HasForeignKey(d => d.FkRoleid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserApplicationProjectRole_tblRole");

                entity.HasOne(d => d.FkUserapplicationproject)
                    .WithMany(p => p.TblUserApplicationProjectRole)
                    .HasForeignKey(d => d.FkUserapplicationprojectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserApplicationProjectRole_tblUserApplicationProject");
            });

            modelBuilder.Entity<TblUserContractorField>(entity =>
            {
                entity.HasKey(e => e.PkUsercontractorfieldid);

                entity.ToTable("tblUserContractorField");

                entity.HasIndex(e => e.FkContractorfieldid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkUsercontractorfieldid).HasColumnName("pk_usercontractorfieldid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fieldcontent)
                    .IsRequired()
                    .HasColumnName("fieldcontent");

                entity.Property(e => e.FkContractorfieldid).HasColumnName("fk_contractorfieldid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkContractorfield)
                    .WithMany(p => p.TblUserContractorField)
                    .HasForeignKey(d => d.FkContractorfieldid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserContractorField_tblContractorField");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserContractorField)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserContractorField_tblUser");
            });

            modelBuilder.Entity<TblUserDashboard>(entity =>
            {
                entity.HasKey(e => e.PkUserdashboardid);

                entity.ToTable("tblUserDashboard");

                entity.HasIndex(e => e.Code)
                    .HasName("UK_tblUserDashboard_Code")
                    .IsUnique();

                entity.Property(e => e.PkUserdashboardid).HasColumnName("pk_userdashboardid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Layout)
                    .IsRequired()
                    .HasColumnName("layout");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblUserDepartment>(entity =>
            {
                entity.HasKey(e => e.PkUserdepartmentid);

                entity.ToTable("tblUserDepartment");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkUserid, e.FkDepartmentid })
                    .HasName("UC_tblUserDepartment")
                    .IsUnique();

                entity.Property(e => e.PkUserdepartmentid).HasColumnName("pk_userdepartmentid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDepartmentid).HasColumnName("fk_departmentid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDepartment)
                    .WithMany(p => p.TblUserDepartment)
                    .HasForeignKey(d => d.FkDepartmentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserDepartment_tblDepartment");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserDepartment)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDepartment_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserDepartment)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblScopeDepartment_tblUser");
            });

            modelBuilder.Entity<TblUserDepartmentSection>(entity =>
            {
                entity.HasKey(e => e.PkUserdepartmentsectionid);

                entity.ToTable("tblUserDepartmentSection");

                entity.HasIndex(e => e.FkDepartmentsectionid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkDepartmentsectionid })
                    .HasName("UK_tblUserMemberDepartmentSection")
                    .IsUnique();

                entity.Property(e => e.PkUserdepartmentsectionid).HasColumnName("pk_userdepartmentsectionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDepartmentsectionid).HasColumnName("fk_departmentsectionid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDepartmentsection)
                    .WithMany(p => p.TblUserDepartmentSection)
                    .HasForeignKey(d => d.FkDepartmentsectionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberDepartmentSection_tblDepartmentSection");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserDepartmentSection)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberDepartmentSection_tblUser");
            });

            modelBuilder.Entity<TblUserDocumentLabelGroup>(entity =>
            {
                entity.HasKey(e => e.PkUserdocumentlabelgroupid);

                entity.ToTable("tblUserDocumentLabelGroup");

                entity.HasIndex(e => e.FkDocumentlabelgroupid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkDocumentlabelgroupid, e.FkProjectid, e.FkUserid })
                    .HasName("UK_user_project_documentlabelgroup")
                    .IsUnique();

                entity.Property(e => e.PkUserdocumentlabelgroupid).HasColumnName("pk_userdocumentlabelgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelgroupid).HasColumnName("fk_documentlabelgroupid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabelgroup)
                    .WithMany(p => p.TblUserDocumentLabelGroup)
                    .HasForeignKey(d => d.FkDocumentlabelgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserDocumentLabelGroup_tblDocumentLabelGroup");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserDocumentLabelGroup)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblUserDocumentLabelGroup_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserDocumentLabelGroup)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserDocumentLabelGroup_tblUser");
            });

            modelBuilder.Entity<TblUserLislProgressPhase>(entity =>
            {
                entity.HasKey(e => e.PkUserlislprogressphaseid);

                entity.ToTable("tblUserLislProgressPhase");

                entity.HasIndex(e => e.FkLislprogressphaseid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkProjectid, e.FkLislprogressphaseid })
                    .HasName("UQ_tblUserLislProgressPhase")
                    .IsUnique();

                entity.Property(e => e.PkUserlislprogressphaseid).HasColumnName("pk_userlislprogressphaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLislprogressphaseid).HasColumnName("fk_lislprogressphaseid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkLislprogressphase)
                    .WithMany(p => p.TblUserLislProgressPhase)
                    .HasForeignKey(d => d.FkLislprogressphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserLislProgressPhase_tblLislProgressPhase");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserLislProgressPhase)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserLislProgressPhase_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserLislProgressPhase)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserLislProgressPhase_tblUserforeign");
            });

            modelBuilder.Entity<TblUserLogin>(entity =>
            {
                entity.HasKey(e => e.PkUserloginid);

                entity.ToTable("tblUserLogin");

                entity.HasIndex(e => e.FkApplicationid);

                entity.HasIndex(e => e.FkKickedbyuserid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.Sessionguid)
                    .HasName("UQ_tblUserLogin")
                    .IsUnique();

                entity.Property(e => e.PkUserloginid).HasColumnName("pk_userloginid");

                entity.Property(e => e.Applicationversion)
                    .IsRequired()
                    .HasColumnName("applicationversion")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.FkKickedbyuserid).HasColumnName("fk_kickedbyuserid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Isreadonlylogin).HasColumnName("isreadonlylogin");

                entity.Property(e => e.Kickedreason)
                    .HasColumnName("kickedreason")
                    .HasMaxLength(300);

                entity.Property(e => e.Lastheartbeat)
                    .HasColumnName("lastheartbeat")
                    .HasColumnType("datetime");

                entity.Property(e => e.Logindate)
                    .HasColumnName("logindate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Logoutdate)
                    .HasColumnName("logoutdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sessionguid).HasColumnName("sessionguid");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblUserLogin)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserLogin_tblApplication");

                entity.HasOne(d => d.FkKickedbyuser)
                    .WithMany(p => p.TblUserLoginFkKickedbyuser)
                    .HasForeignKey(d => d.FkKickedbyuserid)
                    .HasConstraintName("FK_tblUserLogin_tblUser_Kicked");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserLogin)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblUserLogin_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserLoginFkUser)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblUserLogin_tblUser");
            });

            modelBuilder.Entity<TblUserMemberContractor>(entity =>
            {
                entity.HasKey(e => e.PkUsermembercontractorid);

                entity.ToTable("tblUserMemberContractor", "rsy");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkContractorid, e.FkProjectid })
                    .HasName("IX_tblUserMemberContractor_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsermembercontractorid).HasColumnName("pk_usermembercontractorid");

                entity.Property(e => e.Canbookhours)
                    .HasColumnName("canbookhours")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Canbookprogress)
                    .HasColumnName("canbookprogress")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblUserMemberContractor)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberContractor_fk_contractorid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserMemberContractor)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberContractor_fk_projectid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserMemberContractor)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberContractor_fk_userid");
            });

            modelBuilder.Entity<TblUserMemberDiscipline>(entity =>
            {
                entity.HasKey(e => e.PkUsermemberdisciplineid);

                entity.ToTable("tblUserMemberDiscipline", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkSubdisciplineid)
                    .HasName("IX_tblUserMemberDiscipline_fk_disciplineid");

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkSubdisciplineid, e.FkProjectid })
                    .HasName("IX_tblUserMemberDiscipline_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsermemberdisciplineid).HasColumnName("pk_usermemberdisciplineid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkSubdisciplineid).HasColumnName("fk_subdisciplineid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserMemberDiscipline)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberDiscipline_fk_projectid");

                entity.HasOne(d => d.FkSubdiscipline)
                    .WithMany(p => p.TblUserMemberDiscipline)
                    .HasForeignKey(d => d.FkSubdisciplineid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblusermemberdiscipline_fk_subdisciplineid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserMemberDiscipline)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberDiscipline_fk_userid");
            });

            modelBuilder.Entity<TblUserMemberQcResource>(entity =>
            {
                entity.HasKey(e => e.PkUsermemberqcresourceid);

                entity.ToTable("tblUserMemberQcResource", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkResourceid, e.FkProjectid })
                    .HasName("IX_tblUserMemberQcResource_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsermemberqcresourceid).HasColumnName("pk_usermemberqcresourceid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserMemberQcResource)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberQcResource_fk_projectid");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblUserMemberQcResource)
                    .HasForeignKey(d => d.FkResourceid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberQcResource_fk_resourceid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserMemberQcResource)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberQcResource_fk_userid");
            });

            modelBuilder.Entity<TblUserMemberShortcode>(entity =>
            {
                entity.HasKey(e => e.PkUsermembershortcodeid);

                entity.ToTable("tblUserMemberShortcode", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkShortcodeid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkShortcodeid, e.FkProjectid })
                    .HasName("IX_tblUserMemberShortcode_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsermembershortcodeid).HasColumnName("pk_usermembershortcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkShortcodeid).HasColumnName("fk_shortcodeid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserMemberShortcode)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberShortcode_fk_projectid");

                entity.HasOne(d => d.FkShortcode)
                    .WithMany(p => p.TblUserMemberShortcode)
                    .HasForeignKey(d => d.FkShortcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberShortcode_fk_shortcodeid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserMemberShortcode)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberShortcode_fk_userid");
            });

            modelBuilder.Entity<TblUserMemberWpcode>(entity =>
            {
                entity.HasKey(e => e.PkUsermemberwpcodeid);

                entity.ToTable("tblUserMemberWpcode", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => e.FkWorkpreparationcodeid)
                    .HasName("IX_tblUserMemberWpcode_fk_wpcodeid");

                entity.HasIndex(e => new { e.FkUserid, e.FkWorkpreparationcodeid, e.FkProjectid })
                    .HasName("IX_tblUserMemberWpcode_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsermemberwpcodeid).HasColumnName("pk_usermemberwpcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.FkWorkpreparationcodeid).HasColumnName("fk_workpreparationcodeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserMemberWpcode)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberWpcode_fk_projectid");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserMemberWpcode)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberWpcode_fk_userid");

                entity.HasOne(d => d.FkWorkpreparationcode)
                    .WithMany(p => p.TblUserMemberWpcode)
                    .HasForeignKey(d => d.FkWorkpreparationcodeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserMemberWpcode_fk_workpreparationcodeid");
            });

            modelBuilder.Entity<TblUserPermitFunctionGroup>(entity =>
            {
                entity.HasKey(e => e.PkUserpermitfunctiongroupid);

                entity.ToTable("tblUserPermitFunctionGroup");

                entity.HasIndex(e => e.FkPermitfunctiongroupid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkPermitfunctiongroupid, e.FkProjectid })
                    .HasName("UK_tblUserPermitFunctionGroup_fk_userid_fk_permitfunctiongroupid_fk_projectid")
                    .IsUnique();

                entity.Property(e => e.PkUserpermitfunctiongroupid).HasColumnName("pk_userpermitfunctiongroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkPermitfunctiongroupid).HasColumnName("fk_permitfunctiongroupid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkPermitfunctiongroup)
                    .WithMany(p => p.TblUserPermitFunctionGroup)
                    .HasForeignKey(d => d.FkPermitfunctiongroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserPermitFunctionGroup_tblPermitFunctionGroup");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserPermitFunctionGroup)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserPermitFunctionGroup_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserPermitFunctionGroup)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserPermitFunctionGroup_tblUser");
            });

            modelBuilder.Entity<TblUserProjectOrganisationStructure>(entity =>
            {
                entity.HasKey(e => e.PkUserprojectorganisationstructureid);

                entity.ToTable("tblUserProjectOrganisationStructure");

                entity.HasIndex(e => e.FkOrganisationstructureid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkUserprojectorganisationstructureid).HasColumnName("pk_userprojectorganisationstructureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkOrganisationstructureid).HasColumnName("fk_organisationstructureid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkOrganisationstructure)
                    .WithMany(p => p.TblUserProjectOrganisationStructure)
                    .HasForeignKey(d => d.FkOrganisationstructureid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserProjectOrganisationStructure_tblOrganisationStructure");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserProjectOrganisationStructure)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserProjectOrganisationStructure_tblProject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserProjectOrganisationStructure)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserProjectOrganisationStructure_tblUser");
            });

            modelBuilder.Entity<TblUserReport>(entity =>
            {
                entity.HasKey(e => e.PkUserreportid);

                entity.ToTable("tblUserReport");

                entity.HasIndex(e => e.Code)
                    .HasName("UK_tblUserReport_Code")
                    .IsUnique();

                entity.Property(e => e.PkUserreportid).HasColumnName("pk_userreportid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasColumnName("code")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Datasource).HasColumnName("datasource");

                entity.Property(e => e.Groupbyscope).HasColumnName("groupbyscope");

                entity.Property(e => e.Layout)
                    .IsRequired()
                    .HasColumnName("layout");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Published).HasColumnName("published");

                entity.Property(e => e.Reportmodule).HasColumnName("reportmodule");
            });

            modelBuilder.Entity<TblUserReportFiltersToHide>(entity =>
            {
                entity.HasKey(e => e.PkUserreportfilterstohideid);

                entity.ToTable("tblUserReportFiltersToHide");

                entity.HasIndex(e => e.Filterenum);

                entity.HasIndex(e => e.FkUserreportid);

                entity.Property(e => e.PkUserreportfilterstohideid).HasColumnName("pk_userreportfilterstohideid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Filterenum).HasColumnName("filterenum");

                entity.Property(e => e.FkUserreportid).HasColumnName("fk_userreportid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkUserreport)
                    .WithMany(p => p.TblUserReportFiltersToHide)
                    .HasForeignKey(d => d.FkUserreportid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserReportFiltersToHide_fk_userreportid");
            });

            modelBuilder.Entity<TblUserReviewSubGroup>(entity =>
            {
                entity.HasKey(e => e.PkUserreviewsubgroupid);

                entity.ToTable("tblUserReviewSubGroup");

                entity.HasIndex(e => e.FkReviewsubgroupid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkReviewsubgroupid })
                    .HasName("UK_tblUserReviewSubGroup")
                    .IsUnique();

                entity.Property(e => e.PkUserreviewsubgroupid).HasColumnName("pk_userreviewsubgroupid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkReviewsubgroupid).HasColumnName("fk_reviewsubgroupid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkReviewsubgroup)
                    .WithMany(p => p.TblUserReviewSubGroup)
                    .HasForeignKey(d => d.FkReviewsubgroupid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserReviewSubGroup_tblReviewSubGroup");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserReviewSubGroup)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserReviewSubGroup_tblUser");
            });

            modelBuilder.Entity<TblUserSecurity>(entity =>
            {
                entity.HasKey(e => e.PkUsersecurityid);

                entity.ToTable("tblUserSecurity", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkReviewgroupid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkProjectid })
                    .HasName("IX_tblUserSecurity_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsersecurityid).HasColumnName("pk_usersecurityid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkReviewgroupid).HasColumnName("fk_reviewgroupid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Hoursinweek).HasColumnName("hoursinweek");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserSecurity)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserSecurity_fk_projectid");

                entity.HasOne(d => d.FkReviewgroup)
                    .WithMany(p => p.TblUserSecurity)
                    .HasForeignKey(d => d.FkReviewgroupid)
                    .HasConstraintName("FK_tblUserSecurity_tblReviewGroup");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserSecurity)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserSecurity_fk_userid");
            });

            modelBuilder.Entity<TblUserSetting>(entity =>
            {
                entity.HasKey(e => e.PkUsersetting);

                entity.ToTable("tblUserSetting");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkSubprojectid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkProjectid, e.FkUserid, e.Keyfield, e.Application, e.FkSubprojectid })
                    .HasName("IX_tblUserSetting_keyfields")
                    .IsUnique();

                entity.Property(e => e.PkUsersetting).HasColumnName("pk_usersetting");

                entity.Property(e => e.Application).HasColumnName("application");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkSubprojectid).HasColumnName("fk_subprojectid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Keyfield)
                    .IsRequired()
                    .HasColumnName("keyfield")
                    .HasMaxLength(100);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Value).HasColumnName("value");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblUserSetting)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblUserSetting_tblProject");

                entity.HasOne(d => d.FkSubproject)
                    .WithMany(p => p.TblUserSetting)
                    .HasForeignKey(d => d.FkSubprojectid)
                    .HasConstraintName("FK_tblUserSetting_tblSubproject");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserSetting)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserSetting_tblUser");
            });

            modelBuilder.Entity<TblUserTimekeepingPeriod>(entity =>
            {
                entity.HasKey(e => e.PkUsertimekeepingperiodid);

                entity.ToTable("tblUserTimekeepingPeriod");

                entity.HasIndex(e => e.FkTimekeepingperiodid);

                entity.HasIndex(e => e.FkUserid);

                entity.HasIndex(e => new { e.FkUserid, e.FkTimekeepingperiodid })
                    .HasName("IX_tblUserTimekeepingPeriod_U1")
                    .IsUnique();

                entity.Property(e => e.PkUsertimekeepingperiodid).HasColumnName("pk_usertimekeepingperiodid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkTimekeepingperiodid).HasColumnName("fk_timekeepingperiodid");

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkTimekeepingperiod)
                    .WithMany(p => p.TblUserTimekeepingPeriod)
                    .HasForeignKey(d => d.FkTimekeepingperiodid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserTimekeepingPeriod_tblTimekeepingPeriod");

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblUserTimekeepingPeriod)
                    .HasForeignKey(d => d.FkUserid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblUserTimekeepingPeriod_tblUser");
            });

            modelBuilder.Entity<TblViewLayout>(entity =>
            {
                entity.HasKey(e => e.PkViewlayoutid);

                entity.ToTable("tblViewLayout");

                entity.HasIndex(e => e.FkUserid);

                entity.Property(e => e.PkViewlayoutid).HasColumnName("pk_viewlayoutid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkUserid).HasColumnName("fk_userid");

                entity.Property(e => e.Formname)
                    .IsRequired()
                    .HasColumnName("formname")
                    .HasMaxLength(150);

                entity.Property(e => e.Isadminview).HasColumnName("isadminview");

                entity.Property(e => e.Isconverted).HasColumnName("isconverted");

                entity.Property(e => e.Isdefaultview).HasColumnName("isdefaultview");

                entity.Property(e => e.Layout)
                    .IsRequired()
                    .HasColumnName("layout");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Viewlayoutname)
                    .IsRequired()
                    .HasColumnName("viewlayoutname")
                    .HasMaxLength(50);

                entity.Property(e => e.Viewname)
                    .IsRequired()
                    .HasColumnName("viewname")
                    .HasMaxLength(150);

                entity.HasOne(d => d.FkUser)
                    .WithMany(p => p.TblViewLayout)
                    .HasForeignKey(d => d.FkUserid)
                    .HasConstraintName("FK_tblViewLayout_tblUser1");
            });

            modelBuilder.Entity<TblWallpaper>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperid);

                entity.ToTable("tblWallpaper", "rsy");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Wallpapername })
                    .HasName("UQ__tblWallpaper__2AC11801")
                    .IsUnique();

                entity.Property(e => e.PkWallpaperid).HasColumnName("pk_wallpaperid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Datecolumndisplaywidth)
                    .HasColumnName("datecolumndisplaywidth")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Enddate)
                    .HasColumnName("enddate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2014-01-01 00:00')");

                entity.Property(e => e.Exclude100percent).HasColumnName("exclude100percent");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Groupcolor).HasColumnName("groupcolor");

                entity.Property(e => e.Jobtostartcolumndisplaywidth)
                    .HasColumnName("jobtostartcolumndisplaywidth")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Jobtostartcolumnrptwidth)
                    .HasColumnName("jobtostartcolumnrptwidth")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Jobviewtype)
                    .HasColumnName("jobviewtype")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Plusweeks)
                    .HasColumnName("plusweeks")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rptfontsize).HasColumnName("rptfontsize");

                entity.Property(e => e.Rptheightdetailrow).HasColumnName("rptheightdetailrow");

                entity.Property(e => e.Rptpagebreakgrouping).HasColumnName("rptpagebreakgrouping");

                entity.Property(e => e.Rptshowitemtostarticon).HasColumnName("rptshowitemtostarticon");

                entity.Property(e => e.Rptshowprogress).HasColumnName("rptshowprogress");

                entity.Property(e => e.Rptshowqc).HasColumnName("rptshowqc");

                entity.Property(e => e.Showactivephases).HasColumnName("showactivephases");

                entity.Property(e => e.Showisolationgroupingcolors).HasColumnName("showisolationgroupingcolors");

                entity.Property(e => e.Showitemtostarticon).HasColumnName("showitemtostarticon");

                entity.Property(e => e.Showjobtostartcolumn).HasColumnName("showjobtostartcolumn");

                entity.Property(e => e.Showmainphasecolumns)
                    .HasColumnName("showmainphasecolumns")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Showoverallprogresscolumn)
                    .HasColumnName("showoverallprogresscolumn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Showprogressonmainphase).HasColumnName("showprogressonmainphase");

                entity.Property(e => e.Showqccolumn)
                    .HasColumnName("showqccolumn")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Startdate)
                    .HasColumnName("startdate")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2014-01-01 00:00')");

                entity.Property(e => e.Thisweek).HasColumnName("thisweek");

                entity.Property(e => e.Wallpapername)
                    .IsRequired()
                    .HasColumnName("wallpapername")
                    .HasMaxLength(100);

                entity.Property(e => e.Wallpapertype)
                    .HasColumnName("wallpapertype")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblWallpaper)
                    .HasForeignKey(d => d.FkProjectid)
                    .HasConstraintName("FK_tblWallpaper_fk_projectid");
            });

            modelBuilder.Entity<TblWallpaperBand>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperbandid);

                entity.ToTable("tblWallpaperBand", "rsy");

                entity.HasIndex(e => e.FkWallpaperid);

                entity.Property(e => e.PkWallpaperbandid).HasColumnName("pk_wallpaperbandid");

                entity.Property(e => e.Bandname)
                    .IsRequired()
                    .HasColumnName("bandname")
                    .HasMaxLength(100);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Displayformat)
                    .HasColumnName("displayformat")
                    .HasDefaultValueSql("((3))");

                entity.Property(e => e.Displayheightvertical).HasColumnName("displayheightvertical");

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Isvertical).HasColumnName("isvertical");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Rptheight).HasColumnName("rptheight");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblWallpaperBand)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperBand_fk_wallpaperid");
            });

            modelBuilder.Entity<TblWallpaperDynamicCol>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperdynamiccolid);

                entity.ToTable("tblWallpaperDynamicCol", "rsy");

                entity.HasIndex(e => e.FkWallpaperid);

                entity.HasIndex(e => new { e.FkWallpaperid, e.Columnname })
                    .HasName("IX_tblWallpaperDynamicCol_U1")
                    .IsUnique();

                entity.Property(e => e.PkWallpaperdynamiccolid).HasColumnName("pk_wallpaperdynamiccolid");

                entity.Property(e => e.Bordercolor).HasColumnName("bordercolor");

                entity.Property(e => e.Columnname)
                    .IsRequired()
                    .HasColumnName("columnname")
                    .HasMaxLength(250);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Position).HasColumnName("position");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblWallpaperDynamicCol)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperDynamicCol_fk_wallpaperid");
            });

            modelBuilder.Entity<TblWallpaperDynamicColDetail>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperdynamiccoldetaiid);

                entity.ToTable("tblWallpaperDynamicColDetail", "rsy");

                entity.HasIndex(e => e.FkLibraryactivejobid);

                entity.HasIndex(e => e.FkMainphaseid);

                entity.HasIndex(e => e.FkResourceid);

                entity.HasIndex(e => e.FkSubphaseid);

                entity.HasIndex(e => e.FkWallpaperdynamiccolid);

                entity.Property(e => e.PkWallpaperdynamiccoldetaiid).HasColumnName("pk_wallpaperdynamiccoldetaiid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkLibraryactivejobid).HasColumnName("fk_libraryactivejobid");

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkResourceid).HasColumnName("fk_resourceid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkWallpaperdynamiccolid).HasColumnName("fk_wallpaperdynamiccolid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.HasOne(d => d.FkLibraryactivejob)
                    .WithMany(p => p.TblWallpaperDynamicColDetail)
                    .HasForeignKey(d => d.FkLibraryactivejobid)
                    .HasConstraintName("FK_tblWallpaperDynamicColDetail_tblLibraryActiveJob");

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblWallpaperDynamicColDetail)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .HasConstraintName("FK_tblWallpaperDynamicColDetail_tblMainPhase");

                entity.HasOne(d => d.FkResource)
                    .WithMany(p => p.TblWallpaperDynamicColDetail)
                    .HasForeignKey(d => d.FkResourceid)
                    .HasConstraintName("FK_tblWallpaperDynamicColDetail_tblResource");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblWallpaperDynamicColDetail)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .HasConstraintName("FK_tblWallpaperDynamicColDetail_tblSubPhase");

                entity.HasOne(d => d.FkWallpaperdynamiccol)
                    .WithMany(p => p.TblWallpaperDynamicColDetail)
                    .HasForeignKey(d => d.FkWallpaperdynamiccolid)
                    .HasConstraintName("FK_tblWallpaperDynamicColDetail_tblWallpaperDynamicCol");
            });

            modelBuilder.Entity<TblWallpaperFilter>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperfilterid);

                entity.ToTable("tblWallpaperFilter", "rsy");

                entity.HasIndex(e => e.FkWallpaperid);

                entity.Property(e => e.PkWallpaperfilterid).HasColumnName("pk_wallpaperfilterid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Fieldname)
                    .IsRequired()
                    .HasColumnName("fieldname")
                    .HasMaxLength(150);

                entity.Property(e => e.Filter)
                    .IsRequired()
                    .HasColumnName("filter");

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Visualfilter)
                    .IsRequired()
                    .HasColumnName("visualfilter");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblWallpaperFilter)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperFilter_fk_wallpaperid");
            });

            modelBuilder.Entity<TblWallpaperIsolationCol>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperisolationcol);

                entity.ToTable("tblWallpaperIsolationCol", "rsy");

                entity.HasIndex(e => e.FkMainphaseid)
                    .HasName("IX_tblWallpaperIsolationCol_tblMainPhase");

                entity.HasIndex(e => e.FkSubphaseid)
                    .HasName("IX_tblWallpaperIsolationCol_tblSubPhase");

                entity.HasIndex(e => e.FkWallpaperid)
                    .HasName("IX_tblWallpaperIsolationCol_tblWallpaper");

                entity.Property(e => e.PkWallpaperisolationcol).HasColumnName("pk_wallpaperisolationcol");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkSubphaseid).HasColumnName("fk_subphaseid");

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblWallpaperIsolationCol)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperIsolationCol_tblMainPhase");

                entity.HasOne(d => d.FkSubphase)
                    .WithMany(p => p.TblWallpaperIsolationCol)
                    .HasForeignKey(d => d.FkSubphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperIsolationCol_tblSubPhase");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblWallpaperIsolationCol)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperIsolationCol_tblWallpaper");
            });

            modelBuilder.Entity<TblWallpaperMainPhase>(entity =>
            {
                entity.HasKey(e => e.PkWallpapermainphaseid);

                entity.ToTable("tblWallpaperMainPhase", "rsy");

                entity.HasIndex(e => e.FkMainphaseid)
                    .HasName("IX_tblWallpaperMainPhases_fk_mainphaseid");

                entity.HasIndex(e => e.FkWallpaperid)
                    .HasName("IX_tblWallpaperMainPhases_fk_wallpaperid");

                entity.Property(e => e.PkWallpapermainphaseid).HasColumnName("pk_wallpapermainphaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMainphaseid).HasColumnName("fk_mainphaseid");

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMainphase)
                    .WithMany(p => p.TblWallpaperMainPhase)
                    .HasForeignKey(d => d.FkMainphaseid)
                    .HasConstraintName("FK_tblWallpaperMainPhase_tblMainPhase");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblWallpaperMainPhase)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .HasConstraintName("FK_tblWallpaperMainPhase_tblWallpaper");
            });

            modelBuilder.Entity<TblWallpaperStaticCol>(entity =>
            {
                entity.HasKey(e => e.PkWallpaperstaticcolid);

                entity.ToTable("tblWallpaperStaticCol", "rsy");

                entity.HasIndex(e => e.FkPlantcustomid);

                entity.HasIndex(e => e.FkWallpaperid);

                entity.HasIndex(e => new { e.FkWallpaperid, e.Columnname })
                    .HasName("IX_tblWallpaperStaticCol_U1");

                entity.Property(e => e.PkWallpaperstaticcolid).HasColumnName("pk_wallpaperstaticcolid");

                entity.Property(e => e.Columnname)
                    .IsRequired()
                    .HasColumnName("columnname")
                    .HasMaxLength(150);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Displayformat)
                    .HasColumnName("displayformat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Displaywidth).HasColumnName("displaywidth");

                entity.Property(e => e.FkPlantcustomid).HasColumnName("fk_plantcustomid");

                entity.Property(e => e.FkWallpaperid).HasColumnName("fk_wallpaperid");

                entity.Property(e => e.Isfixed).HasColumnName("isfixed");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Position).HasColumnName("position");

                entity.Property(e => e.Rptwidth).HasColumnName("rptwidth");

                entity.Property(e => e.Statictype).HasColumnName("statictype");

                entity.Property(e => e.Visiblegroupindex).HasColumnName("visiblegroupindex");

                entity.HasOne(d => d.FkPlantcustom)
                    .WithMany(p => p.TblWallpaperStaticCol)
                    .HasForeignKey(d => d.FkPlantcustomid)
                    .HasConstraintName("FK_tblWallpaperStaticCol_tblPlantCustom");

                entity.HasOne(d => d.FkWallpaper)
                    .WithMany(p => p.TblWallpaperStaticCol)
                    .HasForeignKey(d => d.FkWallpaperid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWallpaperStaticCol_fk_wallpaperid");
            });

            modelBuilder.Entity<TblWbs>(entity =>
            {
                entity.HasKey(e => e.PkWbsid);

                entity.ToTable("tblWbs");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkWbsparentid);

                entity.HasIndex(e => new { e.FkProjectid, e.Exportcode })
                    .HasName("UQ_tblWbs_projectid_exportcode")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProjectid, e.Wbsnr })
                    .HasName("UQ_tblWbs_projectid_wbsnr")
                    .IsUnique();

                entity.Property(e => e.PkWbsid).HasColumnName("pk_wbsid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Exportcode)
                    .IsRequired()
                    .HasColumnName("exportcode")
                    .HasMaxLength(3);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkWbsparentid).HasColumnName("fk_wbsparentid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Wbsdescription)
                    .IsRequired()
                    .HasColumnName("wbsdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Wbsname)
                    .IsRequired()
                    .HasColumnName("wbsname")
                    .HasMaxLength(100);

                entity.Property(e => e.Wbsnr)
                    .IsRequired()
                    .HasColumnName("wbsnr")
                    .HasMaxLength(100);

                entity.Property(e => e.Wbssortorder)
                    .IsRequired()
                    .HasColumnName("wbssortorder")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblWbs)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWbs_tblProject");

                entity.HasOne(d => d.FkWbsparent)
                    .WithMany(p => p.InverseFkWbsparent)
                    .HasForeignKey(d => d.FkWbsparentid)
                    .HasConstraintName("FK_tblWbs_tblWbs");
            });

            modelBuilder.Entity<TblWebToken>(entity =>
            {
                entity.HasKey(e => e.TokenKey);

                entity.ToTable("tblWebToken");

                entity.Property(e => e.TokenKey)
                    .HasColumnName("token_key")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Expiresdate)
                    .HasColumnName("expiresdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("token")
                    .IsUnicode(false);

                entity.Property(e => e.Tokentype).HasColumnName("tokentype");
            });

            modelBuilder.Entity<TblWeldConnection>(entity =>
            {
                entity.HasKey(e => e.PkWeldconnectionid);

                entity.ToTable("tblWeldConnection");

                entity.HasIndex(e => e.FkConnectiontypeid);

                entity.HasIndex(e => e.FkFillermaterialid);

                entity.HasIndex(e => e.FkLislid);

                entity.HasIndex(e => e.FkMaterialpipespecid);

                entity.HasIndex(e => e.FkNdeclassid);

                entity.HasIndex(e => e.FkPipelineid);

                entity.HasIndex(e => e.FkPwhtreadybyid);

                entity.HasIndex(e => e.FkReadyby);

                entity.HasIndex(e => e.FkWeldprocedureid);

                entity.HasIndex(e => e.FkWeldprocedurespecificationid);

                entity.HasIndex(e => e.FkWeldprocessid);

                entity.HasIndex(e => new { e.FkLislid, e.Weldconnectionnr, e.Weldconnectionsubnr })
                    .HasName("UK_tblWeldConnection_LislNrCombination")
                    .IsUnique();

                entity.Property(e => e.PkWeldconnectionid).HasColumnName("pk_weldconnectionid");

                entity.Property(e => e.Area)
                    .HasColumnName("area")
                    .HasMaxLength(50);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Designcode)
                    .HasColumnName("designcode")
                    .HasMaxLength(100);

                entity.Property(e => e.Elevation)
                    .HasColumnName("elevation")
                    .HasMaxLength(50);

                entity.Property(e => e.FkConnectiontypeid).HasColumnName("fk_connectiontypeid");

                entity.Property(e => e.FkFillermaterialid).HasColumnName("fk_fillermaterialid");

                entity.Property(e => e.FkLislid).HasColumnName("fk_lislid");

                entity.Property(e => e.FkMaterialpipespecid).HasColumnName("fk_materialpipespecid");

                entity.Property(e => e.FkNdeclassid).HasColumnName("fk_ndeclassid");

                entity.Property(e => e.FkPipelineid).HasColumnName("fk_pipelineid");

                entity.Property(e => e.FkPwhtreadybyid).HasColumnName("fk_pwhtreadybyid");

                entity.Property(e => e.FkReadyby).HasColumnName("fk_readyby");

                entity.Property(e => e.FkWeldprocedureid).HasColumnName("fk_weldprocedureid");

                entity.Property(e => e.FkWeldprocedurespecificationid).HasColumnName("fk_weldprocedurespecificationid");

                entity.Property(e => e.FkWeldprocessid).HasColumnName("fk_weldprocessid");

                entity.Property(e => e.Ispostpwht).HasColumnName("ispostpwht");

                entity.Property(e => e.Isprepwht).HasColumnName("isprepwht");

                entity.Property(e => e.Isrejectedconnection).HasColumnName("isrejectedconnection");

                entity.Property(e => e.Isrepairconnection).HasColumnName("isrepairconnection");

                entity.Property(e => e.Lasinchesdin)
                    .HasColumnName("lasinchesdin")
                    .HasColumnType("decimal(8, 2)");

                entity.Property(e => e.Locationenumvalue).HasColumnName("locationenumvalue");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Notes)
                    .HasColumnName("notes")
                    .HasMaxLength(250);

                entity.Property(e => e.Pwhtreadydate)
                    .HasColumnName("pwhtreadydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Pwhtreportnr)
                    .HasColumnName("pwhtreportnr")
                    .HasMaxLength(25);

                entity.Property(e => e.Readydate)
                    .HasColumnName("readydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(125);

                entity.Property(e => e.Repairnr).HasColumnName("repairnr");

                entity.Property(e => e.Weldconnectionautonr)
                    .HasColumnName("weldconnectionautonr")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldconnectionnr)
                    .HasColumnName("weldconnectionnr")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldconnectionsubnr)
                    .HasColumnName("weldconnectionsubnr")
                    .HasMaxLength(5);

                entity.HasOne(d => d.FkConnectiontype)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkConnectiontypeid)
                    .HasConstraintName("FK_tblWeldConnection_tblConnectionType");

                entity.HasOne(d => d.FkFillermaterial)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkFillermaterialid)
                    .HasConstraintName("FK_tblWeldConnection_tblFillerMaterial");

                entity.HasOne(d => d.FkLisl)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkLislid)
                    .HasConstraintName("FK_tblWeldConnection_tblLISL");

                entity.HasOne(d => d.FkMaterialpipespec)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkMaterialpipespecid)
                    .HasConstraintName("FK_tblWeldConnection_tblMaterialPipeSpec");

                entity.HasOne(d => d.FkNdeclass)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkNdeclassid)
                    .HasConstraintName("FK_tblWeldConnection_tblNdeClass");

                entity.HasOne(d => d.FkPipeline)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkPipelineid)
                    .HasConstraintName("FK_tblWeldConnection_tblPipeline");

                entity.HasOne(d => d.FkPwhtreadyby)
                    .WithMany(p => p.TblWeldConnectionFkPwhtreadyby)
                    .HasForeignKey(d => d.FkPwhtreadybyid)
                    .HasConstraintName("FK_tblWeldConnection_tblUser_pwhtreadyby");

                entity.HasOne(d => d.FkReadybyNavigation)
                    .WithMany(p => p.TblWeldConnectionFkReadybyNavigation)
                    .HasForeignKey(d => d.FkReadyby)
                    .HasConstraintName("FK_tblWeldConnection_tblUser_readyby");

                entity.HasOne(d => d.FkWeldprocedure)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkWeldprocedureid)
                    .HasConstraintName("FK_tblWeldConnection_tblWeldProcedure");

                entity.HasOne(d => d.FkWeldprocedurespecification)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkWeldprocedurespecificationid)
                    .HasConstraintName("FK_tblWeldConnection_tblWeldProcedureSpecification");

                entity.HasOne(d => d.FkWeldprocess)
                    .WithMany(p => p.TblWeldConnection)
                    .HasForeignKey(d => d.FkWeldprocessid)
                    .HasConstraintName("FK_tblWeldConnection_tblWeldProcess");
            });

            modelBuilder.Entity<TblWeldConnectionPart>(entity =>
            {
                entity.HasKey(e => e.PkWeldconnectionpartid);

                entity.ToTable("tblWeldConnectionPart");

                entity.HasIndex(e => e.FkBasematerialid);

                entity.HasIndex(e => e.FkCertificateid);

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkLbsid);

                entity.HasIndex(e => e.FkMateriallibraryid);

                entity.HasIndex(e => e.FkPartid);

                entity.HasIndex(e => e.FkPipetypeid);

                entity.HasIndex(e => e.FkPnid);

                entity.HasIndex(e => e.FkScheduleid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => e.FkWeldconnectionid);

                entity.HasIndex(e => new { e.FkWeldconnectionid, e.FkPartid })
                    .HasName("UK_tblWeldConnectionPart")
                    .IsUnique();

                entity.Property(e => e.PkWeldconnectionpartid).HasColumnName("pk_weldconnectionpartid");

                entity.Property(e => e.Certificateqty).HasColumnName("certificateqty");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBasematerialid).HasColumnName("fk_basematerialid");

                entity.Property(e => e.FkCertificateid).HasColumnName("fk_certificateid");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkLbsid).HasColumnName("fk_lbsid");

                entity.Property(e => e.FkMateriallibraryid).HasColumnName("fk_materiallibraryid");

                entity.Property(e => e.FkPartid).HasColumnName("fk_partid");

                entity.Property(e => e.FkPipetypeid).HasColumnName("fk_pipetypeid");

                entity.Property(e => e.FkPnid).HasColumnName("fk_pnid");

                entity.Property(e => e.FkScheduleid).HasColumnName("fk_scheduleid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.FkWeldconnectionid).HasColumnName("fk_weldconnectionid");

                entity.Property(e => e.Isreusedpart).HasColumnName("isreusedpart");

                entity.Property(e => e.Materiallibraryqty).HasColumnName("materiallibraryqty");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Pipelengthansi)
                    .HasColumnName("pipelengthansi")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Pipelengthdin)
                    .HasColumnName("pipelengthdin")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.HasOne(d => d.FkBasematerial)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkBasematerialid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblBaseMaterial");

                entity.HasOne(d => d.FkCertificate)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkCertificateid)
                    .HasConstraintName("FK_tblWeldConnectionPart_Certificate");

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblDn");

                entity.HasOne(d => d.FkLbs)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkLbsid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblLbs");

                entity.HasOne(d => d.FkMateriallibrary)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkMateriallibraryid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblMatLibrary");

                entity.HasOne(d => d.FkPart)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkPartid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblPart");

                entity.HasOne(d => d.FkPipetype)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkPipetypeid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblPipeType");

                entity.HasOne(d => d.FkPn)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkPnid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblPn");

                entity.HasOne(d => d.FkSchedule)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkScheduleid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblSchedule");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblThickness");

                entity.HasOne(d => d.FkWeldconnection)
                    .WithMany(p => p.TblWeldConnectionPart)
                    .HasForeignKey(d => d.FkWeldconnectionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldConnectionPart_tblWeldConnection");
            });

            modelBuilder.Entity<TblWeldConnectionWelder>(entity =>
            {
                entity.HasKey(e => e.PkWeldconnectionwelderid);

                entity.ToTable("tblWeldConnectionWelder");

                entity.HasIndex(e => e.FkWeldconnectionid);

                entity.HasIndex(e => e.FkWelderid);

                entity.HasIndex(e => new { e.FkWeldconnectionid, e.FkWelderid })
                    .HasName("UK_tblWeldConnectionWelder")
                    .IsUnique();

                entity.Property(e => e.PkWeldconnectionwelderid).HasColumnName("pk_weldconnectionwelderid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWeldconnectionid).HasColumnName("fk_weldconnectionid");

                entity.Property(e => e.FkWelderid).HasColumnName("fk_welderid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkWeldconnection)
                    .WithMany(p => p.TblWeldConnectionWelder)
                    .HasForeignKey(d => d.FkWeldconnectionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldConnectionWelder_tblWeldConnection");

                entity.HasOne(d => d.FkWelder)
                    .WithMany(p => p.TblWeldConnectionWelder)
                    .HasForeignKey(d => d.FkWelderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldConnectionWelder_tblWelder");
            });

            modelBuilder.Entity<TblWeldConsumables>(entity =>
            {
                entity.HasKey(e => e.PkWeldconsumablesid);

                entity.ToTable("tblWeldConsumables");

                entity.Property(e => e.PkWeldconsumablesid).HasColumnName("pk_weldconsumablesid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldconsumablescode)
                    .IsRequired()
                    .HasColumnName("weldconsumablescode")
                    .HasMaxLength(15);

                entity.Property(e => e.Weldconsumablesdescription)
                    .IsRequired()
                    .HasColumnName("weldconsumablesdescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblWeldElectrode>(entity =>
            {
                entity.HasKey(e => e.PkWeldelectrodeid);

                entity.ToTable("tblWeldElectrode");

                entity.HasIndex(e => e.Weldelectrodecode)
                    .HasName("UK_tblWeldElectrodeCode")
                    .IsUnique();

                entity.Property(e => e.PkWeldelectrodeid).HasColumnName("pk_weldelectrodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldelectrodecode)
                    .IsRequired()
                    .HasColumnName("weldelectrodecode")
                    .HasMaxLength(25);

                entity.Property(e => e.Weldelectrodedescription)
                    .IsRequired()
                    .HasColumnName("weldelectrodedescription")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<TblWelder>(entity =>
            {
                entity.HasKey(e => e.PkWelderid);

                entity.ToTable("tblWelder");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkSubcontractorid);

                entity.HasIndex(e => e.Name)
                    .HasName("UQ__tblWelder__0DE4E231")
                    .IsUnique();

                entity.HasIndex(e => e.Number)
                    .HasName("UQ__tblWelder__0ED9066A")
                    .IsUnique();

                entity.Property(e => e.PkWelderid).HasColumnName("pk_welderid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkSubcontractorid).HasColumnName("fk_subcontractorid");

                entity.Property(e => e.Isactive).HasColumnName("isactive");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("name")
                    .HasMaxLength(50);

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasColumnName("number")
                    .HasMaxLength(10);

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblWelderFkContractor)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblWelder_tblContractor");

                entity.HasOne(d => d.FkSubcontractor)
                    .WithMany(p => p.TblWelderFkSubcontractor)
                    .HasForeignKey(d => d.FkSubcontractorid)
                    .HasConstraintName("FK_tblWelder_tblContractor_sub");
            });

            modelBuilder.Entity<TblWelderBranch>(entity =>
            {
                entity.HasKey(e => e.PkWelderbranchid);

                entity.ToTable("tblWelderBranch");

                entity.HasIndex(e => e.FkBranchid);

                entity.HasIndex(e => e.FkWelderid);

                entity.Property(e => e.PkWelderbranchid).HasColumnName("pk_welderbranchid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBranchid).HasColumnName("fk_branchid");

                entity.Property(e => e.FkWelderid).HasColumnName("fk_welderid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkBranch)
                    .WithMany(p => p.TblWelderBranch)
                    .HasForeignKey(d => d.FkBranchid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderBranch_tblBranch");

                entity.HasOne(d => d.FkWelder)
                    .WithMany(p => p.TblWelderBranch)
                    .HasForeignKey(d => d.FkWelderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderBranch_tblWelder");
            });

            modelBuilder.Entity<TblWelderProject>(entity =>
            {
                entity.HasKey(e => e.PkWelderprojectid);

                entity.ToTable("tblWelderProject");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkWelderid);

                entity.Property(e => e.PkWelderprojectid).HasColumnName("pk_welderprojectid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkWelderid).HasColumnName("fk_welderid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblWelderProject)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderProject_tblProject");

                entity.HasOne(d => d.FkWelder)
                    .WithMany(p => p.TblWelderProject)
                    .HasForeignKey(d => d.FkWelderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderProject_tblWelder");
            });

            modelBuilder.Entity<TblWelderQualification>(entity =>
            {
                entity.HasKey(e => e.PkWelderqualificationid);

                entity.ToTable("tblWelderQualification");

                entity.HasIndex(e => e.FkWelderid);

                entity.HasIndex(e => e.FkWeldprocedurequalificationrecordid);

                entity.HasIndex(e => e.FkWeldprocedurespecificationid);

                entity.Property(e => e.PkWelderqualificationid).HasColumnName("pk_welderqualificationid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWelderid).HasColumnName("fk_welderid");

                entity.Property(e => e.FkWeldprocedurequalificationrecordid).HasColumnName("fk_weldprocedurequalificationrecordid");

                entity.Property(e => e.FkWeldprocedurespecificationid).HasColumnName("fk_weldprocedurespecificationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkWelder)
                    .WithMany(p => p.TblWelderQualification)
                    .HasForeignKey(d => d.FkWelderid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderQualification_tblWelder");

                entity.HasOne(d => d.FkWeldprocedurequalificationrecord)
                    .WithMany(p => p.TblWelderQualification)
                    .HasForeignKey(d => d.FkWeldprocedurequalificationrecordid)
                    .HasConstraintName("FK_tblWelderQualification_tblWeldProcedureQualificationRecord");

                entity.HasOne(d => d.FkWeldprocedurespecification)
                    .WithMany(p => p.TblWelderQualification)
                    .HasForeignKey(d => d.FkWeldprocedurespecificationid)
                    .HasConstraintName("FK_tblWelderQualification_tblWeldProcedureSpecification");
            });

            modelBuilder.Entity<TblWelderQualificationDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkWelderqualificationdocumentlabelid);

                entity.ToTable("tblWelderQualificationDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkWelderqualificationid);

                entity.HasIndex(e => new { e.FkWelderqualificationid, e.FkDocumentlabelid })
                    .HasName("UK_tblWelderQualificationDocumentLabel_fk_welderqualificationid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkWelderqualificationdocumentlabelid).HasColumnName("pk_welderqualificationdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkWelderqualificationid).HasColumnName("fk_welderqualificationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblWelderQualificationDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderQualificationDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkWelderqualification)
                    .WithMany(p => p.TblWelderQualificationDocumentLabel)
                    .HasForeignKey(d => d.FkWelderqualificationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderQualificationDocumentLabel_tblWelderQualification");
            });

            modelBuilder.Entity<TblWelderQualificationRecord>(entity =>
            {
                entity.HasKey(e => e.PkWelderqualificationrecordid);

                entity.ToTable("tblWelderQualificationRecord");

                entity.HasIndex(e => e.FkDiaid);

                entity.HasIndex(e => e.FkDnid);

                entity.HasIndex(e => e.FkThicknessid);

                entity.HasIndex(e => e.FkWelderqualificationid);

                entity.Property(e => e.PkWelderqualificationrecordid).HasColumnName("pk_welderqualificationrecordid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Expirationdate)
                    .HasColumnName("expirationdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.FkDiaid).HasColumnName("fk_diaid");

                entity.Property(e => e.FkDnid).HasColumnName("fk_dnid");

                entity.Property(e => e.FkThicknessid).HasColumnName("fk_thicknessid");

                entity.Property(e => e.FkWelderqualificationid).HasColumnName("fk_welderqualificationid");

                entity.Property(e => e.Issuedate)
                    .HasColumnName("issuedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Ndereportnumber)
                    .IsRequired()
                    .HasColumnName("ndereportnumber")
                    .HasMaxLength(25);

                entity.Property(e => e.Remark)
                    .HasColumnName("remark")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldercertificatenumber)
                    .HasColumnName("weldercertificatenumber")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDia)
                    .WithMany(p => p.TblWelderQualificationRecord)
                    .HasForeignKey(d => d.FkDiaid)
                    .HasConstraintName("FK_tblWelderQualificationRecord_tblDia");

                entity.HasOne(d => d.FkDn)
                    .WithMany(p => p.TblWelderQualificationRecord)
                    .HasForeignKey(d => d.FkDnid)
                    .HasConstraintName("FK_tblWelderQualificationRecord_tblDn");

                entity.HasOne(d => d.FkThickness)
                    .WithMany(p => p.TblWelderQualificationRecord)
                    .HasForeignKey(d => d.FkThicknessid)
                    .HasConstraintName("FK_tblWelderQualificationRecord_tblThickness");

                entity.HasOne(d => d.FkWelderqualification)
                    .WithMany(p => p.TblWelderQualificationRecord)
                    .HasForeignKey(d => d.FkWelderqualificationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWelderQualificationRecord_tblWelderQualification");
            });

            modelBuilder.Entity<TblWeldNorm>(entity =>
            {
                entity.HasKey(e => e.PkWeldnormid);

                entity.ToTable("tblWeldNorm");

                entity.HasIndex(e => e.Weldnormcode)
                    .HasName("UK_tblWeldNormCode")
                    .IsUnique();

                entity.Property(e => e.PkWeldnormid).HasColumnName("pk_weldnormid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldnormcode)
                    .IsRequired()
                    .HasColumnName("weldnormcode")
                    .HasMaxLength(25);

                entity.Property(e => e.Weldnormdescription)
                    .IsRequired()
                    .HasColumnName("weldnormdescription")
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<TblWeldPosition>(entity =>
            {
                entity.HasKey(e => e.PkWeldpositionid);

                entity.ToTable("tblWeldPosition");

                entity.HasIndex(e => new { e.Weldpositionasmecode, e.Weldpositionenisocode, e.Weldpositiondescription })
                    .HasName("UK_tblWeldPositionCodesDescription")
                    .IsUnique();

                entity.Property(e => e.PkWeldpositionid).HasColumnName("pk_weldpositionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldpositionasmecode)
                    .HasColumnName("weldpositionasmecode")
                    .HasMaxLength(25);

                entity.Property(e => e.Weldpositiondescription)
                    .IsRequired()
                    .HasColumnName("weldpositiondescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Weldpositionenisocode)
                    .HasColumnName("weldpositionenisocode")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<TblWeldProcedure>(entity =>
            {
                entity.HasKey(e => e.PkWeldprocedureid);

                entity.ToTable("tblWeldProcedure");

                entity.HasIndex(e => e.FkMaterialpipespecid);

                entity.Property(e => e.PkWeldprocedureid).HasColumnName("pk_weldprocedureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMaterialpipespecid).HasColumnName("fk_materialpipespecid");

                entity.Property(e => e.Ht)
                    .HasColumnName("ht")
                    .HasMaxLength(50);

                entity.Property(e => e.Matgroup)
                    .HasColumnName("matgroup")
                    .HasMaxLength(10);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Mpi)
                    .HasColumnName("mpi")
                    .HasMaxLength(50);

                entity.Property(e => e.Ndeclass)
                    .HasColumnName("ndeclass")
                    .HasMaxLength(50);

                entity.Property(e => e.Parta)
                    .HasColumnName("parta")
                    .HasMaxLength(50);

                entity.Property(e => e.Partb)
                    .HasColumnName("partb")
                    .HasMaxLength(50);

                entity.Property(e => e.Preheat).HasColumnName("preheat");

                entity.Property(e => e.Pt)
                    .HasColumnName("pt")
                    .HasMaxLength(50);

                entity.Property(e => e.Pwht).HasColumnName("pwht");

                entity.Property(e => e.Rev)
                    .HasColumnName("rev")
                    .HasMaxLength(10);

                entity.Property(e => e.Revdate)
                    .HasColumnName("revdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Us)
                    .HasColumnName("us")
                    .HasMaxLength(50);

                entity.Property(e => e.Wpr)
                    .IsRequired()
                    .HasColumnName("wpr")
                    .HasMaxLength(10);

                entity.Property(e => e.Wprsub)
                    .IsRequired()
                    .HasColumnName("wprsub")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMaterialpipespec)
                    .WithMany(p => p.TblWeldProcedure)
                    .HasForeignKey(d => d.FkMaterialpipespecid)
                    .HasConstraintName("FK_tblWeldProcedure_tblMaterialPipeSpec");
            });

            modelBuilder.Entity<TblWeldProcedureDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkWeldproceduredocumentlabelid);

                entity.ToTable("tblWeldProcedureDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkWeldprocedureid);

                entity.HasIndex(e => new { e.FkWeldprocedureid, e.FkDocumentlabelid })
                    .HasName("UK_tblWeldProcedureDocumentLabel_fk_weldprocedureid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkWeldproceduredocumentlabelid).HasColumnName("pk_weldproceduredocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkWeldprocedureid).HasColumnName("fk_weldprocedureid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblWeldProcedureDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkWeldprocedure)
                    .WithMany(p => p.TblWeldProcedureDocumentLabel)
                    .HasForeignKey(d => d.FkWeldprocedureid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureDocumentLabel_tblWeldProcedure");
            });

            modelBuilder.Entity<TblWeldProcedureQualificationRecord>(entity =>
            {
                entity.HasKey(e => e.PkWeldprocedurequalificationrecordid);

                entity.ToTable("tblWeldProcedureQualificationRecord");

                entity.HasIndex(e => e.FkBranchid);

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkDiamaxid);

                entity.HasIndex(e => e.FkDiaminid);

                entity.HasIndex(e => e.FkDnmaxid);

                entity.HasIndex(e => e.FkDnminid);

                entity.HasIndex(e => e.FkFillermaterialid);

                entity.HasIndex(e => e.FkPartabasematerialgroupid);

                entity.HasIndex(e => e.FkPartabasematerialid);

                entity.HasIndex(e => e.FkPartbbasematerialgroupid);

                entity.HasIndex(e => e.FkPartbbasematerialid);

                entity.HasIndex(e => e.FkThicknessmaxid);

                entity.HasIndex(e => e.FkThicknessminid);

                entity.HasIndex(e => e.FkWeldconsumablesid);

                entity.HasIndex(e => e.FkWeldelectrodeid);

                entity.HasIndex(e => e.FkWeldnormid);

                entity.HasIndex(e => e.FkWeldpositionid);

                entity.HasIndex(e => e.FkWeldprocessid);

                entity.HasIndex(e => e.FkWeldtypeid);

                entity.Property(e => e.PkWeldprocedurequalificationrecordid).HasColumnName("pk_weldprocedurequalificationrecordid");

                entity.Property(e => e.Approveddate)
                    .HasColumnName("approveddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Approveduser)
                    .HasColumnName("approveduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkBranchid).HasColumnName("fk_branchid");

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkDiamaxid).HasColumnName("fk_diamaxid");

                entity.Property(e => e.FkDiaminid).HasColumnName("fk_diaminid");

                entity.Property(e => e.FkDnmaxid).HasColumnName("fk_dnmaxid");

                entity.Property(e => e.FkDnminid).HasColumnName("fk_dnminid");

                entity.Property(e => e.FkFillermaterialid).HasColumnName("fk_fillermaterialid");

                entity.Property(e => e.FkPartabasematerialgroupid).HasColumnName("fk_partabasematerialgroupid");

                entity.Property(e => e.FkPartabasematerialid).HasColumnName("fk_partabasematerialid");

                entity.Property(e => e.FkPartbbasematerialgroupid).HasColumnName("fk_partbbasematerialgroupid");

                entity.Property(e => e.FkPartbbasematerialid).HasColumnName("fk_partbbasematerialid");

                entity.Property(e => e.FkThicknessmaxid).HasColumnName("fk_thicknessmaxid");

                entity.Property(e => e.FkThicknessminid).HasColumnName("fk_thicknessminid");

                entity.Property(e => e.FkWeldconsumablesid).HasColumnName("fk_weldconsumablesid");

                entity.Property(e => e.FkWeldelectrodeid).HasColumnName("fk_weldelectrodeid");

                entity.Property(e => e.FkWeldnormid).HasColumnName("fk_weldnormid");

                entity.Property(e => e.FkWeldpositionid).HasColumnName("fk_weldpositionid");

                entity.Property(e => e.FkWeldprocessid).HasColumnName("fk_weldprocessid");

                entity.Property(e => e.FkWeldtypeid).HasColumnName("fk_weldtypeid");

                entity.Property(e => e.Interpasstemperature).HasColumnName("interpasstemperature");

                entity.Property(e => e.Interpasstemperatureunit).HasColumnName("interpasstemperatureunit");

                entity.Property(e => e.Isrepair).HasColumnName("isrepair");

                entity.Property(e => e.Maxheatinput).HasColumnName("maxheatinput");

                entity.Property(e => e.Maxheatinputunit).HasColumnName("maxheatinputunit");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Preheattemperature).HasColumnName("preheattemperature");

                entity.Property(e => e.Preheattemperatureunit).HasColumnName("preheattemperatureunit");

                entity.Property(e => e.Weldprocqualrecdescription)
                    .IsRequired()
                    .HasColumnName("weldprocqualrecdescription")
                    .HasMaxLength(250);

                entity.HasOne(d => d.FkBranch)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkBranchid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblBranch");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkContractorid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblContractor_contractorid");

                entity.HasOne(d => d.FkDiamax)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkDiamax)
                    .HasForeignKey(d => d.FkDiamaxid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblDia_max");

                entity.HasOne(d => d.FkDiamin)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkDiamin)
                    .HasForeignKey(d => d.FkDiaminid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblDia_min");

                entity.HasOne(d => d.FkDnmax)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkDnmax)
                    .HasForeignKey(d => d.FkDnmaxid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblDn_max");

                entity.HasOne(d => d.FkDnmin)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkDnmin)
                    .HasForeignKey(d => d.FkDnminid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblDn_min");

                entity.HasOne(d => d.FkFillermaterial)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkFillermaterialid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblFillerMaterial");

                entity.HasOne(d => d.FkPartabasematerialgroup)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkPartabasematerialgroup)
                    .HasForeignKey(d => d.FkPartabasematerialgroupid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblBaseMaterialGroup_PartA");

                entity.HasOne(d => d.FkPartabasematerial)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkPartabasematerial)
                    .HasForeignKey(d => d.FkPartabasematerialid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblBaseMaterial_PartA");

                entity.HasOne(d => d.FkPartbbasematerialgroup)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkPartbbasematerialgroup)
                    .HasForeignKey(d => d.FkPartbbasematerialgroupid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblBaseMaterialGroup_PartB");

                entity.HasOne(d => d.FkPartbbasematerial)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkPartbbasematerial)
                    .HasForeignKey(d => d.FkPartbbasematerialid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblBaseMaterial_PartB");

                entity.HasOne(d => d.FkThicknessmax)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkThicknessmax)
                    .HasForeignKey(d => d.FkThicknessmaxid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblThickness_max");

                entity.HasOne(d => d.FkThicknessmin)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordFkThicknessmin)
                    .HasForeignKey(d => d.FkThicknessminid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblThickness_min");

                entity.HasOne(d => d.FkWeldconsumables)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkWeldconsumablesid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblWeldConsumables");

                entity.HasOne(d => d.FkWeldelectrode)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkWeldelectrodeid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblWeldElectrode");

                entity.HasOne(d => d.FkWeldnorm)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkWeldnormid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblWeldNorm");

                entity.HasOne(d => d.FkWeldposition)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkWeldpositionid)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblWeldPosition");

                entity.HasOne(d => d.FkWeldprocess)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkWeldprocessid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblWeldProcess");

                entity.HasOne(d => d.FkWeldtype)
                    .WithMany(p => p.TblWeldProcedureQualificationRecord)
                    .HasForeignKey(d => d.FkWeldtypeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecord_tblWeldType");
            });

            modelBuilder.Entity<TblWeldProcedureQualificationRecordDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkWeldprocedurequalificationrecorddocumentlabelid);

                entity.ToTable("tblWeldProcedureQualificationRecordDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkWeldprocedurequalificationrecordid);

                entity.HasIndex(e => new { e.FkWeldprocedurequalificationrecordid, e.FkDocumentlabelid })
                    .HasName("UK_tblWeldProcedureQualificationRecordDocumentLabel_fk_weldprocedurequalificationrecordid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkWeldprocedurequalificationrecorddocumentlabelid).HasColumnName("pk_weldprocedurequalificationrecorddocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkWeldprocedurequalificationrecordid).HasColumnName("fk_weldprocedurequalificationrecordid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecordDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkWeldprocedurequalificationrecord)
                    .WithMany(p => p.TblWeldProcedureQualificationRecordDocumentLabel)
                    .HasForeignKey(d => d.FkWeldprocedurequalificationrecordid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureQualificationRecordDocumentLabel_tblWeldProcedureQualificationRecord");
            });

            modelBuilder.Entity<TblWeldProcedureSpecification>(entity =>
            {
                entity.HasKey(e => e.PkWeldprocedurespecificationid);

                entity.ToTable("tblWeldProcedureSpecification");

                entity.HasIndex(e => e.FkContractorid);

                entity.HasIndex(e => e.FkDiamaxid);

                entity.HasIndex(e => e.FkDiaminid);

                entity.HasIndex(e => e.FkDnmaxid);

                entity.HasIndex(e => e.FkDnminid);

                entity.HasIndex(e => e.FkFillermaterialid);

                entity.HasIndex(e => e.FkPartabasematerialgroupid);

                entity.HasIndex(e => e.FkPartabasematerialid);

                entity.HasIndex(e => e.FkPartbbasematerialgroupid);

                entity.HasIndex(e => e.FkPartbbasematerialid);

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkStep1weldconsumablesid);

                entity.HasIndex(e => e.FkStep1weldprocessid);

                entity.HasIndex(e => e.FkStep2weldconsumableid);

                entity.HasIndex(e => e.FkStep2weldprocessid);

                entity.HasIndex(e => e.FkStep3weldconsumableid);

                entity.HasIndex(e => e.FkStep3weldprocessid);

                entity.HasIndex(e => e.FkThicknessmaxid);

                entity.HasIndex(e => e.FkThicknessminid);

                entity.HasIndex(e => e.FkWeldelectrodeid);

                entity.HasIndex(e => e.FkWeldnormid);

                entity.HasIndex(e => e.FkWeldpositionid);

                entity.HasIndex(e => e.FkWeldprocedurequalificationrecordid);

                entity.HasIndex(e => e.FkWeldtypeid);

                entity.Property(e => e.PkWeldprocedurespecificationid).HasColumnName("pk_weldprocedurespecificationid");

                entity.Property(e => e.Approveddate)
                    .HasColumnName("approveddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Approveduser)
                    .HasColumnName("approveduser")
                    .HasMaxLength(50);

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasMaxLength(500);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkContractorid).HasColumnName("fk_contractorid");

                entity.Property(e => e.FkDiamaxid).HasColumnName("fk_diamaxid");

                entity.Property(e => e.FkDiaminid).HasColumnName("fk_diaminid");

                entity.Property(e => e.FkDnmaxid).HasColumnName("fk_dnmaxid");

                entity.Property(e => e.FkDnminid).HasColumnName("fk_dnminid");

                entity.Property(e => e.FkFillermaterialid).HasColumnName("fk_fillermaterialid");

                entity.Property(e => e.FkPartabasematerialgroupid).HasColumnName("fk_partabasematerialgroupid");

                entity.Property(e => e.FkPartabasematerialid).HasColumnName("fk_partabasematerialid");

                entity.Property(e => e.FkPartbbasematerialgroupid).HasColumnName("fk_partbbasematerialgroupid");

                entity.Property(e => e.FkPartbbasematerialid).HasColumnName("fk_partbbasematerialid");

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkStep1weldconsumablesid).HasColumnName("fk_step1weldconsumablesid");

                entity.Property(e => e.FkStep1weldprocessid).HasColumnName("fk_step1weldprocessid");

                entity.Property(e => e.FkStep2weldconsumableid).HasColumnName("fk_step2weldconsumableid");

                entity.Property(e => e.FkStep2weldprocessid).HasColumnName("fk_step2weldprocessid");

                entity.Property(e => e.FkStep3weldconsumableid).HasColumnName("fk_step3weldconsumableid");

                entity.Property(e => e.FkStep3weldprocessid).HasColumnName("fk_step3weldprocessid");

                entity.Property(e => e.FkThicknessmaxid).HasColumnName("fk_thicknessmaxid");

                entity.Property(e => e.FkThicknessminid).HasColumnName("fk_thicknessminid");

                entity.Property(e => e.FkWeldelectrodeid).HasColumnName("fk_weldelectrodeid");

                entity.Property(e => e.FkWeldnormid).HasColumnName("fk_weldnormid");

                entity.Property(e => e.FkWeldpositionid).HasColumnName("fk_weldpositionid");

                entity.Property(e => e.FkWeldprocedurequalificationrecordid).HasColumnName("fk_weldprocedurequalificationrecordid");

                entity.Property(e => e.FkWeldtypeid).HasColumnName("fk_weldtypeid");

                entity.Property(e => e.Interpasstemperature).HasColumnName("interpasstemperature");

                entity.Property(e => e.Interpasstemperatureunit).HasColumnName("interpasstemperatureunit");

                entity.Property(e => e.Ispwht).HasColumnName("ispwht");

                entity.Property(e => e.Isrepair).HasColumnName("isrepair");

                entity.Property(e => e.Maxheatinput).HasColumnName("maxheatinput");

                entity.Property(e => e.Maxheatinputunit).HasColumnName("maxheatinputunit");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Preheattemperature).HasColumnName("preheattemperature");

                entity.Property(e => e.Preheattemperatureunit).HasColumnName("preheattemperatureunit");

                entity.Property(e => e.Pwhtspec)
                    .HasColumnName("pwhtspec")
                    .HasMaxLength(25);

                entity.Property(e => e.Readydate)
                    .HasColumnName("readydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Readyuser)
                    .HasColumnName("readyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Rev)
                    .HasColumnName("rev")
                    .HasMaxLength(10);

                entity.Property(e => e.Weldprocedurespecificationcode)
                    .IsRequired()
                    .HasColumnName("weldprocedurespecificationcode")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldprocedurespecificationdescription)
                    .HasColumnName("weldprocedurespecificationdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Workplaceenumvalue).HasColumnName("workplaceenumvalue");

                entity.HasOne(d => d.FkContractor)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkContractorid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblContractor");

                entity.HasOne(d => d.FkDiamax)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkDiamax)
                    .HasForeignKey(d => d.FkDiamaxid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblDia_max");

                entity.HasOne(d => d.FkDiamin)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkDiamin)
                    .HasForeignKey(d => d.FkDiaminid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblDia_min");

                entity.HasOne(d => d.FkDnmax)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkDnmax)
                    .HasForeignKey(d => d.FkDnmaxid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblDn_max");

                entity.HasOne(d => d.FkDnmin)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkDnmin)
                    .HasForeignKey(d => d.FkDnminid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblDn_min");

                entity.HasOne(d => d.FkFillermaterial)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkFillermaterialid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblFillerMaterial");

                entity.HasOne(d => d.FkPartabasematerialgroup)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkPartabasematerialgroup)
                    .HasForeignKey(d => d.FkPartabasematerialgroupid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblBaseMaterialGroup_PartA");

                entity.HasOne(d => d.FkPartabasematerial)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkPartabasematerial)
                    .HasForeignKey(d => d.FkPartabasematerialid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblBaseMaterial_PartA");

                entity.HasOne(d => d.FkPartbbasematerialgroup)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkPartbbasematerialgroup)
                    .HasForeignKey(d => d.FkPartbbasematerialgroupid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblBaseMaterialGroup_PartB");

                entity.HasOne(d => d.FkPartbbasematerial)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkPartbbasematerial)
                    .HasForeignKey(d => d.FkPartbbasematerialid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblBaseMaterial_PartB");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblProject");

                entity.HasOne(d => d.FkStep1weldconsumables)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkStep1weldconsumables)
                    .HasForeignKey(d => d.FkStep1weldconsumablesid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldConsumables");

                entity.HasOne(d => d.FkStep1weldprocess)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkStep1weldprocess)
                    .HasForeignKey(d => d.FkStep1weldprocessid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldProcess");

                entity.HasOne(d => d.FkStep2weldconsumable)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkStep2weldconsumable)
                    .HasForeignKey(d => d.FkStep2weldconsumableid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_step2_tblWeldConsumable");

                entity.HasOne(d => d.FkStep2weldprocess)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkStep2weldprocess)
                    .HasForeignKey(d => d.FkStep2weldprocessid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_step2_tblWeldProcess");

                entity.HasOne(d => d.FkStep3weldconsumable)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkStep3weldconsumable)
                    .HasForeignKey(d => d.FkStep3weldconsumableid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_step3_tblWeldConsumable");

                entity.HasOne(d => d.FkStep3weldprocess)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkStep3weldprocess)
                    .HasForeignKey(d => d.FkStep3weldprocessid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_step3_tblWeldProcess");

                entity.HasOne(d => d.FkThicknessmax)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkThicknessmax)
                    .HasForeignKey(d => d.FkThicknessmaxid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblThickness_max");

                entity.HasOne(d => d.FkThicknessmin)
                    .WithMany(p => p.TblWeldProcedureSpecificationFkThicknessmin)
                    .HasForeignKey(d => d.FkThicknessminid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblThickness_min");

                entity.HasOne(d => d.FkWeldelectrode)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkWeldelectrodeid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldElectrode");

                entity.HasOne(d => d.FkWeldnorm)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkWeldnormid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldNorm");

                entity.HasOne(d => d.FkWeldposition)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkWeldpositionid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldPosition");

                entity.HasOne(d => d.FkWeldprocedurequalificationrecord)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkWeldprocedurequalificationrecordid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldProcedureQualificationRecord");

                entity.HasOne(d => d.FkWeldtype)
                    .WithMany(p => p.TblWeldProcedureSpecification)
                    .HasForeignKey(d => d.FkWeldtypeid)
                    .HasConstraintName("FK_tblWeldProcedureSpecification_tblWeldType");
            });

            modelBuilder.Entity<TblWeldProcedureSpecificationDocumentLabel>(entity =>
            {
                entity.HasKey(e => e.PkWeldprocedurespecificationdocumentlabelid);

                entity.ToTable("tblWeldProcedureSpecificationDocumentLabel");

                entity.HasIndex(e => e.FkDocumentlabelid);

                entity.HasIndex(e => e.FkWeldprocedurespecificationid);

                entity.HasIndex(e => new { e.FkWeldprocedurespecificationid, e.FkDocumentlabelid })
                    .HasName("UK_tblWeldProcedureSpecificationDocumentLabel_fk_weldprocedurespecificationid_fk_documentlabelid")
                    .IsUnique();

                entity.Property(e => e.PkWeldprocedurespecificationdocumentlabelid).HasColumnName("pk_weldprocedurespecificationdocumentlabelid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkDocumentlabelid).HasColumnName("fk_documentlabelid");

                entity.Property(e => e.FkWeldprocedurespecificationid).HasColumnName("fk_weldprocedurespecificationid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkDocumentlabel)
                    .WithMany(p => p.TblWeldProcedureSpecificationDocumentLabel)
                    .HasForeignKey(d => d.FkDocumentlabelid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureSpecificationDocumentLabel_tblDocumentLabel");

                entity.HasOne(d => d.FkWeldprocedurespecification)
                    .WithMany(p => p.TblWeldProcedureSpecificationDocumentLabel)
                    .HasForeignKey(d => d.FkWeldprocedurespecificationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWeldProcedureSpecificationDocumentLabel_tblWeldProcedureSpecification");
            });

            modelBuilder.Entity<TblWeldProcess>(entity =>
            {
                entity.HasKey(e => e.PkWeldprocessid);

                entity.ToTable("tblWeldProcess");

                entity.HasIndex(e => new { e.Weldprocessasmecode, e.Weldprocessenisocode, e.Weldprocessdescription })
                    .HasName("UK_tblWeldProcessCodesDescription")
                    .IsUnique();

                entity.Property(e => e.PkWeldprocessid).HasColumnName("pk_weldprocessid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldprocessasmecode)
                    .HasColumnName("weldprocessasmecode")
                    .HasMaxLength(25);

                entity.Property(e => e.Weldprocessdescription)
                    .IsRequired()
                    .HasColumnName("weldprocessdescription")
                    .HasMaxLength(250);

                entity.Property(e => e.Weldprocessenisocode)
                    .HasColumnName("weldprocessenisocode")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<TblWeldType>(entity =>
            {
                entity.HasKey(e => e.PkWeldtypeid);

                entity.ToTable("tblWeldType");

                entity.Property(e => e.PkWeldtypeid).HasColumnName("pk_weldtypeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Weldtypecode)
                    .IsRequired()
                    .HasColumnName("weldtypecode")
                    .HasMaxLength(15);

                entity.Property(e => e.Weldtypedescription)
                    .IsRequired()
                    .HasColumnName("weldtypedescription")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TblWorkflow>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowid);

                entity.ToTable("tblWorkflow");

                entity.HasIndex(e => e.FkApplicationid);

                entity.HasIndex(e => new { e.FkApplicationid, e.Workflowname, e.Revisionnr })
                    .HasName("UK_tblWorkflow_fk_applicationid_workflowname_revisionnr")
                    .IsUnique();

                entity.Property(e => e.PkWorkflowid).HasColumnName("pk_workflowid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkApplicationid).HasColumnName("fk_applicationid");

                entity.Property(e => e.Freezedate)
                    .HasColumnName("freezedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inactivedate)
                    .HasColumnName("inactivedate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Isdefault).HasColumnName("isdefault");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Revisionnr).HasColumnName("revisionnr");

                entity.Property(e => e.Workflowname)
                    .IsRequired()
                    .HasColumnName("workflowname")
                    .HasMaxLength(255);

                entity.Property(e => e.Workflownr).HasColumnName("workflownr");

                entity.Property(e => e.Workflowtype).HasColumnName("workflowtype");

                entity.HasOne(d => d.FkApplication)
                    .WithMany(p => p.TblWorkflow)
                    .HasForeignKey(d => d.FkApplicationid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflow_tblApplication");
            });

            modelBuilder.Entity<TblWorkflowState>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstateid);

                entity.ToTable("tblWorkflowState");

                entity.HasIndex(e => e.FkWorkflowid);

                entity.HasIndex(e => e.FkWorkflowstatetransitionreviewagreedid);

                entity.HasIndex(e => e.FkWorkflowstatetransitionreviewnotagreedid);

                entity.HasIndex(e => new { e.FkWorkflowid, e.Statename })
                    .HasName("UK_tblWorkflowState_fk_workflowid_statename")
                    .IsUnique();

                entity.Property(e => e.PkWorkflowstateid).HasColumnName("pk_workflowstateid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkWorkflowid).HasColumnName("fk_workflowid");

                entity.Property(e => e.FkWorkflowstatetransitionreviewagreedid).HasColumnName("fk_workflowstatetransitionreviewagreedid");

                entity.Property(e => e.FkWorkflowstatetransitionreviewnotagreedid).HasColumnName("fk_workflowstatetransitionreviewnotagreedid");

                entity.Property(e => e.Isarchivestate).HasColumnName("isarchivestate");

                entity.Property(e => e.Iseditable).HasColumnName("iseditable");

                entity.Property(e => e.Isinitialstate).HasColumnName("isinitialstate");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Sortorder).HasColumnName("sortorder");

                entity.Property(e => e.Statecolor).HasColumnName("statecolor");

                entity.Property(e => e.Statecompletionchecks).HasColumnName("statecompletionchecks");

                entity.Property(e => e.Statedescription)
                    .HasColumnName("statedescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Statename)
                    .HasColumnName("statename")
                    .HasMaxLength(100);

                entity.Property(e => e.Workflowstatetype).HasColumnName("workflowstatetype");

                entity.HasOne(d => d.FkWorkflow)
                    .WithMany(p => p.TblWorkflowState)
                    .HasForeignKey(d => d.FkWorkflowid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowState_tblWorkflow");

                entity.HasOne(d => d.FkWorkflowstatetransitionreviewagreed)
                    .WithMany(p => p.TblWorkflowStateFkWorkflowstatetransitionreviewagreed)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionreviewagreedid)
                    .HasConstraintName("FK_tblWorkflowState_tblWorkflowStateTransition_Agreed");

                entity.HasOne(d => d.FkWorkflowstatetransitionreviewnotagreed)
                    .WithMany(p => p.TblWorkflowStateFkWorkflowstatetransitionreviewnotagreed)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionreviewnotagreedid)
                    .HasConstraintName("FK_tblWorkflowState_tblWorkflowStateTransition_NotAgreed");
            });

            modelBuilder.Entity<TblWorkflowStateRightRestriction>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstaterightrestrictionid);

                entity.ToTable("tblWorkflowStateRightRestriction");

                entity.HasIndex(e => e.FkRightid);

                entity.HasIndex(e => e.FkRoleid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.HasIndex(e => new { e.FkWorkflowstateid, e.FkRightid, e.FkRoleid })
                    .HasName("UK_tblWorkflowStateRightRestriction")
                    .IsUnique();

                entity.Property(e => e.PkWorkflowstaterightrestrictionid).HasColumnName("pk_workflowstaterightrestrictionid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRightid).HasColumnName("fk_rightid");

                entity.Property(e => e.FkRoleid).HasColumnName("fk_roleid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Isrestricted).HasColumnName("isrestricted");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRight)
                    .WithMany(p => p.TblWorkflowStateRightRestriction)
                    .HasForeignKey(d => d.FkRightid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateRightRestriction_tblRight");

                entity.HasOne(d => d.FkRole)
                    .WithMany(p => p.TblWorkflowStateRightRestriction)
                    .HasForeignKey(d => d.FkRoleid)
                    .HasConstraintName("FK_tblWorkflowStateRightRestriction_tblRole");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblWorkflowStateRightRestriction)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateRightRestriction_tblWorkflowState");
            });

            modelBuilder.Entity<TblWorkflowStateTransition>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstatetransitionid);

                entity.ToTable("tblWorkflowStateTransition");

                entity.HasIndex(e => e.FkMailid);

                entity.HasIndex(e => e.FkNextworkflowstateid);

                entity.HasIndex(e => e.FkWorkflowstateid);

                entity.Property(e => e.PkWorkflowstatetransitionid).HasColumnName("pk_workflowstatetransitionid");

                entity.Property(e => e.Canbypasscompletioncheck).HasColumnName("canbypasscompletioncheck");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Excludefromfuturestatechecking).HasColumnName("excludefromfuturestatechecking");

                entity.Property(e => e.FkMailid).HasColumnName("fk_mailid");

                entity.Property(e => e.FkNextworkflowstateid).HasColumnName("fk_nextworkflowstateid");

                entity.Property(e => e.FkWorkflowstateid).HasColumnName("fk_workflowstateid");

                entity.Property(e => e.Freezeversion).HasColumnName("freezeversion");

                entity.Property(e => e.Isautomatictransition).HasColumnName("isautomatictransition");

                entity.Property(e => e.Ismessagerequired).HasColumnName("ismessagerequired");

                entity.Property(e => e.Ismessagerequiredonrevert).HasColumnName("ismessagerequiredonrevert");

                entity.Property(e => e.Isremarkrequired).HasColumnName("isremarkrequired");

                entity.Property(e => e.Isrestrictedonorganisationstructure).HasColumnName("isrestrictedonorganisationstructure");

                entity.Property(e => e.Isrevertable).HasColumnName("isrevertable");

                entity.Property(e => e.Isrevisiontransition).HasColumnName("isrevisiontransition");

                entity.Property(e => e.Mailrecipient).HasColumnName("mailrecipient");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Resetreviewandcomplexitydata).HasColumnName("resetreviewandcomplexitydata");

                entity.Property(e => e.Resetverifieddocumentscheck).HasColumnName("resetverifieddocumentscheck");

                entity.Property(e => e.Sendactionemails).HasColumnName("sendactionemails");

                entity.Property(e => e.Signaturerequired).HasColumnName("signaturerequired");

                entity.Property(e => e.Startreview).HasColumnName("startreview");

                entity.Property(e => e.Statetransitionname)
                    .IsRequired()
                    .HasColumnName("statetransitionname")
                    .HasMaxLength(50);

                entity.Property(e => e.Transitiondescription)
                    .HasColumnName("transitiondescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Transitionpermission).HasColumnName("transitionpermission");

                entity.Property(e => e.Usedbypermanentchangerequestcheck).HasColumnName("usedbypermanentchangerequestcheck");

                entity.Property(e => e.Usedbytemporarychangerequestcheck).HasColumnName("usedbytemporarychangerequestcheck");

                entity.HasOne(d => d.FkMail)
                    .WithMany(p => p.TblWorkflowStateTransition)
                    .HasForeignKey(d => d.FkMailid)
                    .HasConstraintName("FK_tblWorkflowStateTransition_tblMail");

                entity.HasOne(d => d.FkNextworkflowstate)
                    .WithMany(p => p.TblWorkflowStateTransitionFkNextworkflowstate)
                    .HasForeignKey(d => d.FkNextworkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransition_tblWorkflowState_Next");

                entity.HasOne(d => d.FkWorkflowstate)
                    .WithMany(p => p.TblWorkflowStateTransitionFkWorkflowstate)
                    .HasForeignKey(d => d.FkWorkflowstateid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransition_tblWorkflowState");
            });

            modelBuilder.Entity<TblWorkflowStateTransitionMail>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstatetransitionmailid);

                entity.ToTable("tblWorkflowStateTransitionMail");

                entity.Property(e => e.PkWorkflowstatetransitionmailid).HasColumnName("pk_workflowstatetransitionmailid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkMailid).HasColumnName("fk_mailid");

                entity.Property(e => e.FkWorkflowstatetransitionid).HasColumnName("fk_workflowstatetransitionid");

                entity.Property(e => e.Mailrecipients).HasColumnName("mailrecipients");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkMail)
                    .WithMany(p => p.TblWorkflowStateTransitionMail)
                    .HasForeignKey(d => d.FkMailid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionMail_tblMail");

                entity.HasOne(d => d.FkWorkflowstatetransition)
                    .WithMany(p => p.TblWorkflowStateTransitionMail)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionMail_tblWorkflowStateTransition");
            });

            modelBuilder.Entity<TblWorkflowStateTransitionMailRecipient>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstatetransitionmailrecipientid);

                entity.ToTable("tblWorkflowStateTransitionMailRecipient");

                entity.Property(e => e.PkWorkflowstatetransitionmailrecipientid).HasColumnName("pk_workflowstatetransitionmailrecipientid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRoleid).HasColumnName("fk_roleid");

                entity.Property(e => e.FkWorkflowstatetransitionmailid).HasColumnName("fk_workflowstatetransitionmailid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRole)
                    .WithMany(p => p.TblWorkflowStateTransitionMailRecipient)
                    .HasForeignKey(d => d.FkRoleid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionMailRecipient_tblRole");

                entity.HasOne(d => d.FkWorkflowstatetransitionmail)
                    .WithMany(p => p.TblWorkflowStateTransitionMailRecipient)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionmailid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionMailRecipient_tblWorkflowStateTransitionMail");
            });

            modelBuilder.Entity<TblWorkflowStateTransitionOrganisationStructure>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstatetransitionOrganisationStructureid);

                entity.ToTable("tblWorkflowStateTransitionOrganisationStructure");

                entity.HasIndex(e => e.FkOrganisationstructureid);

                entity.HasIndex(e => e.FkWorkflowstatetransitionid);

                entity.Property(e => e.PkWorkflowstatetransitionOrganisationStructureid).HasColumnName("pk_workflowstatetransitionOrganisationStructureid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkOrganisationstructureid).HasColumnName("fk_organisationstructureid");

                entity.Property(e => e.FkWorkflowstatetransitionid).HasColumnName("fk_workflowstatetransitionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkOrganisationstructure)
                    .WithMany(p => p.TblWorkflowStateTransitionOrganisationStructure)
                    .HasForeignKey(d => d.FkOrganisationstructureid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionOrganisationStructure_tblOrganisationStructure");

                entity.HasOne(d => d.FkWorkflowstatetransition)
                    .WithMany(p => p.TblWorkflowStateTransitionOrganisationStructure)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionOrganisationStructure_tblWorkflowStateTransition");
            });

            modelBuilder.Entity<TblWorkflowStateTransitionRole>(entity =>
            {
                entity.HasKey(e => e.PkWorkflowstatetransitionroleid);

                entity.ToTable("tblWorkflowStateTransitionRole");

                entity.HasIndex(e => e.FkRoleid);

                entity.HasIndex(e => e.FkWorkflowstatetransitionid);

                entity.Property(e => e.PkWorkflowstatetransitionroleid).HasColumnName("pk_workflowstatetransitionroleid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkRoleid).HasColumnName("fk_roleid");

                entity.Property(e => e.FkWorkflowstatetransitionid).HasColumnName("fk_workflowstatetransitionid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkRole)
                    .WithMany(p => p.TblWorkflowStateTransitionRole)
                    .HasForeignKey(d => d.FkRoleid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionRole_tblRole");

                entity.HasOne(d => d.FkWorkflowstatetransition)
                    .WithMany(p => p.TblWorkflowStateTransitionRole)
                    .HasForeignKey(d => d.FkWorkflowstatetransitionid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkflowStateTransitionRole_tblWorkflowStateTransition");
            });

            modelBuilder.Entity<TblWorkpermit>(entity =>
            {
                entity.HasKey(e => e.PkWorkpermitid);

                entity.ToTable("tblWorkpermit");

                entity.HasIndex(e => e.FkScopeid);

                entity.HasIndex(e => new { e.FkScopeid, e.Permitnumber })
                    .HasName("IX_workpermit")
                    .IsUnique();

                entity.Property(e => e.PkWorkpermitid).HasColumnName("pk_workpermitid");

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasColumnName("action")
                    .HasMaxLength(10);

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Olddb)
                    .HasColumnName("olddb")
                    .HasMaxLength(100);

                entity.Property(e => e.Oldid).HasColumnName("oldid");

                entity.Property(e => e.Permitdescription)
                    .HasColumnName("permitdescription")
                    .HasMaxLength(100);

                entity.Property(e => e.Permitnumber).HasColumnName("permitnumber");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasColumnName("reason")
                    .HasMaxLength(50);

                entity.Property(e => e.Thirdpartymessage)
                    .HasColumnName("thirdpartymessage")
                    .HasMaxLength(250);

                entity.Property(e => e.Thirdpartynumber)
                    .HasColumnName("thirdpartynumber")
                    .HasMaxLength(25);

                entity.Property(e => e.Thirdpartystatus)
                    .HasColumnName("thirdpartystatus")
                    .HasMaxLength(100);

                entity.Property(e => e.Thirdpartysyncdate)
                    .HasColumnName("thirdpartysyncdate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblWorkpermit)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkPermit_tblScope");
            });

            modelBuilder.Entity<TblWorkPreparationCode>(entity =>
            {
                entity.HasKey(e => e.PkWorkpreparationcodeid);

                entity.ToTable("tblWorkPreparationCode");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => e.FkWorkpreparationphaseid);

                entity.HasIndex(e => new { e.FkProjectid, e.Workpreparationcodecode })
                    .HasName("IX_tblWorkPreparationCode_U1")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProjectid, e.Workpreparationcodedescription })
                    .HasName("IX_tblWorkPreparationCode_U2")
                    .IsUnique();

                entity.Property(e => e.PkWorkpreparationcodeid).HasColumnName("pk_workpreparationcodeid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.FkWorkpreparationphaseid).HasColumnName("fk_workpreparationphaseid");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Setrfcstampwp00).HasColumnName("setrfcstampwp00");

                entity.Property(e => e.Workpreparationcodecode)
                    .IsRequired()
                    .HasColumnName("workpreparationcodecode")
                    .HasMaxLength(3);

                entity.Property(e => e.Workpreparationcodedescription)
                    .IsRequired()
                    .HasColumnName("workpreparationcodedescription")
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblWorkPreparationCode)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkPreparationCode_tblProject");

                entity.HasOne(d => d.FkWorkpreparationphase)
                    .WithMany(p => p.TblWorkPreparationCode)
                    .HasForeignKey(d => d.FkWorkpreparationphaseid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkPreparationCode_tblWorkPreparationPhase");
            });

            modelBuilder.Entity<TblWorkpreparationFreezeHistory>(entity =>
            {
                entity.HasKey(e => e.PkWorkpreparationfreezehistoryid);

                entity.ToTable("tblWorkpreparationFreezeHistory");

                entity.HasIndex(e => e.FkScopeid)
                    .HasName("IX_tblWorkpreparationFreezeHistory");

                entity.Property(e => e.PkWorkpreparationfreezehistoryid).HasColumnName("pk_workpreparationfreezehistoryid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkScopeid).HasColumnName("fk_scopeid");

                entity.Property(e => e.Freezestatetype).HasColumnName("freezestatetype");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Workpreparationfreezedate)
                    .HasColumnName("workpreparationfreezedate")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.FkScope)
                    .WithMany(p => p.TblWorkpreparationFreezeHistory)
                    .HasForeignKey(d => d.FkScopeid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkpreparationFreezeHistory_tblScope");
            });

            modelBuilder.Entity<TblWorkPreparationPhase>(entity =>
            {
                entity.HasKey(e => e.PkWorkpreparationphaseid);

                entity.ToTable("tblWorkPreparationPhase");

                entity.HasIndex(e => e.FkProjectid);

                entity.HasIndex(e => new { e.FkProjectid, e.Workpreparationphasedescription })
                    .HasName("IX_tblWorkPreparationPhase_U2")
                    .IsUnique();

                entity.HasIndex(e => new { e.FkProjectid, e.Workpreparationphasenumber })
                    .HasName("IX_tblWorkPreparationPhase_U1")
                    .IsUnique();

                entity.Property(e => e.PkWorkpreparationphaseid).HasColumnName("pk_workpreparationphaseid");

                entity.Property(e => e.Createcomputer)
                    .IsRequired()
                    .HasColumnName("createcomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Createdate)
                    .HasColumnName("createdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Createuser)
                    .IsRequired()
                    .HasColumnName("createuser")
                    .HasMaxLength(50);

                entity.Property(e => e.FkProjectid).HasColumnName("fk_projectid");

                entity.Property(e => e.Isautoexporttoscheduleit).HasColumnName("isautoexporttoscheduleit");

                entity.Property(e => e.Isautofreeze).HasColumnName("isautofreeze");

                entity.Property(e => e.Modifycomputer)
                    .IsRequired()
                    .HasColumnName("modifycomputer")
                    .HasMaxLength(50);

                entity.Property(e => e.Modifydate)
                    .HasColumnName("modifydate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Modifyuser)
                    .IsRequired()
                    .HasColumnName("modifyuser")
                    .HasMaxLength(50);

                entity.Property(e => e.Workpreparationphasedescription)
                    .IsRequired()
                    .HasColumnName("workpreparationphasedescription")
                    .HasMaxLength(50);

                entity.Property(e => e.Workpreparationphaseenddate)
                    .HasColumnName("workpreparationphaseenddate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Workpreparationphasenumber)
                    .IsRequired()
                    .HasColumnName("workpreparationphasenumber")
                    .HasMaxLength(2);

                entity.Property(e => e.Workpreparationphasestartdate)
                    .HasColumnName("workpreparationphasestartdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Workpreparationphaseweightfactor).HasColumnName("workpreparationphaseweightfactor");

                entity.HasOne(d => d.FkProject)
                    .WithMany(p => p.TblWorkPreparationPhase)
                    .HasForeignKey(d => d.FkProjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblWorkPreparationPhase_tblProject");
            });

            modelBuilder.Entity<Touchscreen>(entity =>
            {
                entity.ToTable("Touchscreen", "tsm");

                entity.Property(e => e.ComputerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");

                entity.Property(e => e.Pincode)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<XpobjectType>(entity =>
            {
                entity.HasKey(e => e.Oid);

                entity.ToTable("XPObjectType");

                entity.HasIndex(e => e.TypeName)
                    .HasName("iTypeName_XPObjectType")
                    .IsUnique();

                entity.Property(e => e.Oid).HasColumnName("OID");

                entity.Property(e => e.AssemblyName).HasMaxLength(254);

                entity.Property(e => e.TypeName).HasMaxLength(254);
            });
        }
    }
}
